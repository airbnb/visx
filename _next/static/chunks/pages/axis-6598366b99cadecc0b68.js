_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[55],{"201w":function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));var o=t("J4UP");function a(n){return Object(o.a)(n)}},"6fY6":function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/axis",function(){return t("k4uw")}])},"Cf/J":function(n,e,t){"use strict";t.d(e,"a",(function(){return l}));var o=t("aWzz"),a=t.n(o),r=t("ERkP"),i=t.n(r),s=["children","id","from","to","x1","y1","x2","y2","fromOffset","fromOpacity","toOffset","toOpacity","rotate","transform","vertical"];function c(){return(c=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}function l(n){var e=n.children,t=n.id,o=n.from,a=n.to,r=n.x1,l=n.y1,d=n.x2,m=n.y2,u=n.fromOffset,f=void 0===u?"0%":u,p=n.fromOpacity,g=void 0===p?1:p,h=n.toOffset,b=void 0===h?"100%":h,y=n.toOpacity,x=void 0===y?1:y,v=n.rotate,C=n.transform,w=n.vertical,A=void 0===w||w,T=function(n,e){if(null==n)return{};var t,o,a={},r=Object.keys(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,s),k=r,O=d,j=l,S=m;return!A||k||O||j||S||(k="0",O="0",j="0",S="1"),i.a.createElement("defs",null,i.a.createElement("linearGradient",c({id:t,x1:k,y1:j,x2:O,y2:S,gradientTransform:v?"rotate("+v+")":C},T),!!e&&e,!e&&i.a.createElement("stop",{offset:f,stopColor:o,stopOpacity:g}),!e&&i.a.createElement("stop",{offset:b,stopColor:a,stopOpacity:x})))}l.propTypes={id:a.a.string.isRequired,from:a.a.string,to:a.a.string,x1:a.a.oneOfType([a.a.string,a.a.number]),x2:a.a.oneOfType([a.a.string,a.a.number]),y1:a.a.oneOfType([a.a.string,a.a.number]),y2:a.a.oneOfType([a.a.string,a.a.number]),fromOffset:a.a.oneOfType([a.a.string,a.a.number]),fromOpacity:a.a.oneOfType([a.a.string,a.a.number]),toOffset:a.a.oneOfType([a.a.string,a.a.number]),toOpacity:a.a.oneOfType([a.a.string,a.a.number]),rotate:a.a.oneOfType([a.a.string,a.a.number]),transform:a.a.string,children:a.a.node,vertical:a.a.bool}},HO86:function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));var o=t("lEbO");function a(n,e){if(n){if("string"===typeof n)return Object(o.a)(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(o.a)(n,e):void 0}}},J4UP:function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));const o=1/4294967296;function a(n=Math.random()){let e=0|(0<=n&&n<1?n/o:Math.abs(n));return()=>(e=1664525*e+1013904223|0,o*(e>>>0))}},fGyu:function(n,e,t){"use strict";t.d(e,"a",(function(){return r}));var o=t("lEbO");var a=t("HO86");function r(n){return function(n){if(Array.isArray(n))return Object(o.a)(n)}(n)||function(n){if("undefined"!==typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||Object(a.a)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},k4uw:function(n,e,t){"use strict";t.r(e);var o=t("jg1C"),a=(t("ERkP"),t("6wy5")),r=t("gnM9"),i=t("Soe+");e.default=function(){return Object(o.jsx)(a.a,{component:r.b,title:"Axis",codeSandboxDirectoryName:"visx-axis",packageJson:i,children:"import React, { useState, useMemo } from 'react';\nimport AreaClosed from '@visx/shape/lib/shapes/AreaClosed';\nimport { curveMonotoneX } from '@visx/curve';\nimport { scaleUtc, scaleLinear, scaleLog, scaleBand, ScaleInput, coerceNumber } from '@visx/scale';\nimport { Axis, Orientation, SharedAxisProps, AxisScale } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { AnimatedAxis, AnimatedGridRows, AnimatedGridColumns } from '@visx/react-spring';\nimport { getSeededRandom } from '@visx/mock-data';\nimport { LinearGradient } from '@visx/gradient';\nimport { timeFormat } from 'd3-time-format';\nimport { GridRowsProps } from '@visx/grid/lib/grids/GridRows';\nimport { GridColumnsProps } from '@visx/grid/lib/grids/GridColumns';\n\nexport const backgroundColor = '#da7cff';\nconst axisColor = '#fff';\nconst tickLabelColor = '#fff';\nexport const labelColor = '#340098';\nconst gridColor = '#6e0fca';\nconst seededRandom = getSeededRandom(0.5);\nconst margin = {\n  top: 40,\n  right: 150,\n  bottom: 20,\n  left: 50,\n};\n\nconst tickLabelProps = () =>\n  ({\n    fill: tickLabelColor,\n    fontSize: 12,\n    fontFamily: 'sans-serif',\n    textAnchor: 'middle',\n  } as const);\n\nconst getMinMax = (vals: (number | { valueOf(): number })[]) => {\n  const numericVals = vals.map(coerceNumber);\n  return [Math.min(...numericVals), Math.max(...numericVals)];\n};\n\nexport type AxisProps = {\n  width: number;\n  height: number;\n  showControls?: boolean;\n};\n\ntype AnimationTrajectory = 'outside' | 'center' | 'min' | 'max' | undefined;\n\ntype AxisComponent = React.FC<\n  SharedAxisProps<AxisScale> & {\n    animationTrajectory: AnimationTrajectory;\n  }\n>;\ntype GridRowsComponent = React.FC<\n  GridRowsProps<AxisScale> & {\n    animationTrajectory: AnimationTrajectory;\n  }\n>;\ntype GridColumnsComponent = React.FC<\n  GridColumnsProps<AxisScale> & {\n    animationTrajectory: AnimationTrajectory;\n  }\n>;\n\nexport default function Example({\n  width: outerWidth = 800,\n  height: outerHeight = 800,\n  showControls = true,\n}: AxisProps) {\n  // use non-animated components if prefers-reduced-motion is set\n  const prefersReducedMotionQuery =\n    typeof window === 'undefined' ? false : window.matchMedia('(prefers-reduced-motion: reduce)');\n  const prefersReducedMotion = !prefersReducedMotionQuery || !!prefersReducedMotionQuery.matches;\n  const [useAnimatedComponents, setUseAnimatedComponents] = useState(!prefersReducedMotion);\n\n  // in svg, margin is subtracted from total width/height\n  const width = outerWidth - margin.left - margin.right;\n  const height = outerHeight - margin.top - margin.bottom;\n  const [dataToggle, setDataToggle] = useState(true);\n  const [animationTrajectory, setAnimationTrajectory] = useState<AnimationTrajectory>('center');\n\n  // define some types\n  interface AxisDemoProps<Scale extends AxisScale> extends SharedAxisProps<Scale> {\n    values: ScaleInput<Scale>[];\n  }\n\n  const AxisComponent: AxisComponent = useAnimatedComponents ? AnimatedAxis : Axis;\n  const GridRowsComponent: GridRowsComponent = useAnimatedComponents ? AnimatedGridRows : GridRows;\n  const GridColumnsComponent: GridColumnsComponent = useAnimatedComponents\n    ? AnimatedGridColumns\n    : GridColumns;\n\n  const axes: AxisDemoProps<AxisScale<number>>[] = useMemo(() => {\n    // toggle between two value ranges to demo animation\n    const linearValues = dataToggle ? [0, 2, 4, 6, 8, 10] : [6, 8, 10, 12];\n    const bandValues = dataToggle ? ['a', 'b', 'c', 'd'] : ['d', 'c', 'b', 'a'];\n    const timeValues = dataToggle\n      ? [new Date('2020-01-01'), new Date('2020-02-01')]\n      : [new Date('2020-02-01'), new Date('2020-03-01')];\n    const logValues = dataToggle ? [1, 10, 100, 1000, 10000] : [0.0001, 0.001, 0.1, 1, 10, 100];\n\n    return [\n      {\n        scale: scaleLinear({\n          domain: getMinMax(linearValues),\n          range: [0, width],\n        }),\n        values: linearValues,\n        tickFormat: (v: number, index: number, ticks: { value: number; index: number }[]) =>\n          index === 0 ? 'first' : index === ticks[ticks.length - 1].index ? 'last' : `${v}`,\n        label: 'linear',\n      },\n      {\n        scale: scaleBand({\n          domain: bandValues,\n          range: [0, width],\n          paddingOuter: 0,\n          paddingInner: 1,\n        }),\n        values: bandValues,\n        tickFormat: (v: string) => v,\n        label: 'categories',\n      },\n      {\n        scale: scaleUtc({\n          domain: getMinMax(timeValues),\n          range: [0, width],\n        }),\n        values: timeValues,\n        tickFormat: (v: Date, i: number) =>\n          i === 3 ? '\ud83c\udf89' : width > 400 || i % 2 === 0 ? timeFormat('%b %d')(v) : '',\n        label: 'time',\n      },\n      {\n        scale: scaleLog({\n          domain: getMinMax(logValues),\n          range: [0, width],\n        }),\n        values: logValues,\n        tickFormat: (v: number) => {\n          const asString = `${v}`;\n          // label only major ticks\n          return asString.match(/^[.01?[\\]]*$/) ? asString : '';\n        },\n        label: 'log',\n      },\n    ];\n  }, [dataToggle, width]);\n\n  if (width < 10) return null;\n\n  const scalePadding = 40;\n  const scaleHeight = height / axes.length - scalePadding;\n\n  const yScale = scaleLinear({\n    domain: [100, 0],\n    range: [scaleHeight, 0],\n  });\n\n  return (\n    <>\n      <svg width={outerWidth} height={outerHeight}>\n        <LinearGradient\n          id=\"visx-axis-gradient\"\n          from={backgroundColor}\n          to={backgroundColor}\n          toOpacity={0.5}\n        />\n        <rect\n          x={0}\n          y={0}\n          width={outerWidth}\n          height={outerHeight}\n          fill={'url(#visx-axis-gradient)'}\n          rx={14}\n        />\n        <g transform={`translate(${margin.left},${margin.top})`}>\n          {axes.map(({ scale, values, label, tickFormat }, i) => (\n            <g key={`scale-${i}`} transform={`translate(0, ${i * (scaleHeight + scalePadding)})`}>\n              <GridRowsComponent\n                // force remount when this changes to see the animation difference\n                key={`gridrows-${animationTrajectory}`}\n                scale={yScale}\n                stroke={gridColor}\n                width={width}\n                numTicks={dataToggle ? 1 : 3}\n                animationTrajectory={animationTrajectory}\n              />\n              <GridColumnsComponent\n                // force remount when this changes to see the animation difference\n                key={`gridcolumns-${animationTrajectory}`}\n                scale={scale}\n                stroke={gridColor}\n                height={scaleHeight}\n                numTicks={dataToggle ? 5 : 2}\n                animationTrajectory={animationTrajectory}\n              />\n              <AreaClosed\n                data={values.map((x) => [\n                  (scale(x) ?? 0) +\n                    // offset point half of band width for band scales\n                    ('bandwidth' in scale && typeof scale!.bandwidth !== 'undefined'\n                      ? scale.bandwidth!() / 2\n                      : 0),\n                  yScale(10 + seededRandom() * 90),\n                ])}\n                yScale={yScale}\n                curve={curveMonotoneX}\n                fill={gridColor}\n                fillOpacity={0.2}\n              />\n              <AxisComponent\n                // force remount when this changes to see the animation difference\n                key={`axis-${animationTrajectory}`}\n                orientation={Orientation.bottom}\n                top={scaleHeight}\n                scale={scale}\n                tickFormat={tickFormat}\n                stroke={axisColor}\n                tickStroke={axisColor}\n                tickLabelProps={tickLabelProps}\n                tickValues={label === 'log' || label === 'time' ? undefined : values}\n                numTicks={label === 'time' ? 6 : undefined}\n                label={label}\n                labelProps={{\n                  x: width + 30,\n                  y: -10,\n                  fill: labelColor,\n                  fontSize: 18,\n                  strokeWidth: 0,\n                  stroke: '#fff',\n                  paintOrder: 'stroke',\n                  fontFamily: 'sans-serif',\n                  textAnchor: 'start',\n                }}\n                animationTrajectory={animationTrajectory}\n              />\n            </g>\n          ))}\n        </g>\n      </svg>\n      {showControls && (\n        <>\n          <div style={{ fontSize: 12 }}>\n            <label>\n              <input\n                type=\"checkbox\"\n                onChange={() => setUseAnimatedComponents(!useAnimatedComponents)}\n                checked={useAnimatedComponents}\n              />{' '}\n              enable animation\n            </label>\n            &nbsp;&nbsp;&nbsp;\n            {useAnimatedComponents && (\n              <>\n                <strong>animation trajectory</strong>\n                <label>\n                  <input\n                    type=\"radio\"\n                    onChange={() => setAnimationTrajectory('outside')}\n                    checked={animationTrajectory === 'outside'}\n                  />{' '}\n                  outside\n                </label>\n                <label>\n                  <input\n                    type=\"radio\"\n                    onChange={() => setAnimationTrajectory('center')}\n                    checked={animationTrajectory === 'center'}\n                  />{' '}\n                  center\n                </label>\n                <label>\n                  <input\n                    type=\"radio\"\n                    onChange={() => setAnimationTrajectory('min')}\n                    checked={animationTrajectory === 'min'}\n                  />{' '}\n                  min\n                </label>\n                <label>\n                  <input\n                    type=\"radio\"\n                    onChange={() => setAnimationTrajectory('max')}\n                    checked={animationTrajectory === 'max'}\n                  />{' '}\n                  max\n                </label>\n              </>\n            )}\n          </div>\n          {useAnimatedComponents && (\n            <button onClick={() => setDataToggle(!dataToggle)}>Update scales</button>\n          )}\n        </>\n      )}\n    </>\n  );\n}\n"})}},lEbO:function(n,e,t){"use strict";function o(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=new Array(e);t<e;t++)o[t]=n[t];return o}t.d(e,"a",(function(){return o}))}},[["6fY6",0,2,1,3,4,5,6,7,11,12,13,14,15,17,19,22,27]]]);
"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9273],{99273:function(e,n,t){t.d(n,{H:function(){return attachDocGenInfo}});var i=JSON.parse('{"@visx/annotation":{"Connector":{"displayName":"Connector","kind":"component","props":{"x":{"name":"x","required":false,"description":"x position of the Subject.","type":{"name":"number | undefined"}},"y":{"name":"y","required":false,"description":"y position of the Subject.","type":{"name":"number | undefined"}},"dx":{"name":"dx","required":false,"description":"x delta of the Label from the Subject.","type":{"name":"number | undefined"}},"dy":{"name":"dy","required":false,"description":"y delta of the Label from the Subject.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"Optional className to apply to container in addition to \'visx-annotation-connector\'.","type":{"name":"string | undefined"}},"type":{"name":"type","required":false,"description":"Connector type.","type":{"name":"\\"line\\" | \\"elbow\\" | undefined"},"defaultValue":{"value":"\'elbow\'"}},"stroke":{"name":"stroke","required":false,"description":"Color of the connector line.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#222\'"}},"pathProps":{"name":"pathProps","required":false,"description":"Optional additional props.","type":{"name":"SVGProps<SVGPathElement> | undefined"}}},"filePath":"visx-annotation/src/components/Connector.tsx","lineNumber":20},"AnchorLine":{"displayName":"AnchorLine","kind":"component","props":{"anchorLineOrientation":{"name":"anchorLineOrientation","required":true,"type":{"name":"\\"horizontal\\" | \\"vertical\\""}},"verticalAnchor":{"name":"verticalAnchor","required":true,"type":{"name":"\\"end\\" | \\"start\\" | \\"middle\\" | undefined"}},"horizontalAnchor":{"name":"horizontalAnchor","required":true,"type":{"name":"\\"end\\" | \\"start\\" | \\"middle\\" | \\"inherit\\" | undefined"}},"anchorLineStroke":{"name":"anchorLineStroke","required":true,"type":{"name":"string"}},"width":{"name":"width","required":true,"type":{"name":"number"}},"height":{"name":"height","required":true,"type":{"name":"number"}}},"filePath":"visx-annotation/src/components/LabelAnchorLine.tsx","lineNumber":13},"Label":{"displayName":"Label","kind":"component","props":{"anchorLineStroke":{"name":"anchorLineStroke","required":false,"description":"Stroke color of anchor line.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#222\'"}},"backgroundFill":{"name":"backgroundFill","required":false,"description":"Background color of label.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#eaeaea\'"}},"backgroundPadding":{"name":"backgroundPadding","required":false,"description":"Padding of text from background.","type":{"name":"number | { top?: number | undefined; right?: number | undefined; bottom?: number | undefined; left?: number | undefined; } | undefined"}},"backgroundProps":{"name":"backgroundProps","required":false,"description":"Additional props to be passed to background SVGRectElement.","type":{"name":"SVGProps<SVGRectElement> | undefined"}},"className":{"name":"className","required":false,"description":"Optional className to apply to container in addition to \'visx-annotation-label\'.","type":{"name":"string | undefined"}},"fontColor":{"name":"fontColor","required":false,"description":"Color of title and subtitle text.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#222\'"}},"horizontalAnchor":{"name":"horizontalAnchor","required":false,"description":"Whether the label is horizontally anchored to the start, middle, or end of its x position.","type":{"name":"\\"end\\" | \\"start\\" | \\"middle\\" | \\"inherit\\" | undefined"}},"resizeObserverPolyfill":{"name":"resizeObserverPolyfill","required":false,"description":"Optionally inject a ResizeObserver polyfill, else this *must* be globally available.","type":{"name":"(new (cb: ResizeObserverCallback) => ResizeObserver) | undefined"}},"showAnchorLine":{"name":"showAnchorLine","required":false,"description":"Whether to render a line indicating label text anchor.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}},"showBackground":{"name":"showBackground","required":false,"description":"Whether to render a label background.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}},"subtitle":{"name":"subtitle","required":false,"description":"Optional subtitle.","type":{"name":"string | undefined"}},"subtitleFontSize":{"name":"subtitleFontSize","required":false,"description":"Optional title font size.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"12"}},"subtitleFontWeight":{"name":"subtitleFontWeight","required":false,"description":"Optional title font weight.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"200"}},"subtitleDy":{"name":"subtitleDy","required":false,"description":"The vertical offset of the subtitle from the title.","type":{"name":"number | undefined"},"defaultValue":{"value":"4"}},"subtitleProps":{"name":"subtitleProps","required":false,"description":"Optional subtitle Text props (to override color, etc.).","type":{"name":"Partial<TextProps> | undefined"}},"title":{"name":"title","required":false,"description":"Optional title.","type":{"name":"string | undefined"}},"titleFontSize":{"name":"titleFontSize","required":false,"description":"Optional title font size.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"16"}},"titleFontWeight":{"name":"titleFontWeight","required":false,"description":"Optional title font weight.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"600"}},"titleProps":{"name":"titleProps","required":false,"description":"Optional title Text props (to override color, etc.).","type":{"name":"Partial<TextProps> | undefined"}},"verticalAnchor":{"name":"verticalAnchor","required":false,"description":"Whether the label is vertically anchored to the start, middle, or end of its y position.","type":{"name":"\\"end\\" | \\"start\\" | \\"middle\\" | undefined"}},"width":{"name":"width","required":false,"description":"Width of annotation, including background, for text wrapping.","type":{"name":"number | undefined"}},"maxWidth":{"name":"maxWidth","required":false,"description":"Max width of annotation, including background, for text wrapping.","type":{"name":"number | undefined"},"defaultValue":{"value":"125"}},"x":{"name":"x","required":false,"description":"Left offset of entire AnnotationLabel, if not specified uses x + dx from Annotation.","type":{"name":"number | undefined"}},"y":{"name":"y","required":false,"description":"Top offset of entire AnnotationLabel, if not specified uses y + dy from Annotation.","type":{"name":"number | undefined"}}},"filePath":"visx-annotation/src/components/Label.tsx","lineNumber":72},"HtmlLabel":{"displayName":"HtmlLabel","kind":"component","props":{"x":{"name":"x","required":false,"description":"Left offset of entire AnnotationLabel, if not specified uses x + dx from Annotation.","type":{"name":"number | undefined"}},"y":{"name":"y","required":false,"description":"Top offset of entire AnnotationLabel, if not specified uses y + dy from Annotation.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"Optional className to apply to container in addition to \'visx-annotation-label\'.","type":{"name":"string | undefined"}},"verticalAnchor":{"name":"verticalAnchor","required":false,"description":"Whether the label is vertically anchored to the start, middle, or end of its y position.","type":{"name":"\\"end\\" | \\"start\\" | \\"middle\\" | undefined"}},"anchorLineStroke":{"name":"anchorLineStroke","required":false,"description":"Stroke color of anchor line.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#222\'"}},"horizontalAnchor":{"name":"horizontalAnchor","required":false,"description":"Whether the label is horizontally anchored to the start, middle, or end of its x position.","type":{"name":"\\"end\\" | \\"start\\" | \\"middle\\" | \\"inherit\\" | undefined"}},"resizeObserverPolyfill":{"name":"resizeObserverPolyfill","required":false,"description":"Optionally inject a ResizeObserver polyfill, else this *must* be globally available.","type":{"name":"(new (cb: ResizeObserverCallback) => ResizeObserver) | undefined"}},"showAnchorLine":{"name":"showAnchorLine","required":false,"description":"Whether to render a line indicating label text anchor.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}},"children":{"name":"children","required":false,"description":"Pass in a custom element as the label to style as you like. Renders inside a <foreignObject>, be aware that most non-browser SVG renderers will not render HTML <foreignObject>s. See: https://github.com/airbnb/visx/issues/1173#issuecomment-1014380545.","type":{"name":"ReactNode"}},"containerStyle":{"name":"containerStyle","required":false,"description":"Optional styles to apply to the HTML container.","type":{"name":"CSSProperties | undefined"}}},"filePath":"visx-annotation/src/components/HtmlLabel.tsx","lineNumber":27},"CircleSubject":{"displayName":"CircleSubject","kind":"component","props":{"x":{"name":"x","required":false,"description":"x position of the Subject.","type":{"name":"number | undefined"}},"y":{"name":"y","required":false,"description":"y position of the Subject.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"Optional className to apply to CircleSubject in addition to \'visx-annotation-subject\'.","type":{"name":"string | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Color of CircleSubject.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#222\'"}},"radius":{"name":"radius","required":false,"description":"Radius of CircleSubject.","type":{"name":"number | undefined"},"defaultValue":{"value":"16"}}},"filePath":"visx-annotation/src/components/CircleSubject.tsx","lineNumber":15},"LineSubject":{"displayName":"LineSubject","kind":"component","props":{"className":{"name":"className","required":false,"description":"Optional className to apply to LineSubject in addition to \'visx-annotation-subject\'.","type":{"name":"string | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Color of LineSubject.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#222\'"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"strokeWidth of LineSubject.","type":{"name":"number | undefined"}},"orientation":{"name":"orientation","required":false,"description":"Orientation of line.","type":{"name":"\\"horizontal\\" | \\"vertical\\" | undefined"},"defaultValue":{"value":"\'vertical\'"}},"x":{"name":"x","required":false,"description":"x position of LineSubject (for vertical LineSubjects).","type":{"name":"number | undefined"}},"y":{"name":"y","required":false,"description":"y position of LineSubject (for horizontal LineSubjects).","type":{"name":"number | undefined"}},"min":{"name":"min","required":true,"description":"The minimum coordinate of the line.","type":{"name":"number"}},"max":{"name":"max","required":true,"description":"The maximum coordinate of the line.","type":{"name":"number"}}},"filePath":"visx-annotation/src/components/LineSubject.tsx","lineNumber":24},"Annotation":{"displayName":"Annotation","kind":"component","props":{"x":{"name":"x","required":false,"description":"x position of the Subject.","type":{"name":"number | undefined"}},"y":{"name":"y","required":false,"description":"y position of the Subject.","type":{"name":"number | undefined"}},"dx":{"name":"dx","required":false,"description":"x delta of the Label from the Subject.","type":{"name":"number | undefined"}},"dy":{"name":"dy","required":false,"description":"y delta of the Label from the Subject.","type":{"name":"number | undefined"}},"children":{"name":"children","required":true,"description":"Annotation children (Subject, Label, Connector)","type":{"name":"ReactNode"}}},"filePath":"visx-annotation/src/components/Annotation.tsx","lineNumber":10},"EditableAnnotation":{"displayName":"EditableAnnotation","kind":"component","props":{"x":{"name":"x","required":false,"description":"x position of the Subject.","type":{"name":"number | undefined"}},"y":{"name":"y","required":false,"description":"y position of the Subject.","type":{"name":"number | undefined"}},"dx":{"name":"dx","required":false,"description":"x delta of the Label from the Subject.","type":{"name":"number | undefined"}},"dy":{"name":"dy","required":false,"description":"y delta of the Label from the Subject.","type":{"name":"number | undefined"}},"width":{"name":"width","required":true,"description":"Width of the possible drag canvas (e.g., SVG container).","type":{"name":"number"}},"height":{"name":"height","required":true,"description":"Height of the possible drag canvas (e.g., SVG container).","type":{"name":"number"}},"children":{"name":"children","required":true,"description":"Annotation children (Subject, Label, Connector)","type":{"name":"ReactNode"}},"canEditLabel":{"name":"canEditLabel","required":false,"description":"Whether the Label position (dx, dy) is editable.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}},"canEditSubject":{"name":"canEditSubject","required":false,"description":"Whether the Subject position (x, y) is editable.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}},"subjectDragHandleProps":{"name":"subjectDragHandleProps","required":false,"description":"Optional circle props to set on the subject drag handle.","type":{"name":"SVGProps<SVGCircleElement> | undefined"}},"labelDragHandleProps":{"name":"labelDragHandleProps","required":false,"description":"Optional circle props to set on the label drag handle.","type":{"name":"SVGProps<SVGCircleElement> | undefined"}},"onDragStart":{"name":"onDragStart","required":false,"description":"Callback invoked on drag start.","type":{"name":"(({ x, y, dx, dy, event }: HandlerArgs) => void) | undefined"}},"onDragMove":{"name":"onDragMove","required":false,"description":"Callback invoked on drag move.","type":{"name":"(({ x, y, dx, dy, event }: HandlerArgs) => void) | undefined"}},"onDragEnd":{"name":"onDragEnd","required":false,"description":"Callback invoked on drag end.","type":{"name":"(({ x, y, dx, dy, event }: HandlerArgs) => void) | undefined"}}},"filePath":"visx-annotation/src/components/EditableAnnotation.tsx","lineNumber":47}},"@visx/axis":{"getLabelTransform":{"displayName":"getLabelTransform","kind":"function","props":{},"parameters":[{"name":"{\\n  labelOffset,\\n  labelProps,\\n  orientation,\\n  range,\\n  tickLabelFontSize,\\n  tickLength,\\n}","type":{"name":"TransformArgs"}}],"filePath":"visx-axis/src/utils/getLabelTransform.ts","lineNumber":15},"Ticks":{"displayName":"Ticks","kind":"component","props":{"tickLabelProps":{"name":"tickLabelProps","required":true,"type":{"name":"Partial<TextProps>[]"}},"hideTicks":{"name":"hideTicks","required":false,"description":"If true, will hide the ticks (but not the tick labels).","type":{"name":"boolean | undefined"}},"horizontal":{"name":"horizontal","required":true,"description":"Whether this axis is horizontal","type":{"name":"boolean"}},"orientation":{"name":"orientation","required":false,"description":"Placement of the axis","type":{"name":"ValueOf<{ readonly top: \\"top\\"; readonly left: \\"left\\"; readonly right: \\"right\\"; readonly bottom: \\"bottom\\"; }> | undefined"}},"scale":{"name":"scale","required":true,"description":"A [d3](https://github.com/d3/d3-scale) or [visx](https://github.com/airbnb/visx/tree/master/packages/visx-scale) scale function.","type":{"name":"Scale"}},"tickClassName":{"name":"tickClassName","required":false,"description":"The class name applied to each tick group.","type":{"name":"string | undefined"}},"tickComponent":{"name":"tickComponent","required":false,"description":"Override the component used to render tick labels (instead of <Text /> from @visx/text).","type":{"name":"((tickRendererProps: TickRendererProps) => ReactNode) | undefined"}},"tickStroke":{"name":"tickStroke","required":false,"description":"The color for the tick\'s stroke value.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#222\'"}},"tickTransform":{"name":"tickTransform","required":false,"description":"A custom SVG transform value to be applied to each tick group.","type":{"name":"string | undefined"}},"ticks":{"name":"ticks","required":true,"description":"Computed ticks with positions and formatted value","type":{"name":"ComputedTick<Scale>[]"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The pixel value for the width of the lines.","type":{"name":"string | number | undefined"}},"tickLineProps":{"name":"tickLineProps","required":false,"description":"Props to be applied to individual tick lines.","type":{"name":"LineProps | undefined"}}},"filePath":"visx-axis/src/axis/Ticks.tsx","lineNumber":10},"AxisRenderer":{"displayName":"AxisRenderer","kind":"component","props":{"axisLineClassName":{"name":"axisLineClassName","required":false,"description":"The class name applied to the axis line element.","type":{"name":"string | undefined"}},"hideAxisLine":{"name":"hideAxisLine","required":false,"description":"If true, will hide the axis line.","type":{"name":"boolean | undefined"}},"hideTicks":{"name":"hideTicks","required":false,"description":"If true, will hide the ticks (but not the tick labels).","type":{"name":"boolean | undefined"}},"hideZero":{"name":"hideZero","required":false,"description":"If true, will hide the \'0\' value tick and tick label.","type":{"name":"boolean | undefined"}},"label":{"name":"label","required":false,"description":"The text for the axis label.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'\'"}},"labelClassName":{"name":"labelClassName","required":false,"description":"The class name applied to the axis label text element.","type":{"name":"string | undefined"}},"labelOffset":{"name":"labelOffset","required":false,"description":"Pixel offset of the axis label (does not include tick label font size, which is accounted for automatically)","type":{"name":"number | undefined"},"defaultValue":{"value":"14"}},"labelProps":{"name":"labelProps","required":false,"description":"Props applied to the axis label component.","type":{"name":"Partial<TextProps> | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"The number of ticks wanted for the axis (note this is approximate)","type":{"name":"number | undefined"}},"orientation":{"name":"orientation","required":false,"description":"Placement of the axis","type":{"name":"ValueOf<{ readonly top: \\"top\\"; readonly left: \\"left\\"; readonly right: \\"right\\"; readonly bottom: \\"bottom\\"; }> | undefined"},"defaultValue":{"value":"Orientation.bottom"}},"rangePadding":{"name":"rangePadding","required":false,"description":"Pixel padding to apply to axis sides.","type":{"name":"number | { start?: number | undefined; end?: number | undefined; } | undefined"}},"stroke":{"name":"stroke","required":false,"description":"The color for the stroke of the lines.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#222\'"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The pixel value for the width of the lines.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"1"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"The pattern of dashes in the stroke.","type":{"name":"string | undefined"}},"tickLineProps":{"name":"tickLineProps","required":false,"description":"Props to be applied to individual tick lines.","type":{"name":"LineProps | undefined"}},"tickClassName":{"name":"tickClassName","required":false,"description":"The class name applied to each tick group.","type":{"name":"string | undefined"}},"tickComponent":{"name":"tickComponent","required":false,"description":"Override the component used to render tick labels (instead of <Text /> from @visx/text).","type":{"name":"((tickRendererProps: TickRendererProps) => ReactNode) | undefined"}},"ticksComponent":{"name":"ticksComponent","required":false,"description":"Override the component used to render all tick lines and labels.","type":{"name":"((tickRendererProps: TicksRendererProps<Scale>) => ReactNode) | undefined"},"defaultValue":{"value":"Ticks"}},"tickFormat":{"name":"tickFormat","required":false,"description":"A [d3 formatter](https://github.com/d3/d3-scale/blob/master/README.md#continuous_tickFormat) for the tick text.","type":{"name":"TickFormatter<ScaleInput<Scale>> | undefined"}},"tickLabelProps":{"name":"tickLabelProps","required":false,"description":"Either an object with the props for all tick labels or a function that returns props for a given tick label.","type":{"name":"TickLabelProps<ScaleInput<Scale>> | undefined"}},"tickLength":{"name":"tickLength","required":false,"description":"The length of the tick lines.","type":{"name":"number | undefined"},"defaultValue":{"value":"8"}},"tickStroke":{"name":"tickStroke","required":false,"description":"The color for the tick\'s stroke value.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#222\'"}},"tickTransform":{"name":"tickTransform","required":false,"description":"A custom SVG transform value to be applied to each tick group.","type":{"name":"string | undefined"}},"axisFromPoint":{"name":"axisFromPoint","required":true,"description":"Start point of the axis line","type":{"name":"Point"}},"axisToPoint":{"name":"axisToPoint","required":true,"description":"End point of the axis line","type":{"name":"Point"}},"horizontal":{"name":"horizontal","required":true,"description":"Whether this axis is horizontal","type":{"name":"boolean"}},"scale":{"name":"scale","required":true,"description":"A [d3](https://github.com/d3/d3-scale) or [visx](https://github.com/airbnb/visx/tree/master/packages/visx-scale) scale function.","type":{"name":"Scale"}},"tickPosition":{"name":"tickPosition","required":true,"description":"Function to compute tick position along the axis from tick value","type":{"name":"(value: ScaleInput<Scale>) => AxisScaleOutput"}},"tickSign":{"name":"tickSign","required":true,"description":"Axis coordinate sign, -1 for left or top orientation.","type":{"name":"1 | -1"}},"ticks":{"name":"ticks","required":true,"description":"Computed ticks with positions and formatted value","type":{"name":"ComputedTick<Scale>[]"}}},"filePath":"visx-axis/src/axis/AxisRenderer.tsx","lineNumber":19},"getTickPosition":{"displayName":"getTickPosition","description":"Create a function that returns a tick position for the given tick value","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"Scale"}},{"name":"align","type":{"name":"\\"end\\" | \\"start\\" | \\"center\\""},"defaultValue":{"value":"\'center\'"}}],"filePath":"visx-axis/src/utils/getTickPosition.ts","lineNumber":7},"getTickFormatter":{"displayName":"getTickFormatter","description":"Returns a tick position for the given tick value","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"Scale"}}],"filePath":"visx-axis/src/utils/getTickFormatter.ts","lineNumber":8},"createPoint":{"displayName":"createPoint","kind":"function","props":{},"parameters":[{"name":"{ x, y }","type":{"name":"Partial<Point>"}},{"name":"horizontal","type":{"name":"boolean"}}],"filePath":"visx-axis/src/utils/createPoint.ts","lineNumber":3},"getAxisRangePaddingConfig":{"displayName":"getAxisRangePaddingConfig","kind":"function","props":{},"parameters":[{"name":"originalRangePadding","type":{"name":"number | { start?: number | undefined; end?: number | undefined; } | undefined"},"defaultValue":{"value":"defaultAxisRangePadding"}}],"filePath":"visx-axis/src/utils/getAxisRangePaddingConfig.ts","lineNumber":5},"Axis":{"displayName":"Axis","kind":"component","props":{"axisLineClassName":{"name":"axisLineClassName","required":false,"description":"The class name applied to the axis line element.","type":{"name":"string | undefined"}},"hideAxisLine":{"name":"hideAxisLine","required":false,"description":"If true, will hide the axis line.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"hideTicks":{"name":"hideTicks","required":false,"description":"If true, will hide the ticks (but not the tick labels).","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"hideZero":{"name":"hideZero","required":false,"description":"If true, will hide the \'0\' value tick and tick label.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"label":{"name":"label","required":false,"description":"The text for the axis label.","type":{"name":"string | undefined"}},"labelClassName":{"name":"labelClassName","required":false,"description":"The class name applied to the axis label text element.","type":{"name":"string | undefined"}},"labelOffset":{"name":"labelOffset","required":false,"description":"Pixel offset of the axis label (does not include tick label font size, which is accounted for automatically)","type":{"name":"number | undefined"}},"labelProps":{"name":"labelProps","required":false,"description":"Props applied to the axis label component.","type":{"name":"Partial<TextProps> | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"The number of ticks wanted for the axis (note this is approximate)","type":{"name":"number | undefined"},"defaultValue":{"value":"10"}},"orientation":{"name":"orientation","required":false,"description":"Placement of the axis","type":{"name":"\\"top\\" | \\"left\\" | \\"right\\" | \\"bottom\\" | undefined"},"defaultValue":{"value":"Orientation.bottom"}},"rangePadding":{"name":"rangePadding","required":false,"description":"Pixel padding to apply to axis sides.","type":{"name":"number | { start?: number | undefined; end?: number | undefined; } | undefined"},"defaultValue":{"value":"0"}},"stroke":{"name":"stroke","required":false,"description":"The color for the stroke of the lines.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The pixel value for the width of the lines.","type":{"name":"string | number | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"The pattern of dashes in the stroke.","type":{"name":"string | undefined"}},"tickLineProps":{"name":"tickLineProps","required":false,"description":"Props to be applied to individual tick lines.","type":{"name":"LineProps | undefined"}},"tickClassName":{"name":"tickClassName","required":false,"description":"The class name applied to each tick group.","type":{"name":"string | undefined"}},"tickComponent":{"name":"tickComponent","required":false,"description":"Override the component used to render tick labels (instead of <Text /> from @visx/text).","type":{"name":"((tickRendererProps: TickRendererProps) => ReactNode) | undefined"}},"ticksComponent":{"name":"ticksComponent","required":false,"description":"Override the component used to render all tick lines and labels.","type":{"name":"((tickRendererProps: TicksRendererProps<Scale>) => ReactNode) | undefined"}},"tickFormat":{"name":"tickFormat","required":false,"description":"A [d3 formatter](https://github.com/d3/d3-scale/blob/master/README.md#continuous_tickFormat) for the tick text.","type":{"name":"TickFormatter<ScaleInput<Scale>> | undefined"}},"tickLabelProps":{"name":"tickLabelProps","required":false,"description":"Either an object with the props for all tick labels or a function that returns props for a given tick label.","type":{"name":"TickLabelProps<ScaleInput<Scale>> | undefined"}},"tickLength":{"name":"tickLength","required":false,"description":"The length of the tick lines.","type":{"name":"number | undefined"},"defaultValue":{"value":"8"}},"tickStroke":{"name":"tickStroke","required":false,"description":"The color for the tick\'s stroke value.","type":{"name":"string | undefined"}},"tickTransform":{"name":"tickTransform","required":false,"description":"A custom SVG transform value to be applied to each tick group.","type":{"name":"string | undefined"}},"axisClassName":{"name":"axisClassName","required":false,"description":"The class name applied to the outermost axis group element.","type":{"name":"string | undefined"}},"left":{"name":"left","required":false,"description":"A left pixel offset applied to the entire axis.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"innerRef":{"name":"innerRef","required":false,"description":"The ref to the outermost axis group element.","type":{"name":"Ref<SVGGElement> | undefined"}},"scale":{"name":"scale","required":true,"description":"A [d3](https://github.com/d3/d3-scale) or [visx](https://github.com/airbnb/visx/tree/master/packages/visx-scale) scale function.","type":{"name":"Scale"}},"tickValues":{"name":"tickValues","required":false,"description":"An array of values that determine the number and values of the ticks. Falls back to `scale.ticks()` or `.domain()`.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"top":{"name":"top","required":false,"description":"A top pixel offset applied to the entire axis.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"children":{"name":"children","required":false,"description":"For more control over rendering or to add event handlers to datum, pass a function as children.","type":{"name":"((renderProps: AxisRendererProps<Scale>) => ReactNode) | undefined"},"defaultValue":{"value":"AxisRenderer"}}},"filePath":"visx-axis/src/axis/Axis.tsx","lineNumber":18},"AxisLeft":{"displayName":"AxisLeft","kind":"component","props":{"axisLineClassName":{"name":"axisLineClassName","required":false,"description":"The class name applied to the axis line element.","type":{"name":"string | undefined"}},"hideAxisLine":{"name":"hideAxisLine","required":false,"description":"If true, will hide the axis line.","type":{"name":"boolean | undefined"}},"hideTicks":{"name":"hideTicks","required":false,"description":"If true, will hide the ticks (but not the tick labels).","type":{"name":"boolean | undefined"}},"hideZero":{"name":"hideZero","required":false,"description":"If true, will hide the \'0\' value tick and tick label.","type":{"name":"boolean | undefined"}},"label":{"name":"label","required":false,"description":"The text for the axis label.","type":{"name":"string | undefined"}},"labelClassName":{"name":"labelClassName","required":false,"description":"The class name applied to the axis label text element.","type":{"name":"string | undefined"}},"labelOffset":{"name":"labelOffset","required":false,"description":"Pixel offset of the axis label (does not include tick label font size, which is accounted for automatically)","type":{"name":"number | undefined"},"defaultValue":{"value":"36"}},"labelProps":{"name":"labelProps","required":false,"description":"Props applied to the axis label component.","type":{"name":"Partial<TextProps> | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"The number of ticks wanted for the axis (note this is approximate)","type":{"name":"number | undefined"}},"orientation":{"name":"orientation","required":false,"description":"Placement of the axis","type":{"name":"ValueOf<{ readonly top: \\"top\\"; readonly left: \\"left\\"; readonly right: \\"right\\"; readonly bottom: \\"bottom\\"; }> | undefined"}},"rangePadding":{"name":"rangePadding","required":false,"description":"Pixel padding to apply to axis sides.","type":{"name":"number | { start?: number | undefined; end?: number | undefined; } | undefined"}},"stroke":{"name":"stroke","required":false,"description":"The color for the stroke of the lines.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The pixel value for the width of the lines.","type":{"name":"string | number | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"The pattern of dashes in the stroke.","type":{"name":"string | undefined"}},"tickLineProps":{"name":"tickLineProps","required":false,"description":"Props to be applied to individual tick lines.","type":{"name":"LineProps | undefined"}},"tickClassName":{"name":"tickClassName","required":false,"description":"The class name applied to each tick group.","type":{"name":"string | undefined"}},"tickComponent":{"name":"tickComponent","required":false,"description":"Override the component used to render tick labels (instead of <Text /> from @visx/text).","type":{"name":"((tickRendererProps: TickRendererProps) => ReactNode) | undefined"}},"ticksComponent":{"name":"ticksComponent","required":false,"description":"Override the component used to render all tick lines and labels.","type":{"name":"((tickRendererProps: TicksRendererProps<Scale>) => ReactNode) | undefined"}},"tickFormat":{"name":"tickFormat","required":false,"description":"A [d3 formatter](https://github.com/d3/d3-scale/blob/master/README.md#continuous_tickFormat) for the tick text.","type":{"name":"TickFormatter<ScaleInput<Scale>> | undefined"}},"tickLabelProps":{"name":"tickLabelProps","required":false,"description":"Either an object with the props for all tick labels or a function that returns props for a given tick label.","type":{"name":"TickLabelProps<ScaleInput<Scale>> | undefined"}},"tickLength":{"name":"tickLength","required":false,"description":"The length of the tick lines.","type":{"name":"number | undefined"},"defaultValue":{"value":"8"}},"tickStroke":{"name":"tickStroke","required":false,"description":"The color for the tick\'s stroke value.","type":{"name":"string | undefined"}},"tickTransform":{"name":"tickTransform","required":false,"description":"A custom SVG transform value to be applied to each tick group.","type":{"name":"string | undefined"}},"axisClassName":{"name":"axisClassName","required":false,"description":"The class name applied to the outermost axis group element.","type":{"name":"string | undefined"}},"left":{"name":"left","required":false,"description":"A left pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"The ref to the outermost axis group element.","type":{"name":"Ref<SVGGElement> | undefined"}},"scale":{"name":"scale","required":true,"description":"A [d3](https://github.com/d3/d3-scale) or [visx](https://github.com/airbnb/visx/tree/master/packages/visx-scale) scale function.","type":{"name":"Scale"}},"tickValues":{"name":"tickValues","required":false,"description":"An array of values that determine the number and values of the ticks. Falls back to `scale.ticks()` or `.domain()`.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"top":{"name":"top","required":false,"description":"A top pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"children":{"name":"children","required":false,"description":"For more control over rendering or to add event handlers to datum, pass a function as children.","type":{"name":"((renderProps: AxisRendererProps<Scale>) => ReactNode) | undefined"}}},"filePath":"visx-axis/src/axis/AxisLeft.tsx","lineNumber":16},"AxisRight":{"displayName":"AxisRight","kind":"component","props":{"axisLineClassName":{"name":"axisLineClassName","required":false,"description":"The class name applied to the axis line element.","type":{"name":"string | undefined"}},"hideAxisLine":{"name":"hideAxisLine","required":false,"description":"If true, will hide the axis line.","type":{"name":"boolean | undefined"}},"hideTicks":{"name":"hideTicks","required":false,"description":"If true, will hide the ticks (but not the tick labels).","type":{"name":"boolean | undefined"}},"hideZero":{"name":"hideZero","required":false,"description":"If true, will hide the \'0\' value tick and tick label.","type":{"name":"boolean | undefined"}},"label":{"name":"label","required":false,"description":"The text for the axis label.","type":{"name":"string | undefined"}},"labelClassName":{"name":"labelClassName","required":false,"description":"The class name applied to the axis label text element.","type":{"name":"string | undefined"}},"labelOffset":{"name":"labelOffset","required":false,"description":"Pixel offset of the axis label (does not include tick label font size, which is accounted for automatically)","type":{"name":"number | undefined"},"defaultValue":{"value":"36"}},"labelProps":{"name":"labelProps","required":false,"description":"Props applied to the axis label component.","type":{"name":"Partial<TextProps> | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"The number of ticks wanted for the axis (note this is approximate)","type":{"name":"number | undefined"}},"orientation":{"name":"orientation","required":false,"description":"Placement of the axis","type":{"name":"ValueOf<{ readonly top: \\"top\\"; readonly left: \\"left\\"; readonly right: \\"right\\"; readonly bottom: \\"bottom\\"; }> | undefined"}},"rangePadding":{"name":"rangePadding","required":false,"description":"Pixel padding to apply to axis sides.","type":{"name":"number | { start?: number | undefined; end?: number | undefined; } | undefined"}},"stroke":{"name":"stroke","required":false,"description":"The color for the stroke of the lines.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The pixel value for the width of the lines.","type":{"name":"string | number | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"The pattern of dashes in the stroke.","type":{"name":"string | undefined"}},"tickLineProps":{"name":"tickLineProps","required":false,"description":"Props to be applied to individual tick lines.","type":{"name":"LineProps | undefined"}},"tickClassName":{"name":"tickClassName","required":false,"description":"The class name applied to each tick group.","type":{"name":"string | undefined"}},"tickComponent":{"name":"tickComponent","required":false,"description":"Override the component used to render tick labels (instead of <Text /> from @visx/text).","type":{"name":"((tickRendererProps: TickRendererProps) => ReactNode) | undefined"}},"ticksComponent":{"name":"ticksComponent","required":false,"description":"Override the component used to render all tick lines and labels.","type":{"name":"((tickRendererProps: TicksRendererProps<Scale>) => ReactNode) | undefined"}},"tickFormat":{"name":"tickFormat","required":false,"description":"A [d3 formatter](https://github.com/d3/d3-scale/blob/master/README.md#continuous_tickFormat) for the tick text.","type":{"name":"TickFormatter<ScaleInput<Scale>> | undefined"}},"tickLabelProps":{"name":"tickLabelProps","required":false,"description":"Either an object with the props for all tick labels or a function that returns props for a given tick label.","type":{"name":"TickLabelProps<ScaleInput<Scale>> | undefined"}},"tickLength":{"name":"tickLength","required":false,"description":"The length of the tick lines.","type":{"name":"number | undefined"},"defaultValue":{"value":"8"}},"tickStroke":{"name":"tickStroke","required":false,"description":"The color for the tick\'s stroke value.","type":{"name":"string | undefined"}},"tickTransform":{"name":"tickTransform","required":false,"description":"A custom SVG transform value to be applied to each tick group.","type":{"name":"string | undefined"}},"axisClassName":{"name":"axisClassName","required":false,"description":"The class name applied to the outermost axis group element.","type":{"name":"string | undefined"}},"left":{"name":"left","required":false,"description":"A left pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"The ref to the outermost axis group element.","type":{"name":"Ref<SVGGElement> | undefined"}},"scale":{"name":"scale","required":true,"description":"A [d3](https://github.com/d3/d3-scale) or [visx](https://github.com/airbnb/visx/tree/master/packages/visx-scale) scale function.","type":{"name":"Scale"}},"tickValues":{"name":"tickValues","required":false,"description":"An array of values that determine the number and values of the ticks. Falls back to `scale.ticks()` or `.domain()`.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"top":{"name":"top","required":false,"description":"A top pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"children":{"name":"children","required":false,"description":"For more control over rendering or to add event handlers to datum, pass a function as children.","type":{"name":"((renderProps: AxisRendererProps<Scale>) => ReactNode) | undefined"}}},"filePath":"visx-axis/src/axis/AxisRight.tsx","lineNumber":18},"AxisTop":{"displayName":"AxisTop","kind":"component","props":{"axisLineClassName":{"name":"axisLineClassName","required":false,"description":"The class name applied to the axis line element.","type":{"name":"string | undefined"}},"hideAxisLine":{"name":"hideAxisLine","required":false,"description":"If true, will hide the axis line.","type":{"name":"boolean | undefined"}},"hideTicks":{"name":"hideTicks","required":false,"description":"If true, will hide the ticks (but not the tick labels).","type":{"name":"boolean | undefined"}},"hideZero":{"name":"hideZero","required":false,"description":"If true, will hide the \'0\' value tick and tick label.","type":{"name":"boolean | undefined"}},"label":{"name":"label","required":false,"description":"The text for the axis label.","type":{"name":"string | undefined"}},"labelClassName":{"name":"labelClassName","required":false,"description":"The class name applied to the axis label text element.","type":{"name":"string | undefined"}},"labelOffset":{"name":"labelOffset","required":false,"description":"Pixel offset of the axis label (does not include tick label font size, which is accounted for automatically)","type":{"name":"number | undefined"},"defaultValue":{"value":"8"}},"labelProps":{"name":"labelProps","required":false,"description":"Props applied to the axis label component.","type":{"name":"Partial<TextProps> | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"The number of ticks wanted for the axis (note this is approximate)","type":{"name":"number | undefined"}},"orientation":{"name":"orientation","required":false,"description":"Placement of the axis","type":{"name":"ValueOf<{ readonly top: \\"top\\"; readonly left: \\"left\\"; readonly right: \\"right\\"; readonly bottom: \\"bottom\\"; }> | undefined"}},"rangePadding":{"name":"rangePadding","required":false,"description":"Pixel padding to apply to axis sides.","type":{"name":"number | { start?: number | undefined; end?: number | undefined; } | undefined"}},"stroke":{"name":"stroke","required":false,"description":"The color for the stroke of the lines.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The pixel value for the width of the lines.","type":{"name":"string | number | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"The pattern of dashes in the stroke.","type":{"name":"string | undefined"}},"tickLineProps":{"name":"tickLineProps","required":false,"description":"Props to be applied to individual tick lines.","type":{"name":"LineProps | undefined"}},"tickClassName":{"name":"tickClassName","required":false,"description":"The class name applied to each tick group.","type":{"name":"string | undefined"}},"tickComponent":{"name":"tickComponent","required":false,"description":"Override the component used to render tick labels (instead of <Text /> from @visx/text).","type":{"name":"((tickRendererProps: TickRendererProps) => ReactNode) | undefined"}},"ticksComponent":{"name":"ticksComponent","required":false,"description":"Override the component used to render all tick lines and labels.","type":{"name":"((tickRendererProps: TicksRendererProps<Scale>) => ReactNode) | undefined"}},"tickFormat":{"name":"tickFormat","required":false,"description":"A [d3 formatter](https://github.com/d3/d3-scale/blob/master/README.md#continuous_tickFormat) for the tick text.","type":{"name":"TickFormatter<ScaleInput<Scale>> | undefined"}},"tickLabelProps":{"name":"tickLabelProps","required":false,"description":"Either an object with the props for all tick labels or a function that returns props for a given tick label.","type":{"name":"TickLabelProps<ScaleInput<Scale>> | undefined"}},"tickLength":{"name":"tickLength","required":false,"description":"The length of the tick lines.","type":{"name":"number | undefined"},"defaultValue":{"value":"8"}},"tickStroke":{"name":"tickStroke","required":false,"description":"The color for the tick\'s stroke value.","type":{"name":"string | undefined"}},"tickTransform":{"name":"tickTransform","required":false,"description":"A custom SVG transform value to be applied to each tick group.","type":{"name":"string | undefined"}},"axisClassName":{"name":"axisClassName","required":false,"description":"The class name applied to the outermost axis group element.","type":{"name":"string | undefined"}},"left":{"name":"left","required":false,"description":"A left pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"The ref to the outermost axis group element.","type":{"name":"Ref<SVGGElement> | undefined"}},"scale":{"name":"scale","required":true,"description":"A [d3](https://github.com/d3/d3-scale) or [visx](https://github.com/airbnb/visx/tree/master/packages/visx-scale) scale function.","type":{"name":"Scale"}},"tickValues":{"name":"tickValues","required":false,"description":"An array of values that determine the number and values of the ticks. Falls back to `scale.ticks()` or `.domain()`.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"top":{"name":"top","required":false,"description":"A top pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"children":{"name":"children","required":false,"description":"For more control over rendering or to add event handlers to datum, pass a function as children.","type":{"name":"((renderProps: AxisRendererProps<Scale>) => ReactNode) | undefined"}}},"filePath":"visx-axis/src/axis/AxisTop.tsx","lineNumber":17},"AxisBottom":{"displayName":"AxisBottom","kind":"component","props":{"axisLineClassName":{"name":"axisLineClassName","required":false,"description":"The class name applied to the axis line element.","type":{"name":"string | undefined"}},"hideAxisLine":{"name":"hideAxisLine","required":false,"description":"If true, will hide the axis line.","type":{"name":"boolean | undefined"}},"hideTicks":{"name":"hideTicks","required":false,"description":"If true, will hide the ticks (but not the tick labels).","type":{"name":"boolean | undefined"}},"hideZero":{"name":"hideZero","required":false,"description":"If true, will hide the \'0\' value tick and tick label.","type":{"name":"boolean | undefined"}},"label":{"name":"label","required":false,"description":"The text for the axis label.","type":{"name":"string | undefined"}},"labelClassName":{"name":"labelClassName","required":false,"description":"The class name applied to the axis label text element.","type":{"name":"string | undefined"}},"labelOffset":{"name":"labelOffset","required":false,"description":"Pixel offset of the axis label (does not include tick label font size, which is accounted for automatically)","type":{"name":"number | undefined"},"defaultValue":{"value":"8"}},"labelProps":{"name":"labelProps","required":false,"description":"Props applied to the axis label component.","type":{"name":"Partial<TextProps> | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"The number of ticks wanted for the axis (note this is approximate)","type":{"name":"number | undefined"}},"orientation":{"name":"orientation","required":false,"description":"Placement of the axis","type":{"name":"ValueOf<{ readonly top: \\"top\\"; readonly left: \\"left\\"; readonly right: \\"right\\"; readonly bottom: \\"bottom\\"; }> | undefined"}},"rangePadding":{"name":"rangePadding","required":false,"description":"Pixel padding to apply to axis sides.","type":{"name":"number | { start?: number | undefined; end?: number | undefined; } | undefined"}},"stroke":{"name":"stroke","required":false,"description":"The color for the stroke of the lines.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The pixel value for the width of the lines.","type":{"name":"string | number | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"The pattern of dashes in the stroke.","type":{"name":"string | undefined"}},"tickLineProps":{"name":"tickLineProps","required":false,"description":"Props to be applied to individual tick lines.","type":{"name":"LineProps | undefined"}},"tickClassName":{"name":"tickClassName","required":false,"description":"The class name applied to each tick group.","type":{"name":"string | undefined"}},"tickComponent":{"name":"tickComponent","required":false,"description":"Override the component used to render tick labels (instead of <Text /> from @visx/text).","type":{"name":"((tickRendererProps: TickRendererProps) => ReactNode) | undefined"}},"ticksComponent":{"name":"ticksComponent","required":false,"description":"Override the component used to render all tick lines and labels.","type":{"name":"((tickRendererProps: TicksRendererProps<Scale>) => ReactNode) | undefined"}},"tickFormat":{"name":"tickFormat","required":false,"description":"A [d3 formatter](https://github.com/d3/d3-scale/blob/master/README.md#continuous_tickFormat) for the tick text.","type":{"name":"TickFormatter<ScaleInput<Scale>> | undefined"}},"tickLabelProps":{"name":"tickLabelProps","required":false,"description":"Either an object with the props for all tick labels or a function that returns props for a given tick label.","type":{"name":"TickLabelProps<ScaleInput<Scale>> | undefined"}},"tickLength":{"name":"tickLength","required":false,"description":"The length of the tick lines.","type":{"name":"number | undefined"},"defaultValue":{"value":"8"}},"tickStroke":{"name":"tickStroke","required":false,"description":"The color for the tick\'s stroke value.","type":{"name":"string | undefined"}},"tickTransform":{"name":"tickTransform","required":false,"description":"A custom SVG transform value to be applied to each tick group.","type":{"name":"string | undefined"}},"axisClassName":{"name":"axisClassName","required":false,"description":"The class name applied to the outermost axis group element.","type":{"name":"string | undefined"}},"left":{"name":"left","required":false,"description":"A left pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"The ref to the outermost axis group element.","type":{"name":"Ref<SVGGElement> | undefined"}},"scale":{"name":"scale","required":true,"description":"A [d3](https://github.com/d3/d3-scale) or [visx](https://github.com/airbnb/visx/tree/master/packages/visx-scale) scale function.","type":{"name":"Scale"}},"tickValues":{"name":"tickValues","required":false,"description":"An array of values that determine the number and values of the ticks. Falls back to `scale.ticks()` or `.domain()`.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"top":{"name":"top","required":false,"description":"A top pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"children":{"name":"children","required":false,"description":"For more control over rendering or to add event handlers to datum, pass a function as children.","type":{"name":"((renderProps: AxisRendererProps<Scale>) => ReactNode) | undefined"}}},"filePath":"visx-axis/src/axis/AxisBottom.tsx","lineNumber":15}},"@visx/bounds":{"withBoundingRects":{"displayName":"withBoundingRects","kind":"function","props":{},"parameters":[{"name":"BaseComponent","type":{"name":"ComponentType<Props>"}}],"returnType":"ComponentClass<Props, any>","filePath":"visx-bounds/src/enhancers/withBoundingRects.tsx","lineNumber":31}},"@visx/brush":{"scaleInvert":{"displayName":"scaleInvert","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"Scale"}},{"name":"value","type":{"name":"number"}}],"filePath":"visx-brush/src/utils.ts","lineNumber":5},"getDomainFromExtent":{"displayName":"getDomainFromExtent","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"Scale"}},{"name":"start","type":{"name":"number"}},{"name":"end","type":{"name":"number"}},{"name":"tolerentDelta","type":{"name":"number"}}],"filePath":"visx-brush/src/utils.ts","lineNumber":29},"getPageCoordinates":{"displayName":"getPageCoordinates","kind":"function","props":{},"parameters":[{"name":"event","type":{"name":"MouseTouchOrPointerEvent"}}],"filePath":"visx-brush/src/utils.ts","lineNumber":59},"debounce":{"displayName":"debounce","description":"// Tweaked from https://dev.to/cantem/how-to-write-a-debounce-function-1bdf","kind":"function","props":{},"parameters":[{"name":"func","type":{"name":"T"}},{"name":"delay","type":{"name":"number"}}],"returnType":"(...args: any[]) => void","filePath":"visx-brush/src/utils.ts","lineNumber":74},"BrushHandle":{"displayName":"BrushHandle","description":"BrushHandle\'s are placed along the bounds of the brush and handle Drag events which update the passed brush.","kind":"component","props":{"stageWidth":{"name":"stageWidth","required":true,"type":{"name":"number"}},"stageHeight":{"name":"stageHeight","required":true,"type":{"name":"number"}},"brush":{"name":"brush","required":true,"type":{"name":"BaseBrushState"}},"updateBrush":{"name":"updateBrush","required":true,"type":{"name":"(update: UpdateBrush) => void"}},"onBrushStart":{"name":"onBrushStart","required":false,"type":{"name":"((brush: HandlerArgs) => void) | undefined"}},"onBrushEnd":{"name":"onBrushEnd","required":false,"type":{"name":"((brush: BaseBrushState) => void) | undefined"}},"type":{"name":"type","required":true,"type":{"name":"ResizeTriggerAreas"}},"handle":{"name":"handle","required":true,"type":{"name":"HandleProps"}},"isControlled":{"name":"isControlled","required":false,"type":{"name":"boolean | undefined"}},"isDragInProgress":{"name":"isDragInProgress","required":false,"type":{"name":"boolean | undefined"}},"onBrushHandleChange":{"name":"onBrushHandleChange","required":false,"type":{"name":"((type?: BrushingType | undefined, options?: BrushPageOffset | undefined) => void) | undefined"}},"renderBrushHandle":{"name":"renderBrushHandle","required":false,"type":{"name":"((props: BrushHandleRenderProps) => ReactNode) | undefined"}}},"filePath":"visx-brush/src/BrushHandle.tsx","lineNumber":38},"BrushCorner":{"displayName":"BrushCorner","kind":"component","props":{"stageWidth":{"name":"stageWidth","required":true,"type":{"name":"number"}},"stageHeight":{"name":"stageHeight","required":true,"type":{"name":"number"}},"brush":{"name":"brush","required":true,"type":{"name":"BaseBrushState"}},"updateBrush":{"name":"updateBrush","required":true,"type":{"name":"(update: UpdateBrush) => void"}},"onBrushEnd":{"name":"onBrushEnd","required":false,"type":{"name":"((brush: BaseBrushState) => void) | undefined"}},"type":{"name":"type","required":true,"type":{"name":"ResizeTriggerAreas"}},"style":{"name":"style","required":false,"type":{"name":"CSSProperties | undefined"}},"corner":{"name":"corner","required":true,"type":{"name":"{ x: number; y: number; width: number; height: number; }"}}},"filePath":"visx-brush/src/BrushCorner.tsx","lineNumber":21},"BrushSelection":{"displayName":"BrushSelection","kind":"component","props":{"width":{"name":"width","required":true,"type":{"name":"number"}},"height":{"name":"height","required":true,"type":{"name":"number"}},"stageWidth":{"name":"stageWidth","required":true,"type":{"name":"number"}},"stageHeight":{"name":"stageHeight","required":true,"type":{"name":"number"}},"brush":{"name":"brush","required":true,"type":{"name":"BaseBrushState"}},"updateBrush":{"name":"updateBrush","required":true,"type":{"name":"(update: UpdateBrush) => void"}},"onMoveSelectionChange":{"name":"onMoveSelectionChange","required":false,"type":{"name":"((type?: BrushingType | undefined, options?: BrushPageOffset | undefined) => void) | undefined"}},"onBrushStart":{"name":"onBrushStart","required":false,"type":{"name":"((brush: HandlerArgs) => void) | undefined"}},"onBrushEnd":{"name":"onBrushEnd","required":false,"type":{"name":"((brush: BaseBrushState) => void) | undefined"}},"disableDraggingSelection":{"name":"disableDraggingSelection","required":true,"type":{"name":"boolean"}},"onMouseLeave":{"name":"onMouseLeave","required":true,"type":{"name":"PointerHandler"}},"onMouseMove":{"name":"onMouseMove","required":true,"type":{"name":"PointerHandler"}},"onMouseUp":{"name":"onMouseUp","required":true,"type":{"name":"PointerHandler"}},"onClick":{"name":"onClick","required":true,"type":{"name":"PointerHandler"}},"selectedBoxStyle":{"name":"selectedBoxStyle","required":true,"type":{"name":"SVGProps<SVGRectElement>"}},"isControlled":{"name":"isControlled","required":false,"type":{"name":"boolean | undefined"}},"isDragInProgress":{"name":"isDragInProgress","required":false,"type":{"name":"boolean | undefined"}}},"filePath":"visx-brush/src/BrushSelection.tsx","lineNumber":34},"BrushOverlay":{"displayName":"BrushOverlay","kind":"component","props":{"width":{"name":"width","required":true,"type":{"name":"number"}},"height":{"name":"height","required":true,"type":{"name":"number"}},"style":{"name":"style","required":false,"type":{"name":"CSSProperties | undefined"}},"onClick":{"name":"onClick","required":false,"type":{"name":"((event: PointerEvent<SVGRectElement>) => void) | undefined"}},"onDoubleClick":{"name":"onDoubleClick","required":false,"type":{"name":"((event: PointerEvent<SVGRectElement>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"type":{"name":"((event: PointerEvent<SVGRectElement>) => void) | undefined"}},"onPointerLeave":{"name":"onPointerLeave","required":false,"type":{"name":"((event: PointerEvent<SVGRectElement>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"type":{"name":"((event: PointerEvent<SVGRectElement>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"type":{"name":"((event: PointerEvent<SVGRectElement>) => void) | undefined"}}},"filePath":"visx-brush/src/BrushOverlay.tsx","lineNumber":16},"BaseBrush":{"displayName":"BaseBrush","kind":"component","props":{"brushDirection":{"name":"brushDirection","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\" | \\"both\\" | undefined"}},"initialBrushPosition":{"name":"initialBrushPosition","required":false,"type":{"name":"PartialBrushStartEnd | undefined"}},"width":{"name":"width","required":true,"type":{"name":"number"}},"height":{"name":"height","required":true,"type":{"name":"number"}},"left":{"name":"left","required":true,"type":{"name":"number"}},"top":{"name":"top","required":true,"type":{"name":"number"}},"inheritedMargin":{"name":"inheritedMargin","required":false,"type":{"name":"MarginShape | undefined"}},"onChange":{"name":"onChange","required":false,"type":{"name":"((state: BaseBrushState) => void) | undefined"}},"handleSize":{"name":"handleSize","required":true,"type":{"name":"number"}},"resizeTriggerAreas":{"name":"resizeTriggerAreas","required":false,"type":{"name":"ResizeTriggerAreas[] | undefined"}},"onBrushStart":{"name":"onBrushStart","required":false,"type":{"name":"((start: Point) => void) | undefined"}},"onBrushEnd":{"name":"onBrushEnd","required":false,"type":{"name":"((state: BaseBrushState) => void) | undefined"}},"selectedBoxStyle":{"name":"selectedBoxStyle","required":true,"type":{"name":"SVGProps<SVGRectElement>"}},"onMouseLeave":{"name":"onMouseLeave","required":false,"type":{"name":"((event: PointerHandlerEvent) => void) | undefined"}},"onMouseUp":{"name":"onMouseUp","required":false,"type":{"name":"((event: PointerHandlerEvent) => void) | undefined"}},"onMouseMove":{"name":"onMouseMove","required":false,"type":{"name":"((event: PointerHandlerEvent) => void) | undefined"}},"onClick":{"name":"onClick","required":false,"type":{"name":"((event: PointerHandlerEvent) => void) | undefined"}},"clickSensitivity":{"name":"clickSensitivity","required":true,"type":{"name":"number"}},"disableDraggingSelection":{"name":"disableDraggingSelection","required":true,"type":{"name":"boolean"}},"disableDraggingOverlay":{"name":"disableDraggingOverlay","required":false,"type":{"name":"boolean | undefined"}},"resetOnEnd":{"name":"resetOnEnd","required":false,"type":{"name":"boolean | undefined"}},"useWindowMoveEvents":{"name":"useWindowMoveEvents","required":false,"type":{"name":"boolean | undefined"}},"renderBrushHandle":{"name":"renderBrushHandle","required":false,"type":{"name":"((props: BrushHandleRenderProps) => ReactNode) | undefined"}}},"filePath":"visx-brush/src/BaseBrush.tsx","lineNumber":61},"Brush":{"displayName":"Brush","kind":"component","props":{"selectedBoxStyle":{"name":"selectedBoxStyle","required":true,"description":"Style object for the Brush selection rect.","type":{"name":"SVGProps<SVGRectElement>"}},"xScale":{"name":"xScale","required":true,"description":"x-coordinate scale.","type":{"name":"Scale"}},"yScale":{"name":"yScale","required":true,"description":"y-coordinate scale.","type":{"name":"Scale"}},"height":{"name":"height","required":true,"description":"Brush stage height.","type":{"name":"number"}},"width":{"name":"width","required":true,"description":"Brush stage width.","type":{"name":"number"}},"onChange":{"name":"onChange","required":false,"description":"Callback invoked on a change in Brush bounds.","type":{"name":"((bounds: Bounds | null) => void) | undefined"}},"onBrushStart":{"name":"onBrushStart","required":false,"description":"Callback invoked on initialization of a Brush (not Brush move).","type":{"name":"((start: Point) => void) | undefined"}},"onBrushEnd":{"name":"onBrushEnd","required":false,"description":"Callback invoked on mouse up when a Brush size is being updated.","type":{"name":"((bounds: Bounds | null) => void) | undefined"}},"onMouseMove":{"name":"onMouseMove","required":false,"description":"Callback invoked on mouse move in Brush stage when *not* dragging.","type":{"name":"((event: PointerHandlerEvent) => void) | undefined"}},"onMouseLeave":{"name":"onMouseLeave","required":false,"description":"Callback invoked on mouse leave from Brush stage when *not* dragging.","type":{"name":"((event: PointerHandlerEvent) => void) | undefined"}},"onClick":{"name":"onClick","required":false,"description":"Callback invoked on Brush stage click.","type":{"name":"((event: PointerHandlerEvent) => void) | undefined"}},"margin":{"name":"margin","required":false,"description":"Margin subtracted from Brush stage dimensions.","type":{"name":"MarginShape | undefined"}},"brushDirection":{"name":"brushDirection","required":false,"description":"Allowed directions for Brush dimensional change.","type":{"name":"\\"horizontal\\" | \\"vertical\\" | \\"both\\" | undefined"}},"initialBrushPosition":{"name":"initialBrushPosition","required":false,"description":"Initial start and end position of the Brush.","type":{"name":"PartialBrushStartEnd | undefined"}},"resizeTriggerAreas":{"name":"resizeTriggerAreas","required":false,"description":"Array of rect sides and corners which should be resizeable / can trigger a Brush size change.","type":{"name":"ResizeTriggerAreas[] | undefined"}},"brushRegion":{"name":"brushRegion","required":false,"description":"What is being brushed, used for margin subtraction.","type":{"name":"\\"xAxis\\" | \\"yAxis\\" | \\"chart\\" | undefined"}},"yAxisOrientation":{"name":"yAxisOrientation","required":false,"description":"Orientation of yAxis if `brushRegion=yAxis`.","type":{"name":"\\"left\\" | \\"right\\" | undefined"}},"xAxisOrientation":{"name":"xAxisOrientation","required":false,"description":"Orientation of xAxis if `brushRegion=xAxis`.","type":{"name":"\\"top\\" | \\"bottom\\" | undefined"}},"disableDraggingSelection":{"name":"disableDraggingSelection","required":true,"description":"Whether movement of Brush should be disabled.","type":{"name":"boolean"}},"disableDraggingOverlay":{"name":"disableDraggingOverlay","required":false,"description":"Whether changing Brush size and position by clicking overlay should be disabled.","type":{"name":"boolean | undefined"}},"resetOnEnd":{"name":"resetOnEnd","required":false,"description":"Whether to reset the Brush on drag end.","type":{"name":"boolean | undefined"}},"handleSize":{"name":"handleSize","required":true,"description":"Size of Brush handles, applies to all `resizeTriggerAreas`.","type":{"name":"number"}},"innerRef":{"name":"innerRef","required":false,"description":"Reference to the BaseBrush component.","type":{"name":"MutableRefObject<BaseBrush | null> | undefined"}},"useWindowMoveEvents":{"name":"useWindowMoveEvents","required":false,"description":"Prevent drag end on mouse leaving from brush stage.","type":{"name":"boolean | undefined"}},"renderBrushHandle":{"name":"renderBrushHandle","required":false,"description":"Render function for custom brush handles.","type":{"name":"((props: BrushHandleRenderProps) => ReactNode) | undefined"}}},"filePath":"visx-brush/src/Brush.tsx","lineNumber":71}},"@visx/chord":{"Chord":{"displayName":"Chord","kind":"component","props":{"matrix":{"name":"matrix","required":true,"description":"Square data matrix of size n\xd7n, where the matrix represents the directed flow amongst a network (a complete digraph) of `n` nodes. The given matrix must be an array of length `n`, where each element `matrix[i]` is an array of `n` numbers, where each `matrix[i][j]` represents the flow from the `ith` node in the network to the `jth` node. Each number `matrix[i][j]` must be nonnegative, though it can be zero if there is no flow from node `i` to node `j`.","type":{"name":"number[][]"}},"padAngle":{"name":"padAngle","required":false,"description":"Sets the pad angle between adjacent groups to the specified number in radians.","type":{"name":"number | undefined"}},"sortGroups":{"name":"sortGroups","required":false,"description":"Comparator used to sort the groups by their total outflow.","type":{"name":"DefaultSortComporator | null | undefined"}},"sortSubgroups":{"name":"sortSubgroups","required":false,"description":"Comparator used to sort the subgroups corresponding to `matrix[i][0 … n - 1]` for a given group i by their total outflow.","type":{"name":"DefaultSortComporator | null | undefined"}},"sortChords":{"name":"sortChords","required":false,"description":"Comparator used to sort the chords by their combined flow; this only affects the `z-order` of the chords.","type":{"name":"DefaultSortComporator | null | undefined"}},"children":{"name":"children","required":true,"description":"Child render function, passed the configured chords.","type":{"name":"(chords: { chords: Chords; }) => ReactNode"}}},"filePath":"visx-chord/src/Chord.tsx","lineNumber":22},"Ribbon":{"displayName":"Ribbon","kind":"component","props":{"chord":{"name":"chord","required":true,"description":"Chord for which to render a ribbon.","type":{"name":"Chord"}},"source":{"name":"source","required":false,"description":"Sets the source accessor (defaults to chord.source).","type":{"name":"((d: Chord) => ChordSubgroup) | undefined"}},"target":{"name":"target","required":false,"description":"Sets the target accessor (defaults to chord.source).","type":{"name":"((d: Chord) => ChordSubgroup) | undefined"}},"radius":{"name":"radius","required":false,"description":"Sets the radius or radius accessor for the ribbon generator.","type":{"name":"number | NumAccessor | undefined"}},"startAngle":{"name":"startAngle","required":false,"description":"Sets the start angle or start angle accessor for the ribbon generator.","type":{"name":"number | NumAccessor | undefined"}},"endAngle":{"name":"endAngle","required":false,"description":"Sets the end angle or end angle accessor for the ribbon generator.","type":{"name":"number | NumAccessor | undefined"}},"children":{"name":"children","required":false,"description":"Override the default rendering of a chord `<path />`.","type":{"name":"(({ path }: { path: string | null; }) => string | undefined) | undefined"}},"className":{"name":"className","required":false,"description":"Classname to apply to the rendered `<path />`.","type":{"name":"string | undefined"}}},"filePath":"visx-chord/src/Ribbon.tsx","lineNumber":36}},"@visx/clip-path":{"ClipPath":{"displayName":"ClipPath","description":"Handles rendering of <defs> and <clipPath> elements for you, with any children you want.","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the clipPath.","type":{"name":"string"}},"children":{"name":"children","required":false,"description":"clipPath children.","type":{"name":"ReactNode"}}},"filePath":"visx-clip-path/src/clip-paths/ClipPath.tsx","lineNumber":11},"CircleClipPath":{"displayName":"CircleClipPath","description":"ClipPath for clipping to the shape of a `<circle />`, pass any `<circle />` props you want.","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the clipPath.","type":{"name":"string"}},"cx":{"name":"cx","required":false,"description":"x position of the center of the ClipPath circle.","type":{"name":"string | number | undefined"}},"cy":{"name":"cy","required":false,"description":"y position of the center of the ClipPath circle.","type":{"name":"string | number | undefined"}},"r":{"name":"r","required":false,"description":"radius of the ClipPath circle.","type":{"name":"string | number | undefined"}}},"filePath":"visx-clip-path/src/clip-paths/CircleClipPath.tsx","lineNumber":16},"RectClipPath":{"displayName":"RectClipPath","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the clipPath.","type":{"name":"string"}},"x":{"name":"x","required":false,"description":"x position of the ClipPath rect.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"0"}},"y":{"name":"y","required":false,"description":"y position of the ClipPath rect.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"0"}},"width":{"name":"width","required":false,"description":"width of the ClipPath rect.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"1"}},"height":{"name":"height","required":false,"description":"height of the ClipPath rect.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"1"}}},"filePath":"visx-clip-path/src/clip-paths/RectClipPath.tsx","lineNumber":17}},"@visx/delaunay":{"delaunay":{"displayName":"delaunay","description":"Returns a configured d3 delaunay triangulation. See d3-delaunay for the complete API reference.","kind":"function","props":{},"parameters":[{"name":"{ data = [], x, y }","type":{"name":"Config<Datum>"}}],"filePath":"visx-delaunay/src/delaunay.ts","lineNumber":15},"voronoi":{"displayName":"voronoi","description":"Returns a configured d3 voronoi diagram for the given data. See d3-delaunay\\nfor the complete API reference.","kind":"function","props":{},"parameters":[{"name":"{ data = [], width = 0, height = 0, x, y }","type":{"name":"Config<Datum>"}}],"filePath":"visx-delaunay/src/voronoi.ts","lineNumber":22},"Polygon":{"displayName":"Polygon","kind":"component","props":{"children":{"name":"children","required":false,"description":"Override render function which is provided polygon and generated path.","type":{"name":"(({ path, polygon }: { path: string; polygon: [number, number][]; }) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"className to apply to path element.","type":{"name":"string | undefined"}},"polygon":{"name":"polygon","required":false,"description":"Array of coordinate arrays for the polygon (e.g., [[x,y], [x1,y1], ...]), used to generate polygon path.","type":{"name":"[number, number][] | undefined"}}},"filePath":"visx-delaunay/src/components/Polygon.tsx","lineNumber":13}},"@visx/drag":{"useStateWithCallback":{"displayName":"useStateWithCallback","description":"A hook that exposes a setState(state, callback) API similar to a component class.","kind":"hook","props":{},"filePath":"visx-drag/src/util/useStateWithCallback.ts","lineNumber":9},"clampNumber":{"displayName":"clampNumber","description":"Clamps number within the inclusive lower and upper bounds.","kind":"function","props":{},"parameters":[{"name":"number","type":{"name":"number"}},{"name":"lower","type":{"name":"number"}},{"name":"upper","type":{"name":"number"}}],"filePath":"visx-drag/src/util/clampNumber.ts","lineNumber":2},"getClosestPoint":{"displayName":"getClosestPoint","description":"Gets closest point from list of points","kind":"function","props":{},"parameters":[{"name":"point","type":{"name":"{ x: number; y: number; }"}},{"name":"samples","type":{"name":"DOMPoint[]"}}],"filePath":"visx-drag/src/util/getClosestPoint.ts","lineNumber":2},"restrictPoint":{"displayName":"restrictPoint","description":"Restrict a point to an area, or samples along a path.","kind":"function","props":{},"parameters":[{"name":"point","type":{"name":"{ x: number; y: number; }"}},{"name":"samples","type":{"name":"DOMPoint[]"}},{"name":"restrict","type":{"name":"{ xMin?: number | undefined; xMax?: number | undefined; yMin?: number | undefined; yMax?: number | undefined; } | undefined"},"defaultValue":{"value":"{}"}}],"filePath":"visx-drag/src/util/restrictPoint.ts","lineNumber":6},"useSamplesAlongPath":{"displayName":"useSamplesAlongPath","description":"Return samples along a path, relative to the parent SVG","kind":"hook","props":{},"filePath":"visx-drag/src/util/useSamplesAlongPath.ts","lineNumber":16},"useDrag":{"displayName":"useDrag","description":"Hook for dragging, returns a `UseDrag` object.","kind":"hook","props":{"x":{"name":"x","required":false,"description":"x position of drag at drag start time, reset to 0 if `resetOnStart=true`.","type":{"name":"number | undefined"}},"y":{"name":"y","required":false,"description":"y position of drag at drag start time, reset to 0 if `resetOnStart=true`.","type":{"name":"number | undefined"}},"dx":{"name":"dx","required":true,"description":"Change in x position since drag start, reset to 0 on drag start if `resetOnStart=true`.","type":{"name":"number"}},"dy":{"name":"dy","required":true,"description":"Change in y position since drag start, reset to 0 on drag start if `resetOnStart=true`.","type":{"name":"number"}},"isDragging":{"name":"isDragging","required":true,"description":"Whether a drag is currently in progress.","type":{"name":"boolean"}},"dragEnd":{"name":"dragEnd","required":true,"description":"Callback to be be invoked on drag end.","type":{"name":"(event: MouseTouchOrPointerEvent) => void"}},"dragMove":{"name":"dragMove","required":true,"description":"Callback to be be invoked on drag move.","type":{"name":"(event: MouseTouchOrPointerEvent) => void"}},"dragStart":{"name":"dragStart","required":true,"description":"Callback to be be invoked on drag start.","type":{"name":"(event: MouseTouchOrPointerEvent) => void"}}},"filePath":"visx-drag/src/useDrag.ts","lineNumber":71},"Drag":{"displayName":"Drag","kind":"component","props":{"resetOnStart":{"name":"resetOnStart","required":false,"description":"Whether to reset drag state upon the start of a new drag.","type":{"name":"boolean | undefined"}},"onDragEnd":{"name":"onDragEnd","required":false,"description":"Optional callback invoked upon drag end.","type":{"name":"((args: HandlerArgs) => void) | undefined"}},"onDragMove":{"name":"onDragMove","required":false,"description":"Optional callback invoked upon drag movement.","type":{"name":"((args: HandlerArgs) => void) | undefined"}},"onDragStart":{"name":"onDragStart","required":false,"description":"Optional callback invoked upon drag start.","type":{"name":"((args: HandlerArgs) => void) | undefined"}},"x":{"name":"x","required":false,"description":"Optionally set the initial drag x, or override the current drag x.","type":{"name":"number | undefined"}},"y":{"name":"y","required":false,"description":"Optionally set the initial drag y, or override the current drag y.","type":{"name":"number | undefined"}},"dx":{"name":"dx","required":false,"description":"Optionally set the initial drag dx, or override the current drag dx.","type":{"name":"number | undefined"}},"dy":{"name":"dy","required":false,"description":"Optionally set the initial drag dy, or override the current drag dy.","type":{"name":"number | undefined"}},"isDragging":{"name":"isDragging","required":false,"description":"If defined, parent controls dragging state.","type":{"name":"boolean | undefined"}},"snapToPointer":{"name":"snapToPointer","required":false,"description":"Snap element being dragged to middle of pointer.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}},"restrict":{"name":"restrict","required":false,"description":"Options for limiting dragging in the x and y plane.","type":{"name":"{ xMin?: number | undefined; xMax?: number | undefined; yMin?: number | undefined; yMax?: number | undefined; } | undefined"}},"restrictToPath":{"name":"restrictToPath","required":false,"description":"Limit drag to an SVG path. Overrides `restrict` constraints.","type":{"name":"SVGGeometryElement | null | undefined"}},"children":{"name":"children","required":true,"description":"Children render function which is passed the state of dragging and callbacks for drag start/end/move.","type":{"name":"(args: UseDrag) => ReactNode"}},"width":{"name":"width","required":true,"description":"Width of the drag container.","type":{"name":"number"}},"height":{"name":"height","required":true,"description":"Height of the drag container.","type":{"name":"number"}},"captureDragArea":{"name":"captureDragArea","required":false,"description":"Whether to render an invisible rect below children to capture the drag area as defined by width and height.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}}},"filePath":"visx-drag/src/Drag.tsx","lineNumber":21},"raise":{"displayName":"raise","description":"Given at an array of items, moves the item at the specified index to the end of the array.","kind":"function","props":{},"parameters":[{"name":"items","type":{"name":"T[]"}},{"name":"raiseIndex","type":{"name":"number"}}],"filePath":"visx-drag/src/util/raise.ts","lineNumber":2}},"@visx/event":{"isElement":{"displayName":"isElement","kind":"function","props":{},"parameters":[{"name":"elem","type":{"name":"Element | EventType"}}],"returnType":"boolean","filePath":"visx-event/src/typeGuards.ts","lineNumber":3},"isSVGElement":{"displayName":"isSVGElement","description":"// functional definition of isSVGElement. Note that SVGSVGElements are HTMLElements","kind":"function","props":{},"parameters":[{"name":"elem","type":{"name":"Element"}}],"returnType":"boolean","filePath":"visx-event/src/typeGuards.ts","lineNumber":8},"isSVGSVGElement":{"displayName":"isSVGSVGElement","description":"// functional definition of SVGGElement","kind":"function","props":{},"parameters":[{"name":"elem","type":{"name":"Element | null"}}],"returnType":"boolean","filePath":"visx-event/src/typeGuards.ts","lineNumber":13},"isSVGGraphicsElement":{"displayName":"isSVGGraphicsElement","kind":"function","props":{},"parameters":[{"name":"elem","type":{"name":"Element | null"}}],"returnType":"boolean","filePath":"visx-event/src/typeGuards.ts","lineNumber":17},"isTouchEvent":{"displayName":"isTouchEvent","description":"// functional definition of TouchEvent","kind":"function","props":{},"parameters":[{"name":"event","type":{"name":"EventType"}}],"returnType":"boolean","filePath":"visx-event/src/typeGuards.ts","lineNumber":22},"isMouseEvent":{"displayName":"isMouseEvent","description":"// functional definition of MouseEvent","kind":"function","props":{},"parameters":[{"name":"event","type":{"name":"EventType"}}],"returnType":"boolean","filePath":"visx-event/src/typeGuards.ts","lineNumber":27},"isEvent":{"displayName":"isEvent","description":"// functional definition of event","kind":"function","props":{},"parameters":[{"name":"event","type":{"name":"Element | EventType"}}],"returnType":"boolean","filePath":"visx-event/src/typeGuards.ts","lineNumber":32},"getXAndYFromEvent":{"displayName":"getXAndYFromEvent","kind":"function","props":{},"parameters":[{"name":"event","type":{"name":"EventType"}}],"filePath":"visx-event/src/getXAndYFromEvent.ts","lineNumber":6},"localPoint":{"displayName":"localPoint","description":"Handles two signatures for backwards compatibility.","kind":"function","props":{},"parameters":[{"name":"nodeOrEvent","type":{"name":"Element | EventType"}},{"name":"maybeEvent","type":{"name":"EventType"}}],"filePath":"visx-event/src/localPoint.ts","lineNumber":6}},"@visx/geo":{"Graticule":{"displayName":"Graticule","kind":"component","props":{"graticule":{"name":"graticule","required":false,"description":"Render function for graticules which is passed a GeoJSON MultiLineString geometry object\\nrepresenting all meridians and parallels for the graticule.","type":{"name":"((multiLineString: MultiLineString) => string) | undefined"}},"lines":{"name":"lines","required":false,"description":"Render function for graticule lines, which is invoked once for each meridian or parallel for the graticule,\\nand is passed the GeoJSON LineString object representing said meridian or parallel.","type":{"name":"((lineString: LineString) => string) | undefined"}},"outline":{"name":"outline","required":false,"description":"Render function for the outline of the graticule (i.e. along the meridians and parallels defining its extent).\\nIt is passed a GeoJSON Polygon geometry object representing the outline.","type":{"name":"((polygon: Polygon) => string) | undefined"}},"children":{"name":"children","required":false,"description":"Override render function, which is passed the configured graticule generator.","type":{"name":"(({ graticule }: { graticule: GeoGraticuleGenerator; }) => ReactNode) | undefined"}},"extent":{"name":"extent","required":false,"description":"Sets the major and minor extents of the graticule generator, which defaults to ⟨⟨-180\xb0, -80\xb0 - ε⟩, ⟨180\xb0, 80\xb0 + ε⟩⟩.","type":{"name":"[[number, number], [number, number]] | undefined"}},"extentMajor":{"name":"extentMajor","required":false,"description":"Sets the major extent of the graticule generator, which defaults to ⟨⟨-180\xb0, -90\xb0 + ε⟩, ⟨180\xb0, 90\xb0 - ε⟩⟩.","type":{"name":"[[number, number], [number, number]] | undefined"}},"extentMinor":{"name":"extentMinor","required":false,"description":"Sets the major extent of the graticule generator, which defaults to ⟨⟨-180\xb0, -80\xb0 - ε⟩, ⟨180\xb0, 80\xb0 + ε⟩⟩.","type":{"name":"[[number, number], [number, number]] | undefined"}},"step":{"name":"step","required":false,"description":"Sets both the major and minor step of the graticule generator.","type":{"name":"[number, number] | undefined"}},"stepMajor":{"name":"stepMajor","required":false,"description":"Sets the major step of the graticule generator, which defaults to ⟨90\xb0, 360\xb0⟩.","type":{"name":"[number, number] | undefined"}},"stepMinor":{"name":"stepMinor","required":false,"description":"Sets the major step of the graticule generator, which defaults to ⟨10\xb0, 10\xb0⟩.","type":{"name":"[number, number] | undefined"}},"precision":{"name":"precision","required":false,"description":"Sets the precision of the graticule generator, which defaults to 2.5\xb0.","type":{"name":"number | undefined"}}},"filePath":"visx-geo/src/graticule/Graticule.tsx","lineNumber":42},"Projection":{"displayName":"Projection","description":"Component for all projections.","kind":"component","props":{"data":{"name":"data","required":true,"description":"Array of features to project.","type":{"name":"Datum[]"}},"projection":{"name":"projection","required":false,"description":"Preset projection name, or custom projection function which returns a GeoProjection.","type":{"name":"Projection | undefined"},"defaultValue":{"value":"\'mercator\'"}},"projectionFunc":{"name":"projectionFunc","required":false,"description":"Hook to render above features, passed the configured projectionFunc.","type":{"name":"((projection: GeoProjection) => ReactNode) | undefined"}},"clipAngle":{"name":"clipAngle","required":false,"description":"Sets the projection’s clipping circle radius to the specified angle in degree.","type":{"name":"number | undefined"}},"clipExtent":{"name":"clipExtent","required":false,"description":"Sets the projection’s viewport clip extent to the specified bounds in pixels. extent bounds\\nare specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left-side of the viewport,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[number, number], [number, number]] | undefined"}},"scale":{"name":"scale","required":false,"description":"Sets the projection’s scale factor to the specified value. The scale factor corresponds linearly\\nto the distance between projected points; however, absolute scale factors are not equivalent\\nacross projections.","type":{"name":"number | undefined"}},"translate":{"name":"translate","required":false,"description":"Sets the projection’s translation offset, which determines the pixel coordinates of the\\nprojection’s center, to the specified two-element array [tx, ty].","type":{"name":"[number, number] | undefined"}},"center":{"name":"center","required":false,"description":"Sets the projection’s center to the specified two-element array of longitude and latitude in degrees.","type":{"name":"[number, number] | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Sets the projection’s three-axis spherical rotation to the specified angles [lambda, phi [, gamma]], corresponding to yaw, pitch, and roll.","type":{"name":"[number, number] | [number, number, number] | undefined"}},"precision":{"name":"precision","required":false,"description":"Sets the threshold for the projection’s adaptive resampling to the specified value in pixels.","type":{"name":"number | undefined"}},"fitExtent":{"name":"fitExtent","required":false,"description":"Sets the projection’s scale and translate to fit the specified GeoJSON object in the center of the given extent.\\nThe extent is specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left side of the bounding box,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[[number, number], [number, number]], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"fitSize":{"name":"fitSize","required":false,"description":"Convenience prop for props.fitExtent where the top-left corner of the extent is [0, 0].","type":{"name":"[[number, number], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"centroid":{"name":"centroid","required":false,"description":"Hook to render anything at the centroid of a feature.","type":{"name":"((centroid: [number, number], feature: ParsedFeature<Datum>) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"className to apply to feature path elements.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Override render function which is passed path data and a copy of the constructed projection.","type":{"name":"((args: { path: GeoPath<unknown, GeoPermissibleObjects>; features: ParsedFeature<Datum>[]; projection: GeoProjection; }) => ReactNode) | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"Function invoked for each feature which returns a React.Ref to the projection path element for that feature.","type":{"name":"((feature: ParsedFeature<Datum>, index: number) => Ref<SVGPathElement>) | undefined"}},"graticule":{"name":"graticule","required":false,"description":"If specified, renders a Graticule with the specified props. Specify `graticule.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"graticuleLines":{"name":"graticuleLines","required":false,"description":"If specified, renders a Graticule lines with the specified props. Specify `graticuleLines.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"graticuleOutline":{"name":"graticuleOutline","required":false,"description":"If specified, renders a Graticule outline with the specified props. Specify `graticuleOutline.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"outline\\"> & { foreground: boolean; }) | undefined"}},"digits":{"name":"digits","required":false,"description":"Limits the digits for coordinates generated in SVG path strings to the specified number of digits.","type":{"name":"number | undefined"}},"pointRadius":{"name":"pointRadius","required":false,"description":"Sets the radius used to display Point and MultiPoint geometries to the specified number.","type":{"name":"number | undefined"}}},"filePath":"visx-geo/src/projections/Projection.tsx","lineNumber":117},"Albers":{"displayName":"Albers","description":"All props pass through to `<Projection projection=\\"albers\\" {...props} />`","kind":"component","props":{"graticule":{"name":"graticule","required":false,"description":"If specified, renders a Graticule with the specified props. Specify `graticule.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"children":{"name":"children","required":false,"description":"Override render function which is passed path data and a copy of the constructed projection.","type":{"name":"((args: { path: GeoPath<unknown, GeoPermissibleObjects>; features: ParsedFeature<Datum>[]; projection: GeoProjection; }) => ReactNode) | undefined"}},"precision":{"name":"precision","required":false,"description":"Sets the threshold for the projection’s adaptive resampling to the specified value in pixels.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"className to apply to feature path elements.","type":{"name":"string | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Sets the projection’s three-axis spherical rotation to the specified angles [lambda, phi [, gamma]], corresponding to yaw, pitch, and roll.","type":{"name":"[number, number] | [number, number, number] | undefined"}},"scale":{"name":"scale","required":false,"description":"Sets the projection’s scale factor to the specified value. The scale factor corresponds linearly\\nto the distance between projected points; however, absolute scale factors are not equivalent\\nacross projections.","type":{"name":"number | undefined"}},"data":{"name":"data","required":true,"description":"Array of features to project.","type":{"name":"Datum[]"}},"projectionFunc":{"name":"projectionFunc","required":false,"description":"Hook to render above features, passed the configured projectionFunc.","type":{"name":"((projection: GeoProjection) => ReactNode) | undefined"}},"clipAngle":{"name":"clipAngle","required":false,"description":"Sets the projection’s clipping circle radius to the specified angle in degree.","type":{"name":"number | undefined"}},"clipExtent":{"name":"clipExtent","required":false,"description":"Sets the projection’s viewport clip extent to the specified bounds in pixels. extent bounds\\nare specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left-side of the viewport,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[number, number], [number, number]] | undefined"}},"translate":{"name":"translate","required":false,"description":"Sets the projection’s translation offset, which determines the pixel coordinates of the\\nprojection’s center, to the specified two-element array [tx, ty].","type":{"name":"[number, number] | undefined"}},"center":{"name":"center","required":false,"description":"Sets the projection’s center to the specified two-element array of longitude and latitude in degrees.","type":{"name":"[number, number] | undefined"}},"fitExtent":{"name":"fitExtent","required":false,"description":"Sets the projection’s scale and translate to fit the specified GeoJSON object in the center of the given extent.\\nThe extent is specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left side of the bounding box,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[[number, number], [number, number]], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"fitSize":{"name":"fitSize","required":false,"description":"Convenience prop for props.fitExtent where the top-left corner of the extent is [0, 0].","type":{"name":"[[number, number], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"centroid":{"name":"centroid","required":false,"description":"Hook to render anything at the centroid of a feature.","type":{"name":"((centroid: [number, number], feature: ParsedFeature<Datum>) => ReactNode) | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"Function invoked for each feature which returns a React.Ref to the projection path element for that feature.","type":{"name":"((feature: ParsedFeature<Datum>, index: number) => Ref<SVGPathElement>) | undefined"}},"graticuleLines":{"name":"graticuleLines","required":false,"description":"If specified, renders a Graticule lines with the specified props. Specify `graticuleLines.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"graticuleOutline":{"name":"graticuleOutline","required":false,"description":"If specified, renders a Graticule outline with the specified props. Specify `graticuleOutline.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"outline\\"> & { foreground: boolean; }) | undefined"}},"digits":{"name":"digits","required":false,"description":"Limits the digits for coordinates generated in SVG path strings to the specified number of digits.","type":{"name":"number | undefined"}},"pointRadius":{"name":"pointRadius","required":false,"description":"Sets the radius used to display Point and MultiPoint geometries to the specified number.","type":{"name":"number | undefined"}}},"filePath":"visx-geo/src/projections/Albers.tsx","lineNumber":9},"AlbersUsa":{"displayName":"AlbersUsa","description":"All props pass through to `<Projection projection=\\"albersUsa\\" {...props} />`","kind":"component","props":{"graticule":{"name":"graticule","required":false,"description":"If specified, renders a Graticule with the specified props. Specify `graticule.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"children":{"name":"children","required":false,"description":"Override render function which is passed path data and a copy of the constructed projection.","type":{"name":"((args: { path: GeoPath<unknown, GeoPermissibleObjects>; features: ParsedFeature<Datum>[]; projection: GeoProjection; }) => ReactNode) | undefined"}},"precision":{"name":"precision","required":false,"description":"Sets the threshold for the projection’s adaptive resampling to the specified value in pixels.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"className to apply to feature path elements.","type":{"name":"string | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Sets the projection’s three-axis spherical rotation to the specified angles [lambda, phi [, gamma]], corresponding to yaw, pitch, and roll.","type":{"name":"[number, number] | [number, number, number] | undefined"}},"scale":{"name":"scale","required":false,"description":"Sets the projection’s scale factor to the specified value. The scale factor corresponds linearly\\nto the distance between projected points; however, absolute scale factors are not equivalent\\nacross projections.","type":{"name":"number | undefined"}},"data":{"name":"data","required":true,"description":"Array of features to project.","type":{"name":"Datum[]"}},"projectionFunc":{"name":"projectionFunc","required":false,"description":"Hook to render above features, passed the configured projectionFunc.","type":{"name":"((projection: GeoProjection) => ReactNode) | undefined"}},"clipAngle":{"name":"clipAngle","required":false,"description":"Sets the projection’s clipping circle radius to the specified angle in degree.","type":{"name":"number | undefined"}},"clipExtent":{"name":"clipExtent","required":false,"description":"Sets the projection’s viewport clip extent to the specified bounds in pixels. extent bounds\\nare specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left-side of the viewport,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[number, number], [number, number]] | undefined"}},"translate":{"name":"translate","required":false,"description":"Sets the projection’s translation offset, which determines the pixel coordinates of the\\nprojection’s center, to the specified two-element array [tx, ty].","type":{"name":"[number, number] | undefined"}},"center":{"name":"center","required":false,"description":"Sets the projection’s center to the specified two-element array of longitude and latitude in degrees.","type":{"name":"[number, number] | undefined"}},"fitExtent":{"name":"fitExtent","required":false,"description":"Sets the projection’s scale and translate to fit the specified GeoJSON object in the center of the given extent.\\nThe extent is specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left side of the bounding box,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[[number, number], [number, number]], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"fitSize":{"name":"fitSize","required":false,"description":"Convenience prop for props.fitExtent where the top-left corner of the extent is [0, 0].","type":{"name":"[[number, number], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"centroid":{"name":"centroid","required":false,"description":"Hook to render anything at the centroid of a feature.","type":{"name":"((centroid: [number, number], feature: ParsedFeature<Datum>) => ReactNode) | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"Function invoked for each feature which returns a React.Ref to the projection path element for that feature.","type":{"name":"((feature: ParsedFeature<Datum>, index: number) => Ref<SVGPathElement>) | undefined"}},"graticuleLines":{"name":"graticuleLines","required":false,"description":"If specified, renders a Graticule lines with the specified props. Specify `graticuleLines.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"graticuleOutline":{"name":"graticuleOutline","required":false,"description":"If specified, renders a Graticule outline with the specified props. Specify `graticuleOutline.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"outline\\"> & { foreground: boolean; }) | undefined"}},"digits":{"name":"digits","required":false,"description":"Limits the digits for coordinates generated in SVG path strings to the specified number of digits.","type":{"name":"number | undefined"}},"pointRadius":{"name":"pointRadius","required":false,"description":"Sets the radius used to display Point and MultiPoint geometries to the specified number.","type":{"name":"number | undefined"}}},"filePath":"visx-geo/src/projections/AlbersUsa.tsx","lineNumber":9},"Mercator":{"displayName":"Mercator","description":"All props pass through to `<Projection projection=\\"mercator\\" {...props} />`","kind":"component","props":{"graticule":{"name":"graticule","required":false,"description":"If specified, renders a Graticule with the specified props. Specify `graticule.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"children":{"name":"children","required":false,"description":"Override render function which is passed path data and a copy of the constructed projection.","type":{"name":"((args: { path: GeoPath<unknown, GeoPermissibleObjects>; features: ParsedFeature<Datum>[]; projection: GeoProjection; }) => ReactNode) | undefined"}},"precision":{"name":"precision","required":false,"description":"Sets the threshold for the projection’s adaptive resampling to the specified value in pixels.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"className to apply to feature path elements.","type":{"name":"string | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Sets the projection’s three-axis spherical rotation to the specified angles [lambda, phi [, gamma]], corresponding to yaw, pitch, and roll.","type":{"name":"[number, number] | [number, number, number] | undefined"}},"scale":{"name":"scale","required":false,"description":"Sets the projection’s scale factor to the specified value. The scale factor corresponds linearly\\nto the distance between projected points; however, absolute scale factors are not equivalent\\nacross projections.","type":{"name":"number | undefined"}},"data":{"name":"data","required":true,"description":"Array of features to project.","type":{"name":"Datum[]"}},"projectionFunc":{"name":"projectionFunc","required":false,"description":"Hook to render above features, passed the configured projectionFunc.","type":{"name":"((projection: GeoProjection) => ReactNode) | undefined"}},"clipAngle":{"name":"clipAngle","required":false,"description":"Sets the projection’s clipping circle radius to the specified angle in degree.","type":{"name":"number | undefined"}},"clipExtent":{"name":"clipExtent","required":false,"description":"Sets the projection’s viewport clip extent to the specified bounds in pixels. extent bounds\\nare specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left-side of the viewport,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[number, number], [number, number]] | undefined"}},"translate":{"name":"translate","required":false,"description":"Sets the projection’s translation offset, which determines the pixel coordinates of the\\nprojection’s center, to the specified two-element array [tx, ty].","type":{"name":"[number, number] | undefined"}},"center":{"name":"center","required":false,"description":"Sets the projection’s center to the specified two-element array of longitude and latitude in degrees.","type":{"name":"[number, number] | undefined"}},"fitExtent":{"name":"fitExtent","required":false,"description":"Sets the projection’s scale and translate to fit the specified GeoJSON object in the center of the given extent.\\nThe extent is specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left side of the bounding box,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[[number, number], [number, number]], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"fitSize":{"name":"fitSize","required":false,"description":"Convenience prop for props.fitExtent where the top-left corner of the extent is [0, 0].","type":{"name":"[[number, number], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"centroid":{"name":"centroid","required":false,"description":"Hook to render anything at the centroid of a feature.","type":{"name":"((centroid: [number, number], feature: ParsedFeature<Datum>) => ReactNode) | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"Function invoked for each feature which returns a React.Ref to the projection path element for that feature.","type":{"name":"((feature: ParsedFeature<Datum>, index: number) => Ref<SVGPathElement>) | undefined"}},"graticuleLines":{"name":"graticuleLines","required":false,"description":"If specified, renders a Graticule lines with the specified props. Specify `graticuleLines.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"graticuleOutline":{"name":"graticuleOutline","required":false,"description":"If specified, renders a Graticule outline with the specified props. Specify `graticuleOutline.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"outline\\"> & { foreground: boolean; }) | undefined"}},"digits":{"name":"digits","required":false,"description":"Limits the digits for coordinates generated in SVG path strings to the specified number of digits.","type":{"name":"number | undefined"}},"pointRadius":{"name":"pointRadius","required":false,"description":"Sets the radius used to display Point and MultiPoint geometries to the specified number.","type":{"name":"number | undefined"}}},"filePath":"visx-geo/src/projections/Mercator.tsx","lineNumber":9},"Orthographic":{"displayName":"Orthographic","description":"All props pass through to `<Projection projection=\\"orthographic\\" {...props} />`","kind":"component","props":{"graticule":{"name":"graticule","required":false,"description":"If specified, renders a Graticule with the specified props. Specify `graticule.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"children":{"name":"children","required":false,"description":"Override render function which is passed path data and a copy of the constructed projection.","type":{"name":"((args: { path: GeoPath<unknown, GeoPermissibleObjects>; features: ParsedFeature<Datum>[]; projection: GeoProjection; }) => ReactNode) | undefined"}},"precision":{"name":"precision","required":false,"description":"Sets the threshold for the projection’s adaptive resampling to the specified value in pixels.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"className to apply to feature path elements.","type":{"name":"string | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Sets the projection’s three-axis spherical rotation to the specified angles [lambda, phi [, gamma]], corresponding to yaw, pitch, and roll.","type":{"name":"[number, number] | [number, number, number] | undefined"}},"scale":{"name":"scale","required":false,"description":"Sets the projection’s scale factor to the specified value. The scale factor corresponds linearly\\nto the distance between projected points; however, absolute scale factors are not equivalent\\nacross projections.","type":{"name":"number | undefined"}},"data":{"name":"data","required":true,"description":"Array of features to project.","type":{"name":"Datum[]"}},"projectionFunc":{"name":"projectionFunc","required":false,"description":"Hook to render above features, passed the configured projectionFunc.","type":{"name":"((projection: GeoProjection) => ReactNode) | undefined"}},"clipAngle":{"name":"clipAngle","required":false,"description":"Sets the projection’s clipping circle radius to the specified angle in degree.","type":{"name":"number | undefined"}},"clipExtent":{"name":"clipExtent","required":false,"description":"Sets the projection’s viewport clip extent to the specified bounds in pixels. extent bounds\\nare specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left-side of the viewport,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[number, number], [number, number]] | undefined"}},"translate":{"name":"translate","required":false,"description":"Sets the projection’s translation offset, which determines the pixel coordinates of the\\nprojection’s center, to the specified two-element array [tx, ty].","type":{"name":"[number, number] | undefined"}},"center":{"name":"center","required":false,"description":"Sets the projection’s center to the specified two-element array of longitude and latitude in degrees.","type":{"name":"[number, number] | undefined"}},"fitExtent":{"name":"fitExtent","required":false,"description":"Sets the projection’s scale and translate to fit the specified GeoJSON object in the center of the given extent.\\nThe extent is specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left side of the bounding box,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[[number, number], [number, number]], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"fitSize":{"name":"fitSize","required":false,"description":"Convenience prop for props.fitExtent where the top-left corner of the extent is [0, 0].","type":{"name":"[[number, number], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"centroid":{"name":"centroid","required":false,"description":"Hook to render anything at the centroid of a feature.","type":{"name":"((centroid: [number, number], feature: ParsedFeature<Datum>) => ReactNode) | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"Function invoked for each feature which returns a React.Ref to the projection path element for that feature.","type":{"name":"((feature: ParsedFeature<Datum>, index: number) => Ref<SVGPathElement>) | undefined"}},"graticuleLines":{"name":"graticuleLines","required":false,"description":"If specified, renders a Graticule lines with the specified props. Specify `graticuleLines.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"graticuleOutline":{"name":"graticuleOutline","required":false,"description":"If specified, renders a Graticule outline with the specified props. Specify `graticuleOutline.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"outline\\"> & { foreground: boolean; }) | undefined"}},"digits":{"name":"digits","required":false,"description":"Limits the digits for coordinates generated in SVG path strings to the specified number of digits.","type":{"name":"number | undefined"}},"pointRadius":{"name":"pointRadius","required":false,"description":"Sets the radius used to display Point and MultiPoint geometries to the specified number.","type":{"name":"number | undefined"}}},"filePath":"visx-geo/src/projections/Orthographic.tsx","lineNumber":9},"NaturalEarth":{"displayName":"NaturalEarth","description":"All props pass through to `<Projection projection=\\"naturalEarth\\" {...props} />`","kind":"component","props":{"graticule":{"name":"graticule","required":false,"description":"If specified, renders a Graticule with the specified props. Specify `graticule.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"children":{"name":"children","required":false,"description":"Override render function which is passed path data and a copy of the constructed projection.","type":{"name":"((args: { path: GeoPath<unknown, GeoPermissibleObjects>; features: ParsedFeature<Datum>[]; projection: GeoProjection; }) => ReactNode) | undefined"}},"precision":{"name":"precision","required":false,"description":"Sets the threshold for the projection’s adaptive resampling to the specified value in pixels.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"className to apply to feature path elements.","type":{"name":"string | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Sets the projection’s three-axis spherical rotation to the specified angles [lambda, phi [, gamma]], corresponding to yaw, pitch, and roll.","type":{"name":"[number, number] | [number, number, number] | undefined"}},"scale":{"name":"scale","required":false,"description":"Sets the projection’s scale factor to the specified value. The scale factor corresponds linearly\\nto the distance between projected points; however, absolute scale factors are not equivalent\\nacross projections.","type":{"name":"number | undefined"}},"data":{"name":"data","required":true,"description":"Array of features to project.","type":{"name":"Datum[]"}},"projectionFunc":{"name":"projectionFunc","required":false,"description":"Hook to render above features, passed the configured projectionFunc.","type":{"name":"((projection: GeoProjection) => ReactNode) | undefined"}},"clipAngle":{"name":"clipAngle","required":false,"description":"Sets the projection’s clipping circle radius to the specified angle in degree.","type":{"name":"number | undefined"}},"clipExtent":{"name":"clipExtent","required":false,"description":"Sets the projection’s viewport clip extent to the specified bounds in pixels. extent bounds\\nare specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left-side of the viewport,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[number, number], [number, number]] | undefined"}},"translate":{"name":"translate","required":false,"description":"Sets the projection’s translation offset, which determines the pixel coordinates of the\\nprojection’s center, to the specified two-element array [tx, ty].","type":{"name":"[number, number] | undefined"}},"center":{"name":"center","required":false,"description":"Sets the projection’s center to the specified two-element array of longitude and latitude in degrees.","type":{"name":"[number, number] | undefined"}},"fitExtent":{"name":"fitExtent","required":false,"description":"Sets the projection’s scale and translate to fit the specified GeoJSON object in the center of the given extent.\\nThe extent is specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left side of the bounding box,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[[number, number], [number, number]], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"fitSize":{"name":"fitSize","required":false,"description":"Convenience prop for props.fitExtent where the top-left corner of the extent is [0, 0].","type":{"name":"[[number, number], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"centroid":{"name":"centroid","required":false,"description":"Hook to render anything at the centroid of a feature.","type":{"name":"((centroid: [number, number], feature: ParsedFeature<Datum>) => ReactNode) | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"Function invoked for each feature which returns a React.Ref to the projection path element for that feature.","type":{"name":"((feature: ParsedFeature<Datum>, index: number) => Ref<SVGPathElement>) | undefined"}},"graticuleLines":{"name":"graticuleLines","required":false,"description":"If specified, renders a Graticule lines with the specified props. Specify `graticuleLines.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"graticuleOutline":{"name":"graticuleOutline","required":false,"description":"If specified, renders a Graticule outline with the specified props. Specify `graticuleOutline.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"outline\\"> & { foreground: boolean; }) | undefined"}},"digits":{"name":"digits","required":false,"description":"Limits the digits for coordinates generated in SVG path strings to the specified number of digits.","type":{"name":"number | undefined"}},"pointRadius":{"name":"pointRadius","required":false,"description":"Sets the radius used to display Point and MultiPoint geometries to the specified number.","type":{"name":"number | undefined"}}},"filePath":"visx-geo/src/projections/NaturalEarth.tsx","lineNumber":9},"EqualEarth":{"displayName":"EqualEarth","description":"All props pass through to `<Projection projection=\\"equalEarth\\" {...props} />`","kind":"component","props":{"graticule":{"name":"graticule","required":false,"description":"If specified, renders a Graticule with the specified props. Specify `graticule.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"children":{"name":"children","required":false,"description":"Override render function which is passed path data and a copy of the constructed projection.","type":{"name":"((args: { path: GeoPath<unknown, GeoPermissibleObjects>; features: ParsedFeature<Datum>[]; projection: GeoProjection; }) => ReactNode) | undefined"}},"precision":{"name":"precision","required":false,"description":"Sets the threshold for the projection’s adaptive resampling to the specified value in pixels.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"className to apply to feature path elements.","type":{"name":"string | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Sets the projection’s three-axis spherical rotation to the specified angles [lambda, phi [, gamma]], corresponding to yaw, pitch, and roll.","type":{"name":"[number, number] | [number, number, number] | undefined"}},"scale":{"name":"scale","required":false,"description":"Sets the projection’s scale factor to the specified value. The scale factor corresponds linearly\\nto the distance between projected points; however, absolute scale factors are not equivalent\\nacross projections.","type":{"name":"number | undefined"}},"data":{"name":"data","required":true,"description":"Array of features to project.","type":{"name":"Datum[]"}},"projectionFunc":{"name":"projectionFunc","required":false,"description":"Hook to render above features, passed the configured projectionFunc.","type":{"name":"((projection: GeoProjection) => ReactNode) | undefined"}},"clipAngle":{"name":"clipAngle","required":false,"description":"Sets the projection’s clipping circle radius to the specified angle in degree.","type":{"name":"number | undefined"}},"clipExtent":{"name":"clipExtent","required":false,"description":"Sets the projection’s viewport clip extent to the specified bounds in pixels. extent bounds\\nare specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left-side of the viewport,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[number, number], [number, number]] | undefined"}},"translate":{"name":"translate","required":false,"description":"Sets the projection’s translation offset, which determines the pixel coordinates of the\\nprojection’s center, to the specified two-element array [tx, ty].","type":{"name":"[number, number] | undefined"}},"center":{"name":"center","required":false,"description":"Sets the projection’s center to the specified two-element array of longitude and latitude in degrees.","type":{"name":"[number, number] | undefined"}},"fitExtent":{"name":"fitExtent","required":false,"description":"Sets the projection’s scale and translate to fit the specified GeoJSON object in the center of the given extent.\\nThe extent is specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left side of the bounding box,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[[number, number], [number, number]], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"fitSize":{"name":"fitSize","required":false,"description":"Convenience prop for props.fitExtent where the top-left corner of the extent is [0, 0].","type":{"name":"[[number, number], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"centroid":{"name":"centroid","required":false,"description":"Hook to render anything at the centroid of a feature.","type":{"name":"((centroid: [number, number], feature: ParsedFeature<Datum>) => ReactNode) | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"Function invoked for each feature which returns a React.Ref to the projection path element for that feature.","type":{"name":"((feature: ParsedFeature<Datum>, index: number) => Ref<SVGPathElement>) | undefined"}},"graticuleLines":{"name":"graticuleLines","required":false,"description":"If specified, renders a Graticule lines with the specified props. Specify `graticuleLines.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"graticuleOutline":{"name":"graticuleOutline","required":false,"description":"If specified, renders a Graticule outline with the specified props. Specify `graticuleOutline.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"outline\\"> & { foreground: boolean; }) | undefined"}},"digits":{"name":"digits","required":false,"description":"Limits the digits for coordinates generated in SVG path strings to the specified number of digits.","type":{"name":"number | undefined"}},"pointRadius":{"name":"pointRadius","required":false,"description":"Sets the radius used to display Point and MultiPoint geometries to the specified number.","type":{"name":"number | undefined"}}},"filePath":"visx-geo/src/projections/EqualEarth.tsx","lineNumber":9},"CustomProjection":{"displayName":"CustomProjection","description":"All props pass through to `<Projection projection={customProjection} {...props} />`","kind":"component","props":{"data":{"name":"data","required":true,"description":"Array of features to project.","type":{"name":"Datum[]"}},"projection":{"name":"projection","required":false,"description":"Preset projection name, or custom projection function which returns a GeoProjection.","type":{"name":"Projection | undefined"}},"projectionFunc":{"name":"projectionFunc","required":false,"description":"Hook to render above features, passed the configured projectionFunc.","type":{"name":"((projection: GeoProjection) => ReactNode) | undefined"}},"clipAngle":{"name":"clipAngle","required":false,"description":"Sets the projection’s clipping circle radius to the specified angle in degree.","type":{"name":"number | undefined"}},"clipExtent":{"name":"clipExtent","required":false,"description":"Sets the projection’s viewport clip extent to the specified bounds in pixels. extent bounds\\nare specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left-side of the viewport,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[number, number], [number, number]] | undefined"}},"scale":{"name":"scale","required":false,"description":"Sets the projection’s scale factor to the specified value. The scale factor corresponds linearly\\nto the distance between projected points; however, absolute scale factors are not equivalent\\nacross projections.","type":{"name":"number | undefined"}},"translate":{"name":"translate","required":false,"description":"Sets the projection’s translation offset, which determines the pixel coordinates of the\\nprojection’s center, to the specified two-element array [tx, ty].","type":{"name":"[number, number] | undefined"}},"center":{"name":"center","required":false,"description":"Sets the projection’s center to the specified two-element array of longitude and latitude in degrees.","type":{"name":"[number, number] | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Sets the projection’s three-axis spherical rotation to the specified angles [lambda, phi [, gamma]], corresponding to yaw, pitch, and roll.","type":{"name":"[number, number] | [number, number, number] | undefined"}},"precision":{"name":"precision","required":false,"description":"Sets the threshold for the projection’s adaptive resampling to the specified value in pixels.","type":{"name":"number | undefined"}},"fitExtent":{"name":"fitExtent","required":false,"description":"Sets the projection’s scale and translate to fit the specified GeoJSON object in the center of the given extent.\\nThe extent is specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left side of the bounding box,\\ny₀ is the top, x₁ is the right and y₁ is the bottom.","type":{"name":"[[[number, number], [number, number]], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"fitSize":{"name":"fitSize","required":false,"description":"Convenience prop for props.fitExtent where the top-left corner of the extent is [0, 0].","type":{"name":"[[number, number], ExtendedFeature<GeoGeometryObjects | null, GeoJsonProperties>] | undefined"}},"centroid":{"name":"centroid","required":false,"description":"Hook to render anything at the centroid of a feature.","type":{"name":"((centroid: [number, number], feature: ParsedFeature<Datum>) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"className to apply to feature path elements.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Override render function which is passed path data and a copy of the constructed projection.","type":{"name":"((args: { path: GeoPath<unknown, GeoPermissibleObjects>; features: ParsedFeature<Datum>[]; projection: GeoProjection; }) => ReactNode) | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"Function invoked for each feature which returns a React.Ref to the projection path element for that feature.","type":{"name":"((feature: ParsedFeature<Datum>, index: number) => Ref<SVGPathElement>) | undefined"}},"graticule":{"name":"graticule","required":false,"description":"If specified, renders a Graticule with the specified props. Specify `graticule.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"graticuleLines":{"name":"graticuleLines","required":false,"description":"If specified, renders a Graticule lines with the specified props. Specify `graticuleLines.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"lines\\"> & { foreground: boolean; }) | undefined"}},"graticuleOutline":{"name":"graticuleOutline","required":false,"description":"If specified, renders a Graticule outline with the specified props. Specify `graticuleOutline.foreground = true` to be rendered on top of features.","type":{"name":"(Omit<GraticuleProps, \\"outline\\"> & { foreground: boolean; }) | undefined"}},"digits":{"name":"digits","required":false,"description":"Limits the digits for coordinates generated in SVG path strings to the specified number of digits.","type":{"name":"number | undefined"}},"pointRadius":{"name":"pointRadius","required":false,"description":"Sets the radius used to display Point and MultiPoint geometries to the specified number.","type":{"name":"number | undefined"}}},"filePath":"visx-geo/src/projections/CustomProjection.tsx","lineNumber":9}},"@visx/glyph":{"Glyph":{"displayName":"Glyph","kind":"component","props":{"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"className":{"name":"className","required":false,"description":"classname to apply to glyph g element container.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Children to render.","type":{"name":"ReactNode"}}},"filePath":"visx-glyph/src/glyphs/Glyph.tsx","lineNumber":16},"GlyphDot":{"displayName":"GlyphDot","kind":"component","props":{"className":{"name":"className","required":false,"description":"classname to apply to glyph path element.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"r":{"name":"r","required":false,"description":"Radius of dot.","type":{"name":"number | undefined"}},"cx":{"name":"cx","required":false,"description":"x coordinate of the center of the dot.","type":{"name":"number | undefined"}},"cy":{"name":"cy","required":false,"description":"y coordinate of the center of the dot.","type":{"name":"number | undefined"}}},"filePath":"visx-glyph/src/glyphs/GlyphDot.tsx","lineNumber":20},"GlyphCross":{"displayName":"GlyphCross","kind":"component","props":{"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator.","type":{"name":"(({ path }: { path: Symbol<unknown, Datum>; }) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"classname to apply to glyph path element.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"size":{"name":"size","required":false,"description":"Size of cross in px, or an accessor which takes Datum as input and returns a size.","type":{"name":"number | ((d: Datum) => number) | undefined"}}},"filePath":"visx-glyph/src/glyphs/GlyphCross.tsx","lineNumber":20},"GlyphDiamond":{"displayName":"GlyphDiamond","kind":"component","props":{"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator.","type":{"name":"(({ path }: { path: Symbol<unknown, Datum>; }) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"classname to apply to glyph path element.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"size":{"name":"size","required":false,"description":"Size of diamond in px, or an accessor which takes Datum as input and returns a size.","type":{"name":"number | ((d: Datum) => number) | undefined"}}},"filePath":"visx-glyph/src/glyphs/GlyphDiamond.tsx","lineNumber":20},"GlyphStar":{"displayName":"GlyphStar","kind":"component","props":{"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator.","type":{"name":"(({ path }: { path: Symbol<unknown, Datum>; }) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"classname to apply to glyph path element.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"size":{"name":"size","required":false,"description":"Size of star in px, or an accessor which takes Datum as input and returns a size.","type":{"name":"number | ((d: Datum) => number) | undefined"}}},"filePath":"visx-glyph/src/glyphs/GlyphStar.tsx","lineNumber":20},"GlyphTriangle":{"displayName":"GlyphTriangle","kind":"component","props":{"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator.","type":{"name":"(({ path }: { path: Symbol<unknown, Datum>; }) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"classname to apply to glyph path element.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"size":{"name":"size","required":false,"description":"Size of triangle in px, or an accessor which takes Datum as input and returns a size.","type":{"name":"number | ((d: Datum) => number) | undefined"}}},"filePath":"visx-glyph/src/glyphs/GlyphTriangle.tsx","lineNumber":20},"GlyphWye":{"displayName":"GlyphWye","kind":"component","props":{"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator.","type":{"name":"(({ path }: { path: Symbol<unknown, Datum>; }) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"classname to apply to glyph path element.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"size":{"name":"size","required":false,"description":"Size of wye glyph in px, or an accessor which takes Datum as input and returns a size.","type":{"name":"number | ((d: Datum) => number) | undefined"}}},"filePath":"visx-glyph/src/glyphs/GlyphWye.tsx","lineNumber":20},"GlyphSquare":{"displayName":"GlyphSquare","kind":"component","props":{"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator.","type":{"name":"(({ path }: { path: Symbol<unknown, Datum>; }) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"classname to apply to glyph path element.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"size":{"name":"size","required":false,"description":"Size of square in px, or an accessor which takes Datum as input and returns a size.","type":{"name":"number | ((d: Datum) => number) | undefined"}}},"filePath":"visx-glyph/src/glyphs/GlyphSquare.tsx","lineNumber":20},"GlyphCircle":{"displayName":"GlyphCircle","kind":"component","props":{"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator.","type":{"name":"(({ path }: { path: Symbol<unknown, Datum>; }) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"classname to apply to glyph path element.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"size":{"name":"size","required":false,"description":"Size of circle in px, or an accessor which takes Datum as input and returns a size.","type":{"name":"number | ((d: Datum) => number) | undefined"}}},"filePath":"visx-glyph/src/glyphs/GlyphCircle.tsx","lineNumber":20}},"@visx/gradient":{"LinearGradient":{"displayName":"LinearGradient","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the gradient. Should be unique across all page elements.","type":{"name":"string"}},"from":{"name":"from","required":false,"description":"Start color of gradient.","type":{"name":"string | undefined"}},"to":{"name":"to","required":false,"description":"End color of gradient.","type":{"name":"string | undefined"}},"x1":{"name":"x1","required":false,"description":"The x coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"x2":{"name":"x2","required":false,"description":"The x coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y1":{"name":"y1","required":false,"description":"The y coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y2":{"name":"y2","required":false,"description":"The y coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"fromOffset":{"name":"fromOffset","required":false,"description":"Number or percent defining the where the \'from\' starting color is placed along the gradient.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"\'0%\'"}},"fromOpacity":{"name":"fromOpacity","required":false,"description":"Opacity of the \'from\' starting color.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"1"}},"toOffset":{"name":"toOffset","required":false,"description":"Number or percent defining the where the \'to\' ending color is placed along the gradient.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"\'100%\'"}},"toOpacity":{"name":"toOpacity","required":false,"description":"Opacity of the \'to\' ending color.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"1"}},"rotate":{"name":"rotate","required":false,"description":"Rotation to apply to gradient.","type":{"name":"string | number | undefined"}},"transform":{"name":"transform","required":false,"description":"Transform to apply to linearGradient, overrides rotate.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Override of linearGradient children.","type":{"name":"ReactNode"}},"vertical":{"name":"vertical","required":false,"description":"(When no x or y values are passed), will orient the gradient vertically instead of horizontally.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}}},"filePath":"visx-gradient/src/gradients/LinearGradient.tsx","lineNumber":39},"RadialGradient":{"displayName":"RadialGradient","kind":"component","props":{"fromOffset":{"name":"fromOffset","required":false,"description":"Number or percent defining the where the \'from\' starting color is placed along the gradient.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"\'0%\'"}},"fromOpacity":{"name":"fromOpacity","required":false,"description":"Opacity of the \'from\' starting color.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"1"}},"toOffset":{"name":"toOffset","required":false,"description":"Number or percent defining the where the \'to\' ending color is placed along the gradient.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"\'100%\'"}},"toOpacity":{"name":"toOpacity","required":false,"description":"Opacity of the \'to\' ending color.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"1"}}},"filePath":"visx-gradient/src/gradients/RadialGradient.tsx","lineNumber":19},"GradientDarkgreenGreen":{"displayName":"GradientDarkgreenGreen","description":"All props pass through to `<LinearGradient {...props} />`","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the gradient. Should be unique across all page elements.","type":{"name":"string"}},"from":{"name":"from","required":false,"description":"Start color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#184E86\'"}},"to":{"name":"to","required":false,"description":"End color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#57CA85\'"}},"x1":{"name":"x1","required":false,"description":"The x coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"x2":{"name":"x2","required":false,"description":"The x coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y1":{"name":"y1","required":false,"description":"The y coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y2":{"name":"y2","required":false,"description":"The y coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"fromOffset":{"name":"fromOffset","required":false,"description":"Number or percent defining the where the \'from\' starting color is placed along the gradient.","type":{"name":"string | number | undefined"}},"fromOpacity":{"name":"fromOpacity","required":false,"description":"Opacity of the \'from\' starting color.","type":{"name":"string | number | undefined"}},"toOffset":{"name":"toOffset","required":false,"description":"Number or percent defining the where the \'to\' ending color is placed along the gradient.","type":{"name":"string | number | undefined"}},"toOpacity":{"name":"toOpacity","required":false,"description":"Opacity of the \'to\' ending color.","type":{"name":"string | number | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Rotation to apply to gradient.","type":{"name":"string | number | undefined"}},"transform":{"name":"transform","required":false,"description":"Transform to apply to linearGradient, overrides rotate.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Override of linearGradient children.","type":{"name":"ReactNode"}},"vertical":{"name":"vertical","required":false,"description":"(When no x or y values are passed), will orient the gradient vertically instead of horizontally.","type":{"name":"boolean | undefined"}}},"filePath":"visx-gradient/src/gradients/GradientDarkgreenGreen.tsx","lineNumber":8},"GradientLightgreenGreen":{"displayName":"GradientLightgreenGreen","description":"All props pass through to `<LinearGradient {...props} />`","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the gradient. Should be unique across all page elements.","type":{"name":"string"}},"from":{"name":"from","required":false,"description":"Start color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#42E695\'"}},"to":{"name":"to","required":false,"description":"End color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#3BB2B8\'"}},"x1":{"name":"x1","required":false,"description":"The x coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"x2":{"name":"x2","required":false,"description":"The x coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y1":{"name":"y1","required":false,"description":"The y coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y2":{"name":"y2","required":false,"description":"The y coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"fromOffset":{"name":"fromOffset","required":false,"description":"Number or percent defining the where the \'from\' starting color is placed along the gradient.","type":{"name":"string | number | undefined"}},"fromOpacity":{"name":"fromOpacity","required":false,"description":"Opacity of the \'from\' starting color.","type":{"name":"string | number | undefined"}},"toOffset":{"name":"toOffset","required":false,"description":"Number or percent defining the where the \'to\' ending color is placed along the gradient.","type":{"name":"string | number | undefined"}},"toOpacity":{"name":"toOpacity","required":false,"description":"Opacity of the \'to\' ending color.","type":{"name":"string | number | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Rotation to apply to gradient.","type":{"name":"string | number | undefined"}},"transform":{"name":"transform","required":false,"description":"Transform to apply to linearGradient, overrides rotate.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Override of linearGradient children.","type":{"name":"ReactNode"}},"vertical":{"name":"vertical","required":false,"description":"(When no x or y values are passed), will orient the gradient vertically instead of horizontally.","type":{"name":"boolean | undefined"}}},"filePath":"visx-gradient/src/gradients/GradientLightgreenGreen.tsx","lineNumber":8},"GradientOrangeRed":{"displayName":"GradientOrangeRed","description":"All props pass through to `<LinearGradient {...props} />`","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the gradient. Should be unique across all page elements.","type":{"name":"string"}},"from":{"name":"from","required":false,"description":"Start color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#FCE38A\'"}},"to":{"name":"to","required":false,"description":"End color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#F38181\'"}},"x1":{"name":"x1","required":false,"description":"The x coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"x2":{"name":"x2","required":false,"description":"The x coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y1":{"name":"y1","required":false,"description":"The y coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y2":{"name":"y2","required":false,"description":"The y coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"fromOffset":{"name":"fromOffset","required":false,"description":"Number or percent defining the where the \'from\' starting color is placed along the gradient.","type":{"name":"string | number | undefined"}},"fromOpacity":{"name":"fromOpacity","required":false,"description":"Opacity of the \'from\' starting color.","type":{"name":"string | number | undefined"}},"toOffset":{"name":"toOffset","required":false,"description":"Number or percent defining the where the \'to\' ending color is placed along the gradient.","type":{"name":"string | number | undefined"}},"toOpacity":{"name":"toOpacity","required":false,"description":"Opacity of the \'to\' ending color.","type":{"name":"string | number | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Rotation to apply to gradient.","type":{"name":"string | number | undefined"}},"transform":{"name":"transform","required":false,"description":"Transform to apply to linearGradient, overrides rotate.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Override of linearGradient children.","type":{"name":"ReactNode"}},"vertical":{"name":"vertical","required":false,"description":"(When no x or y values are passed), will orient the gradient vertically instead of horizontally.","type":{"name":"boolean | undefined"}}},"filePath":"visx-gradient/src/gradients/GradientOrangeRed.tsx","lineNumber":8},"GradientPinkBlue":{"displayName":"GradientPinkBlue","description":"All props pass through to `<LinearGradient {...props} />`","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the gradient. Should be unique across all page elements.","type":{"name":"string"}},"from":{"name":"from","required":false,"description":"Start color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#F02FC2\'"}},"to":{"name":"to","required":false,"description":"End color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#6094EA\'"}},"x1":{"name":"x1","required":false,"description":"The x coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"x2":{"name":"x2","required":false,"description":"The x coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y1":{"name":"y1","required":false,"description":"The y coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y2":{"name":"y2","required":false,"description":"The y coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"fromOffset":{"name":"fromOffset","required":false,"description":"Number or percent defining the where the \'from\' starting color is placed along the gradient.","type":{"name":"string | number | undefined"}},"fromOpacity":{"name":"fromOpacity","required":false,"description":"Opacity of the \'from\' starting color.","type":{"name":"string | number | undefined"}},"toOffset":{"name":"toOffset","required":false,"description":"Number or percent defining the where the \'to\' ending color is placed along the gradient.","type":{"name":"string | number | undefined"}},"toOpacity":{"name":"toOpacity","required":false,"description":"Opacity of the \'to\' ending color.","type":{"name":"string | number | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Rotation to apply to gradient.","type":{"name":"string | number | undefined"}},"transform":{"name":"transform","required":false,"description":"Transform to apply to linearGradient, overrides rotate.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Override of linearGradient children.","type":{"name":"ReactNode"}},"vertical":{"name":"vertical","required":false,"description":"(When no x or y values are passed), will orient the gradient vertically instead of horizontally.","type":{"name":"boolean | undefined"}}},"filePath":"visx-gradient/src/gradients/GradientPinkBlue.tsx","lineNumber":8},"GradientPinkRed":{"displayName":"GradientPinkRed","description":"All props pass through to `<LinearGradient {...props} />`","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the gradient. Should be unique across all page elements.","type":{"name":"string"}},"from":{"name":"from","required":false,"description":"Start color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#F54EA2\'"}},"to":{"name":"to","required":false,"description":"End color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#FF7676\'"}},"x1":{"name":"x1","required":false,"description":"The x coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"x2":{"name":"x2","required":false,"description":"The x coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y1":{"name":"y1","required":false,"description":"The y coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y2":{"name":"y2","required":false,"description":"The y coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"fromOffset":{"name":"fromOffset","required":false,"description":"Number or percent defining the where the \'from\' starting color is placed along the gradient.","type":{"name":"string | number | undefined"}},"fromOpacity":{"name":"fromOpacity","required":false,"description":"Opacity of the \'from\' starting color.","type":{"name":"string | number | undefined"}},"toOffset":{"name":"toOffset","required":false,"description":"Number or percent defining the where the \'to\' ending color is placed along the gradient.","type":{"name":"string | number | undefined"}},"toOpacity":{"name":"toOpacity","required":false,"description":"Opacity of the \'to\' ending color.","type":{"name":"string | number | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Rotation to apply to gradient.","type":{"name":"string | number | undefined"}},"transform":{"name":"transform","required":false,"description":"Transform to apply to linearGradient, overrides rotate.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Override of linearGradient children.","type":{"name":"ReactNode"}},"vertical":{"name":"vertical","required":false,"description":"(When no x or y values are passed), will orient the gradient vertically instead of horizontally.","type":{"name":"boolean | undefined"}}},"filePath":"visx-gradient/src/gradients/GradientPinkRed.tsx","lineNumber":8},"GradientPurpleOrange":{"displayName":"GradientPurpleOrange","description":"All props pass through to `<LinearGradient {...props} />`","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the gradient. Should be unique across all page elements.","type":{"name":"string"}},"from":{"name":"from","required":false,"description":"Start color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#7117EA\'"}},"to":{"name":"to","required":false,"description":"End color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#EA6060\'"}},"x1":{"name":"x1","required":false,"description":"The x coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"x2":{"name":"x2","required":false,"description":"The x coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y1":{"name":"y1","required":false,"description":"The y coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y2":{"name":"y2","required":false,"description":"The y coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"fromOffset":{"name":"fromOffset","required":false,"description":"Number or percent defining the where the \'from\' starting color is placed along the gradient.","type":{"name":"string | number | undefined"}},"fromOpacity":{"name":"fromOpacity","required":false,"description":"Opacity of the \'from\' starting color.","type":{"name":"string | number | undefined"}},"toOffset":{"name":"toOffset","required":false,"description":"Number or percent defining the where the \'to\' ending color is placed along the gradient.","type":{"name":"string | number | undefined"}},"toOpacity":{"name":"toOpacity","required":false,"description":"Opacity of the \'to\' ending color.","type":{"name":"string | number | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Rotation to apply to gradient.","type":{"name":"string | number | undefined"}},"transform":{"name":"transform","required":false,"description":"Transform to apply to linearGradient, overrides rotate.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Override of linearGradient children.","type":{"name":"ReactNode"}},"vertical":{"name":"vertical","required":false,"description":"(When no x or y values are passed), will orient the gradient vertically instead of horizontally.","type":{"name":"boolean | undefined"}}},"filePath":"visx-gradient/src/gradients/GradientPurpleOrange.tsx","lineNumber":8},"GradientPurpleRed":{"displayName":"GradientPurpleRed","description":"All props pass through to `<LinearGradient {...props} />`","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the gradient. Should be unique across all page elements.","type":{"name":"string"}},"from":{"name":"from","required":false,"description":"Start color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#622774\'"}},"to":{"name":"to","required":false,"description":"End color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#C53364\'"}},"x1":{"name":"x1","required":false,"description":"The x coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"x2":{"name":"x2","required":false,"description":"The x coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y1":{"name":"y1","required":false,"description":"The y coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y2":{"name":"y2","required":false,"description":"The y coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"fromOffset":{"name":"fromOffset","required":false,"description":"Number or percent defining the where the \'from\' starting color is placed along the gradient.","type":{"name":"string | number | undefined"}},"fromOpacity":{"name":"fromOpacity","required":false,"description":"Opacity of the \'from\' starting color.","type":{"name":"string | number | undefined"}},"toOffset":{"name":"toOffset","required":false,"description":"Number or percent defining the where the \'to\' ending color is placed along the gradient.","type":{"name":"string | number | undefined"}},"toOpacity":{"name":"toOpacity","required":false,"description":"Opacity of the \'to\' ending color.","type":{"name":"string | number | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Rotation to apply to gradient.","type":{"name":"string | number | undefined"}},"transform":{"name":"transform","required":false,"description":"Transform to apply to linearGradient, overrides rotate.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Override of linearGradient children.","type":{"name":"ReactNode"}},"vertical":{"name":"vertical","required":false,"description":"(When no x or y values are passed), will orient the gradient vertically instead of horizontally.","type":{"name":"boolean | undefined"}}},"filePath":"visx-gradient/src/gradients/GradientPurpleRed.tsx","lineNumber":8},"GradientPurpleTeal":{"displayName":"GradientPurpleTeal","description":"All props pass through to `<LinearGradient {...props} />`","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the gradient. Should be unique across all page elements.","type":{"name":"string"}},"from":{"name":"from","required":false,"description":"Start color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#5B247A\'"}},"to":{"name":"to","required":false,"description":"End color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#1BCEDF\'"}},"x1":{"name":"x1","required":false,"description":"The x coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"x2":{"name":"x2","required":false,"description":"The x coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y1":{"name":"y1","required":false,"description":"The y coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y2":{"name":"y2","required":false,"description":"The y coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"fromOffset":{"name":"fromOffset","required":false,"description":"Number or percent defining the where the \'from\' starting color is placed along the gradient.","type":{"name":"string | number | undefined"}},"fromOpacity":{"name":"fromOpacity","required":false,"description":"Opacity of the \'from\' starting color.","type":{"name":"string | number | undefined"}},"toOffset":{"name":"toOffset","required":false,"description":"Number or percent defining the where the \'to\' ending color is placed along the gradient.","type":{"name":"string | number | undefined"}},"toOpacity":{"name":"toOpacity","required":false,"description":"Opacity of the \'to\' ending color.","type":{"name":"string | number | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Rotation to apply to gradient.","type":{"name":"string | number | undefined"}},"transform":{"name":"transform","required":false,"description":"Transform to apply to linearGradient, overrides rotate.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Override of linearGradient children.","type":{"name":"ReactNode"}},"vertical":{"name":"vertical","required":false,"description":"(When no x or y values are passed), will orient the gradient vertically instead of horizontally.","type":{"name":"boolean | undefined"}}},"filePath":"visx-gradient/src/gradients/GradientPurpleTeal.tsx","lineNumber":8},"GradientSteelPurple":{"displayName":"GradientSteelPurple","description":"All props pass through to `<LinearGradient {...props} />`","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the gradient. Should be unique across all page elements.","type":{"name":"string"}},"from":{"name":"from","required":false,"description":"Start color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#65799B\'"}},"to":{"name":"to","required":false,"description":"End color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#5E2563\'"}},"x1":{"name":"x1","required":false,"description":"The x coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"x2":{"name":"x2","required":false,"description":"The x coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y1":{"name":"y1","required":false,"description":"The y coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y2":{"name":"y2","required":false,"description":"The y coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"fromOffset":{"name":"fromOffset","required":false,"description":"Number or percent defining the where the \'from\' starting color is placed along the gradient.","type":{"name":"string | number | undefined"}},"fromOpacity":{"name":"fromOpacity","required":false,"description":"Opacity of the \'from\' starting color.","type":{"name":"string | number | undefined"}},"toOffset":{"name":"toOffset","required":false,"description":"Number or percent defining the where the \'to\' ending color is placed along the gradient.","type":{"name":"string | number | undefined"}},"toOpacity":{"name":"toOpacity","required":false,"description":"Opacity of the \'to\' ending color.","type":{"name":"string | number | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Rotation to apply to gradient.","type":{"name":"string | number | undefined"}},"transform":{"name":"transform","required":false,"description":"Transform to apply to linearGradient, overrides rotate.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Override of linearGradient children.","type":{"name":"ReactNode"}},"vertical":{"name":"vertical","required":false,"description":"(When no x or y values are passed), will orient the gradient vertically instead of horizontally.","type":{"name":"boolean | undefined"}}},"filePath":"visx-gradient/src/gradients/GradientSteelPurple.tsx","lineNumber":8},"GradientTealBlue":{"displayName":"GradientTealBlue","description":"All props pass through to `<LinearGradient {...props} />`","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the gradient. Should be unique across all page elements.","type":{"name":"string"}},"from":{"name":"from","required":false,"description":"Start color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#17EAD9\'"}},"to":{"name":"to","required":false,"description":"End color of gradient.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#6078EA\'"}},"x1":{"name":"x1","required":false,"description":"The x coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"x2":{"name":"x2","required":false,"description":"The x coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y1":{"name":"y1","required":false,"description":"The y coordinate of the starting point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"y2":{"name":"y2","required":false,"description":"The y coordinate of the ending point along which the linear gradient is drawn.","type":{"name":"string | number | undefined"}},"fromOffset":{"name":"fromOffset","required":false,"description":"Number or percent defining the where the \'from\' starting color is placed along the gradient.","type":{"name":"string | number | undefined"}},"fromOpacity":{"name":"fromOpacity","required":false,"description":"Opacity of the \'from\' starting color.","type":{"name":"string | number | undefined"}},"toOffset":{"name":"toOffset","required":false,"description":"Number or percent defining the where the \'to\' ending color is placed along the gradient.","type":{"name":"string | number | undefined"}},"toOpacity":{"name":"toOpacity","required":false,"description":"Opacity of the \'to\' ending color.","type":{"name":"string | number | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Rotation to apply to gradient.","type":{"name":"string | number | undefined"}},"transform":{"name":"transform","required":false,"description":"Transform to apply to linearGradient, overrides rotate.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Override of linearGradient children.","type":{"name":"ReactNode"}},"vertical":{"name":"vertical","required":false,"description":"(When no x or y values are passed), will orient the gradient vertically instead of horizontally.","type":{"name":"boolean | undefined"}}},"filePath":"visx-gradient/src/gradients/GradientTealBlue.tsx","lineNumber":8}},"@visx/grid":{"getScaleBandwidth":{"displayName":"getScaleBandwidth","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"GridScale"}}],"filePath":"visx-grid/src/utils/getScaleBandwidth.ts","lineNumber":3},"GridRows":{"displayName":"GridRows","kind":"component","props":{"className":{"name":"className","required":false,"description":"classname to apply to line group element.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Optionally override rendering of grid lines.","type":{"name":"((props: { lines: GridLines; }) => ReactNode) | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"stroke":{"name":"stroke","required":false,"description":"Grid line stroke color.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#eaf0f6\'"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"Grid line stroke thickness.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"1"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"Grid line stroke-dasharray attribute.","type":{"name":"string | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"Approximate number of grid lines. Approximate due to d3 alogrithm, specify `tickValues` for precise control.","type":{"name":"number | undefined"},"defaultValue":{"value":"10"}},"lineStyle":{"name":"lineStyle","required":false,"description":"Styles to apply as grid line style.","type":{"name":"CSSProperties | undefined"}},"offset":{"name":"offset","required":false,"description":"Pixel offset to apply as a translation (y- for Rows, x- for Columns) to each grid lines.","type":{"name":"number | undefined"}},"scale":{"name":"scale","required":true,"description":"`@visx/scale` or `d3-scale` object used to convert value to position.","type":{"name":"Scale"}},"tickValues":{"name":"tickValues","required":false,"description":"Exact values used to generate grid lines using `scale`.\\nOverrides `numTicks` if specified.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"width":{"name":"width","required":true,"description":"Total width of each grid row line.","type":{"name":"number"}},"innerRef":{"name":"innerRef","required":false,"description":"reference to line element.","type":{"name":"Ref<SVGLineElement> | undefined"}},"fill":{"name":"fill","required":false,"description":"fill color applied to line element.","type":{"name":"string | undefined"}},"from":{"name":"from","required":false,"description":"Starting x,y point of the line.","type":{"name":"Point | undefined"}},"to":{"name":"to","required":false,"description":"Ending x,y point of the line.","type":{"name":"Point | undefined"}}},"filePath":"visx-grid/src/grids/GridRows.tsx","lineNumber":30},"GridColumns":{"displayName":"GridColumns","kind":"component","props":{"className":{"name":"className","required":false,"description":"classname to apply to line group element.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Optionally override rendering of grid lines.","type":{"name":"((props: { lines: GridLines; }) => ReactNode) | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"stroke":{"name":"stroke","required":false,"description":"Grid line stroke color.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#eaf0f6\'"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"Grid line stroke thickness.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"1"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"Grid line stroke-dasharray attribute.","type":{"name":"string | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"Approximate number of grid lines. Approximate due to d3 alogrithm, specify `tickValues` for precise control.","type":{"name":"number | undefined"},"defaultValue":{"value":"10"}},"lineStyle":{"name":"lineStyle","required":false,"description":"Styles to apply as grid line style.","type":{"name":"CSSProperties | undefined"}},"offset":{"name":"offset","required":false,"description":"Pixel offset to apply as a translation (y- for Rows, x- for Columns) to each grid lines.","type":{"name":"number | undefined"}},"scale":{"name":"scale","required":true,"description":"`@visx/scale` or `d3-scale` object used to convert value to position.","type":{"name":"Scale"}},"tickValues":{"name":"tickValues","required":false,"description":"Exact values used to generate grid lines using `scale`.\\nOverrides `numTicks` if specified.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"height":{"name":"height","required":true,"description":"Total height of each grid column line.","type":{"name":"number"}},"innerRef":{"name":"innerRef","required":false,"description":"reference to line element.","type":{"name":"Ref<SVGLineElement> | undefined"}},"fill":{"name":"fill","required":false,"description":"fill color applied to line element.","type":{"name":"string | undefined"}},"from":{"name":"from","required":false,"description":"Starting x,y point of the line.","type":{"name":"Point | undefined"}},"to":{"name":"to","required":false,"description":"Ending x,y point of the line.","type":{"name":"Point | undefined"}}},"filePath":"visx-grid/src/grids/GridColumns.tsx","lineNumber":30},"Grid":{"displayName":"Grid","kind":"component","props":{"className":{"name":"className","required":false,"description":"classname to apply to line group element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"reference to line element.","type":{"name":"Ref<SVGLineElement> | undefined"}},"fill":{"name":"fill","required":false,"description":"fill color applied to line element.","type":{"name":"string | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Grid line stroke color.","type":{"name":"string | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"Grid line stroke-dasharray attribute.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"Grid line stroke thickness.","type":{"name":"string | number | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"xScale":{"name":"xScale","required":true,"description":"`@visx/scale` or `d3-scale` object used to map from ScaleInput to x-coordinates (GridColumns).","type":{"name":"XScale"}},"yScale":{"name":"yScale","required":true,"description":"`@visx/scale` or `d3-scale` object used to map from ScaleInput to y-coordinates (GridRows).","type":{"name":"YScale"}},"xOffset":{"name":"xOffset","required":false,"description":"Pixel offset to apply as an x-translation to each GridColumns line.","type":{"name":"number | undefined"}},"yOffset":{"name":"yOffset","required":false,"description":"Pixel offset to apply as an y-translation to each GridRows line.","type":{"name":"number | undefined"}},"numTicksRows":{"name":"numTicksRows","required":false,"description":"Approximate number of row gridlines.","type":{"name":"number | undefined"}},"numTicksColumns":{"name":"numTicksColumns","required":false,"description":"Approximate number of column gridlines.","type":{"name":"number | undefined"}},"rowLineStyle":{"name":"rowLineStyle","required":false,"description":"Style object to apply to GridRows.","type":{"name":"CSSProperties | undefined"}},"columnLineStyle":{"name":"columnLineStyle","required":false,"description":"Style object to apply to GridColumns.","type":{"name":"CSSProperties | undefined"}},"rowTickValues":{"name":"rowTickValues","required":false,"description":"Exact values to be used for GridRows lines, passed to yScale. Use this if you need precise control over GridRows values.","type":{"name":"ScaleInput<YScale>[] | undefined"}},"columnTickValues":{"name":"columnTickValues","required":false,"description":"Exact values to be used for GridColumns lines, passed to xScale. Use this if you need precise control over GridColumns values.","type":{"name":"ScaleInput<XScale>[] | undefined"}}},"filePath":"visx-grid/src/grids/Grid.tsx","lineNumber":47},"polarToCartesian":{"displayName":"polarToCartesian","kind":"function","props":{},"parameters":[{"name":"{ radius, angle }","type":{"name":"PolarCoordinate"}}],"returnType":"CartesianCoordinate","filePath":"visx-grid/src/utils/polarToCartesian.ts","lineNumber":11},"GridAngle":{"displayName":"GridAngle","kind":"component","props":{"className":{"name":"className","required":false,"description":"classname to apply to line group element.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Optionally override rendering of grid lines.","type":{"name":"((props: { lines: GridLines; }) => ReactNode) | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"stroke":{"name":"stroke","required":false,"description":"Grid line stroke color.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#eaf0f6\'"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"Grid line stroke thickness.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"1"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"Grid line stroke-dasharray attribute.","type":{"name":"string | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"Approximate number of grid lines. Approximate due to d3 alogrithm, specify `tickValues` for precise control.","type":{"name":"number | undefined"},"defaultValue":{"value":"10"}},"lineStyle":{"name":"lineStyle","required":false,"description":"Styles to apply as grid line style.","type":{"name":"CSSProperties | undefined"}},"offset":{"name":"offset","required":false,"description":"Pixel offset to apply as a translation (y- for Rows, x- for Columns) to each grid lines.","type":{"name":"number | undefined"}},"scale":{"name":"scale","required":true,"description":"`@visx/scale` or `d3-scale` object used to convert value to angle.","type":{"name":"Scale"}},"tickValues":{"name":"tickValues","required":false,"description":"Exact values used to generate angle grid lines using `scale`.\\nOverrides `numTicks` if specified.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"innerRadius":{"name":"innerRadius","required":false,"description":"Radius which determines the start position of angle lines.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"outerRadius":{"name":"outerRadius","required":true,"description":"Radius which determines the end position of angle lines.","type":{"name":"number"},"defaultValue":{"value":"0"}},"lineClassName":{"name":"lineClassName","required":false,"description":"The class name applied to all angle lines.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"reference to line element.","type":{"name":"Ref<SVGLineElement> | undefined"}},"fill":{"name":"fill","required":false,"description":"fill color applied to line element.","type":{"name":"string | undefined"}},"from":{"name":"from","required":false,"description":"Starting x,y point of the line.","type":{"name":"Point | undefined"}},"to":{"name":"to","required":false,"description":"Ending x,y point of the line.","type":{"name":"Point | undefined"}}},"filePath":"visx-grid/src/grids/GridAngle.tsx","lineNumber":41},"GridRadial":{"displayName":"GridRadial","kind":"component","props":{"className":{"name":"className","required":false,"description":"classname to apply to line group element.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Optionally override rendering of grid lines.","type":{"name":"(((props: { lines: GridLines; }) => ReactNode) & (() => ReactNode)) | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"stroke":{"name":"stroke","required":false,"description":"Grid line stroke color.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#eaf0f6\'"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"Grid line stroke thickness.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"1"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"Grid line stroke-dasharray attribute.","type":{"name":"string | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"Approximate number of grid lines. Approximate due to d3 alogrithm, specify `tickValues` for precise control.","type":{"name":"number | undefined"},"defaultValue":{"value":"10"}},"lineStyle":{"name":"lineStyle","required":false,"description":"Styles to apply as grid line style.","type":{"name":"CSSProperties | undefined"}},"offset":{"name":"offset","required":false,"description":"Pixel offset to apply as a translation (y- for Rows, x- for Columns) to each grid lines.","type":{"name":"number | undefined"}},"scale":{"name":"scale","required":true,"description":"`@visx/scale` or `d3-scale` object used to convert value to position.","type":{"name":"Scale"}},"tickValues":{"name":"tickValues","required":false,"description":"Exact values used to generate grid lines using `scale`.\\nOverrides `numTicks` if specified.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"arcThickness":{"name":"arcThickness","required":false,"description":"If specified, the arc of each radial grid line will have this thickness, useful for fills.","type":{"name":"number | undefined"}},"endAngle":{"name":"endAngle","required":false,"description":"The end angle of the arc of radial grid lines in radians.","type":{"name":"number | undefined"},"defaultValue":{"value":"2 * Math.PI"}},"lineClassName":{"name":"lineClassName","required":false,"description":"The class name applied to all radial lines.","type":{"name":"string | undefined"}},"fill":{"name":"fill","required":false,"description":"The color applied to the fill of the radial lines.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'transparent\'"}},"fillOpacity":{"name":"fillOpacity","required":false,"description":"The fill opacity applied to the fill of the radial lines.","type":{"name":"number | undefined"},"defaultValue":{"value":"1"}},"startAngle":{"name":"startAngle","required":false,"description":"The start angle of the arc of radial grid lines in radians.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"innerRadius":{"name":"innerRadius","required":false,"description":"Number or accessor function which returns a number, which defines the arc innerRadius.","type":{"name":"number | Accessor<Datum, number> | undefined"}},"outerRadius":{"name":"outerRadius","required":false,"description":"Number or accessor function which returns a number, which defines the arc outerRadius.","type":{"name":"number | Accessor<Datum, number> | undefined"}},"data":{"name":"data","required":false,"description":"A Datum for which to generate an arc.","type":{"name":"Datum | undefined"}},"cornerRadius":{"name":"cornerRadius","required":false,"description":"Number or accessor function which returns a number, which defines the arc cornerRadius.","type":{"name":"number | Accessor<Datum, number> | undefined"}},"padAngle":{"name":"padAngle","required":false,"description":"Number or accessor function which returns a number, which defines the arc padAngle.","type":{"name":"number | Accessor<Datum, number> | undefined"}},"padRadius":{"name":"padRadius","required":false,"description":"Number or accessor function which returns a number, which defines the arc padRadius.","type":{"name":"number | Accessor<Datum, number> | undefined"}}},"filePath":"visx-grid/src/grids/GridRadial.tsx","lineNumber":55},"GridPolar":{"displayName":"GridPolar","kind":"component","props":{"className":{"name":"className","required":false,"description":"classname to apply to line group element.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Optionally override rendering of grid lines.","type":{"name":"((props: { lines: GridLines; }) => ReactNode) | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Grid line stroke color.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"Grid line stroke thickness.","type":{"name":"string | number | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"Grid line stroke-dasharray attribute.","type":{"name":"string | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"Approximate number of grid lines. Approximate due to d3 alogrithm, specify `tickValues` for precise control.","type":{"name":"number | undefined"}},"lineStyle":{"name":"lineStyle","required":false,"description":"Styles to apply as grid line style.","type":{"name":"CSSProperties | undefined"}},"offset":{"name":"offset","required":false,"description":"Pixel offset to apply as a translation (y- for Rows, x- for Columns) to each grid lines.","type":{"name":"number | undefined"}},"arcThickness":{"name":"arcThickness","required":false,"description":"If specified, the arc of each radial grid line will have this thickness, useful for fills.","type":{"name":"number | undefined"}},"classNameAngle":{"name":"classNameAngle","required":false,"description":"The class name applied to the angle grid group.","type":{"name":"string | undefined"}},"classNameRadial":{"name":"classNameRadial","required":false,"description":"The class name applied to the radial grid group.","type":{"name":"string | undefined"}},"endAngle":{"name":"endAngle","required":false,"description":"The end angle of the arc of radial grid lines in radians.","type":{"name":"number | undefined"}},"fillRadial":{"name":"fillRadial","required":false,"description":"The color applied to the fill of the radial lines.","type":{"name":"string | undefined"}},"innerRadius":{"name":"innerRadius","required":false,"description":"Radius which determines the start position of angle lines.","type":{"name":"number | undefined"}},"lineClassNameAngle":{"name":"lineClassNameAngle","required":false,"description":"Classname applied to all angle line paths.","type":{"name":"string | undefined"}},"lineClassNameRadial":{"name":"lineClassNameRadial","required":false,"description":"Classname applied to all radial line paths.","type":{"name":"string | undefined"}},"lineStyleAngle":{"name":"lineStyleAngle","required":false,"description":"Style object set as the angle line path style attribute.","type":{"name":"(CSSProperties & LineProps & Omit<SVGProps<SVGLineElement>, keyof LineProps>) | undefined"}},"lineStyleRadial":{"name":"lineStyleRadial","required":false,"description":"Style object set as the radius line path style attribute.","type":{"name":"(CSSProperties & LineProps & Omit<SVGProps<SVGLineElement>, keyof LineProps>) | undefined"}},"numTicksAngle":{"name":"numTicksAngle","required":false,"description":"The number of angle ticks wanted for the grid. Note this is approximate due to d3\'s algorithm,\\nyou can use tickValues for greater control","type":{"name":"number | undefined"}},"numTicksRadial":{"name":"numTicksRadial","required":false,"description":"The number of radial ticks wanted for the grid. Note this is approximate due to d3\'s algorithm,\\nyou can use tickValues for greater control","type":{"name":"number | undefined"}},"outerRadius":{"name":"outerRadius","required":true,"description":"Radius which determines the end position of angle lines.","type":{"name":"number"}},"scaleAngle":{"name":"scaleAngle","required":true,"description":"A [d3](https://github.com/d3/d3-scale) or [visx](https://github.com/airbnb/visx/tree/master/packages/visx-scale)\\nscale function used to generate the angle of angle lines.","type":{"name":"Scale"}},"scaleRadial":{"name":"scaleRadial","required":true,"description":"A [d3](https://github.com/d3/d3-scale) or [visx](https://github.com/airbnb/visx/tree/master/packages/visx-scale)\\nscale function used to generate the radius of radial lines.","type":{"name":"Scale"}},"startAngle":{"name":"startAngle","required":false,"description":"The start angle of the arc of radial grid lines in radians.","type":{"name":"number | undefined"}},"strokeAngle":{"name":"strokeAngle","required":false,"description":"The color applied to the stroke of the angle lines.","type":{"name":"string | undefined"}},"strokeRadial":{"name":"strokeRadial","required":false,"description":"The color applied to the stroke of the radial lines.","type":{"name":"string | undefined"}},"strokeDasharrayAngle":{"name":"strokeDasharrayAngle","required":false,"description":"The pattern of dashes for angle line stroke.","type":{"name":"string | undefined"}},"strokeDasharrayRadial":{"name":"strokeDasharrayRadial","required":false,"description":"The pattern of dashes for angle radial stroke.","type":{"name":"string | undefined"}},"strokeWidthAngle":{"name":"strokeWidthAngle","required":false,"description":"The pixel value for the width of the angle lines.","type":{"name":"string | number | undefined"}},"strokeWidthRadial":{"name":"strokeWidthRadial","required":false,"description":"The pixel value for the width of the radial lines.","type":{"name":"string | number | undefined"}},"tickValuesAngle":{"name":"tickValuesAngle","required":false,"description":"An array of values that determine the number and values of the angle ticks. Falls\\nback to `scale.ticks()` or `.domain()`.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"tickValuesRadial":{"name":"tickValuesRadial","required":false,"description":"An array of values that determine the number and values of the radial ticks. Falls\\nback to `scale.ticks()` or `.domain()`.","type":{"name":"ScaleInput<Scale>[] | undefined"}}},"filePath":"visx-grid/src/grids/GridPolar.tsx","lineNumber":128}},"@visx/group":{"Group":{"displayName":"Group","kind":"component","props":{"top":{"name":"top","required":false,"description":"Top offset applied to `<g/>`.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"left":{"name":"left","required":false,"description":"Left offset applied to `<g/>`.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"transform":{"name":"transform","required":false,"description":"Override `top` and `left` to provide the entire `transform` string.","type":{"name":"string | undefined"}},"className":{"name":"className","required":false,"description":"className to apply to `<g/>`.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"type":{"name":"ReactNode"}},"innerRef":{"name":"innerRef","required":false,"description":"ref to underlying `<g/>`.","type":{"name":"Ref<SVGGElement> | undefined"}}},"filePath":"visx-group/src/Group.tsx","lineNumber":18}},"@visx/heatmap":{"HeatmapCircle":{"displayName":"HeatmapCircle","kind":"component","props":{"data":{"name":"data","required":false,"description":"Array of column data (one per column desired) for the heatmap.","type":{"name":"ColumnDatum[] | undefined"},"defaultValue":{"value":"[]"}},"left":{"name":"left","required":false,"description":"Left offset applied to heatmap wrapper g element.","type":{"name":"number | undefined"}},"top":{"name":"top","required":false,"description":"Top offset applied to heatmap wrapper g element.","type":{"name":"number | undefined"}},"gap":{"name":"gap","required":false,"description":"Pixel gap between heatmap circles.","type":{"name":"number | undefined"},"defaultValue":{"value":"1"}},"radius":{"name":"radius","required":false,"description":"Pixel radius of heatmap circles.","type":{"name":"number | undefined"},"defaultValue":{"value":"6"}},"xScale":{"name":"xScale","required":true,"description":"Given a column index, returns the x position of a circle cell.","type":{"name":"(columnIndex: number) => number"}},"yScale":{"name":"yScale","required":true,"description":"Given a row index, returns the y position of a circle cell.","type":{"name":"(rowIndex: number) => number"}},"colorScale":{"name":"colorScale","required":false,"description":"Given a count value, returns the desired circle fill color.","type":{"name":"ColorScale | undefined"},"defaultValue":{"value":"() => undefined"}},"opacityScale":{"name":"opacityScale","required":false,"description":"Given a count value, returns the desired circle fill opacity.","type":{"name":"OpacityScale | undefined"},"defaultValue":{"value":"() => 1"}},"bins":{"name":"bins","required":false,"description":"Accessor that returns an array of cell BinDatums (rows) for the provided ColumnData.","type":{"name":"((column: ColumnDatum) => BinDatum[]) | undefined"},"defaultValue":{"value":"(column: any) => column?.bins"}},"count":{"name":"count","required":false,"description":"Accessor that returns the count for the provided Bin.","type":{"name":"((bin: BinDatum) => number) | undefined"},"defaultValue":{"value":"(cell: any) => cell?.count"}},"className":{"name":"className","required":false,"description":"className to apply to each heatmap circle element.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Render function override, provided with heatmap.","type":{"name":"((cells: CircleCell<ColumnDatum, BinDatum>[][]) => ReactNode) | undefined"}}},"filePath":"visx-heatmap/src/heatmaps/HeatmapCircle.tsx","lineNumber":46},"HeatmapRect":{"displayName":"HeatmapRect","kind":"component","props":{"data":{"name":"data","required":false,"description":"Array of column data (one per column desired) for the heatmap.","type":{"name":"ColumnDatum[] | undefined"},"defaultValue":{"value":"[]"}},"left":{"name":"left","required":false,"description":"Left offset applied to heatmap wrapper g element.","type":{"name":"number | undefined"}},"top":{"name":"top","required":false,"description":"Top offset applied to heatmap wrapper g element.","type":{"name":"number | undefined"}},"binWidth":{"name":"binWidth","required":false,"description":"Width of a rect bin.","type":{"name":"number | undefined"},"defaultValue":{"value":"6"}},"binHeight":{"name":"binHeight","required":false,"description":"Height of a rect bin.","type":{"name":"number | undefined"},"defaultValue":{"value":"6"}},"x0":{"name":"x0","required":false,"type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"gap":{"name":"gap","required":false,"description":"Pixel gap between heatmap rects.","type":{"name":"number | undefined"},"defaultValue":{"value":"1"}},"xScale":{"name":"xScale","required":true,"description":"Given a column index, returns the x position of a rect cell.","type":{"name":"(columnIndex: number) => number"}},"yScale":{"name":"yScale","required":true,"description":"Given a row index, returns the y position of a rect cell.","type":{"name":"(rowIndex: number) => number"}},"colorScale":{"name":"colorScale","required":false,"description":"Given a count value, returns the desired rect fill color.","type":{"name":"ColorScale | undefined"},"defaultValue":{"value":"() => undefined"}},"opacityScale":{"name":"opacityScale","required":false,"description":"Given a count value, returns the desired rect fill opacity.","type":{"name":"OpacityScale | undefined"},"defaultValue":{"value":"() => 1"}},"bins":{"name":"bins","required":false,"description":"Accessor that returns an array of cell BinDatums (rows) for the provided ColumnData.","type":{"name":"((column: ColumnDatum) => BinDatum[]) | undefined"},"defaultValue":{"value":"(d: any) => d?.bins"}},"count":{"name":"count","required":false,"description":"Accessor that returns the count for the provided Bin.","type":{"name":"((bin: BinDatum) => number) | undefined"},"defaultValue":{"value":"(d: any) => d?.count"}},"className":{"name":"className","required":false,"description":"className to apply to each heatmap rect element.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Render function override, provided with heatmap.","type":{"name":"((cells: RectCell<ColumnDatum, BinDatum>[][]) => ReactNode) | undefined"}}},"filePath":"visx-heatmap/src/heatmaps/HeatmapRect.tsx","lineNumber":62}},"@visx/hierarchy":{"HierarchyDefaultLink":{"displayName":"HierarchyDefaultLink","kind":"component","props":{"link":{"name":"link","required":false,"type":{"name":"{ source: Node; target: Node; } | undefined"},"defaultValue":{"value":"DEFAULT_LINK"}}},"filePath":"visx-hierarchy/src/HierarchyDefaultLink.tsx","lineNumber":11},"HierarchyDefaultNode":{"displayName":"HierarchyDefaultNode","kind":"component","props":{"node":{"name":"node","required":false,"type":{"name":"{ x: number; y: number; r?: number | undefined; } | undefined"},"defaultValue":{"value":"{ x: 0, y: 0, r: 15 }"}}},"filePath":"visx-hierarchy/src/HierarchyDefaultNode.tsx","lineNumber":7},"HierarchyDefaultRectNode":{"displayName":"HierarchyDefaultRectNode","kind":"component","props":{"node":{"name":"node","required":true,"type":{"name":"{ x0: number; x1: number; y0: number; y1: number; }"}}},"filePath":"visx-hierarchy/src/HierarchyDefaultRectNode.tsx","lineNumber":7},"Tree":{"displayName":"Tree","kind":"component","props":{"root":{"name":"root","required":true,"description":"The root hierarchy node from which to derive the tree layout.","type":{"name":"HierarchyNode<Datum>"}},"children":{"name":"children","required":false,"description":"Render override function which is passed the computed cluster layout data.","type":{"name":"((pack: HierarchyPointNode<Datum>) => ReactNode) | undefined"}},"top":{"name":"top","required":false,"description":"top offset applied to the g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"left offset applied to the g element container.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"className applied to the g element container.","type":{"name":"string | undefined"}},"size":{"name":"size","required":false,"description":"Sets this tree layout’s size to the specified two-element array of numbers `[width, height]`.\\nThis is an arbitrary coordinate system, e.g., for a radial layout, a size of `[360, radius]`\\ncorresponds to a breadth of 360\xb0 and a depth of radius.","type":{"name":"[number, number] | undefined"}},"nodeSize":{"name":"nodeSize","required":false,"description":"Sets this tree layout’s node size to the specified two-element array of numbers `[width, height]`.\\nIf unset, layout size is used instead.  When a node size is specified, the root node is always\\npositioned at `⟨0, 0⟩`.","type":{"name":"[number, number] | undefined"}},"separation":{"name":"separation","required":false,"description":"Sets the layout\'s separation accessor used to determine the separation of neighboring nodes.\\nSee https://github.com/d3/d3-hierarchy/blob/master/README.md#tree_separation for more.","type":{"name":"((a: HierarchyPointNode<Datum>, b: HierarchyPointNode<Datum>) => number) | undefined"}},"linkComponent":{"name":"linkComponent","required":false,"description":"Component which renders a single cluster link, passed the link object.","type":{"name":"FunctionComponent<LinkComponentProps<Datum>> | ComponentClass<LinkComponentProps<Datum>, any> | undefined"},"defaultValue":{"value":"DefaultLink"}},"nodeComponent":{"name":"nodeComponent","required":false,"description":"Component which renders a single cluster node, passed the node object.","type":{"name":"FunctionComponent<NodeComponentProps<Datum>> | ComponentClass<NodeComponentProps<Datum>, any> | undefined"},"defaultValue":{"value":"DefaultNode"}}},"filePath":"visx-hierarchy/src/hierarchies/Tree.tsx","lineNumber":50},"setNumberOrNumberAccessor":{"displayName":"setNumberOrNumberAccessor","description":"This is a workaround for TypeScript not inferring the correct\\nmethod overload/signature for some d3 shape methods.","kind":"function","props":{},"parameters":[{"name":"func","type":{"name":"(d: number | NumAccessor) => void"}},{"name":"value","type":{"name":"number | NumAccessor"}}],"filePath":"visx-hierarchy/src/utils/setNumOrNumAccessor.ts","lineNumber":5},"Treemap":{"displayName":"Treemap","kind":"component","props":{"root":{"name":"root","required":true,"description":"The root hierarchy node from which to derive the treemap layout.","type":{"name":"HierarchyNode<Datum>"}},"children":{"name":"children","required":false,"description":"Render override function which is passed the computed pack layout data.","type":{"name":"((pack: HierarchyRectangularNode<Datum>) => ReactNode) | undefined"}},"top":{"name":"top","required":false,"description":"top offset applied to the g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"left offset applied to the g element container.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"className applied to the g element container.","type":{"name":"string | undefined"}},"tile":{"name":"tile","required":false,"description":"Sets the treemap tiling method to the specified function (exported from this package).\\nSee https://github.com/d3/d3-hierarchy#treemap for more.","type":{"name":"TileMethod<Datum> | undefined"}},"size":{"name":"size","required":false,"description":"Sets this treemap layout’s size to the specified two-element array of numbers [width, height]","type":{"name":"[number, number] | undefined"}},"round":{"name":"round","required":false,"description":"Whether to round treemap values.","type":{"name":"boolean | undefined"}},"padding":{"name":"padding","required":false,"description":"Sets both inner and outer padding to the specified number or accessor.","type":{"name":"NumerOrNumberAccessor<Datum> | undefined"}},"paddingInner":{"name":"paddingInner","required":false,"description":"Sets padding used to separate a node’s adjacent children.","type":{"name":"NumerOrNumberAccessor<Datum> | undefined"}},"paddingOuter":{"name":"paddingOuter","required":false,"description":"Sets padding used to spearate a node from its children.","type":{"name":"NumerOrNumberAccessor<Datum> | undefined"}},"paddingTop":{"name":"paddingTop","required":false,"description":"Sets padding used to spearate the top edge of a node from its children.","type":{"name":"NumerOrNumberAccessor<Datum> | undefined"}},"paddingRight":{"name":"paddingRight","required":false,"description":"Sets padding used to spearate the right edge of a node from its children.","type":{"name":"NumerOrNumberAccessor<Datum> | undefined"}},"paddingBottom":{"name":"paddingBottom","required":false,"description":"Sets padding used to spearate the bottom edge of a node from its children.","type":{"name":"NumerOrNumberAccessor<Datum> | undefined"}},"paddingLeft":{"name":"paddingLeft","required":false,"description":"Sets padding used to spearate the left edge of a node from its children.","type":{"name":"NumerOrNumberAccessor<Datum> | undefined"}},"nodeComponent":{"name":"nodeComponent","required":false,"description":"Component which renders a single pack node, passed the node object.","type":{"name":"FunctionComponent<NodeComponentProps<Datum>> | ComponentClass<NodeComponentProps<Datum>, any> | undefined"},"defaultValue":{"value":"HierarchyDefaultRectNode"}}},"filePath":"visx-hierarchy/src/hierarchies/Treemap.tsx","lineNumber":55},"Cluster":{"displayName":"Cluster","kind":"component","props":{"root":{"name":"root","required":true,"description":"The root hierarchy node from which to derive the treemap layout.","type":{"name":"HierarchyNode<Datum>"}},"children":{"name":"children","required":false,"description":"Render override function which is passed the computed cluster layout data.","type":{"name":"((pack: HierarchyPointNode<Datum>) => ReactNode) | undefined"}},"top":{"name":"top","required":false,"description":"top offset applied to the g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"left offset applied to the g element container.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"className applied to the g element container.","type":{"name":"string | undefined"}},"size":{"name":"size","required":false,"description":"Sets this cluster layout’s size to the specified two-element array of numbers `[width, height]`.\\nThis is an arbitrary coordinate system, e.g., for a radial layout, a size of `[360, radius]`\\ncorresponds to a breadth of 360\xb0 and a depth of radius.","type":{"name":"[number, number] | undefined"}},"nodeSize":{"name":"nodeSize","required":false,"description":"Sets this cluster layout’s node size to the specified two-element array of numbers `[width, height]`.\\nIf unset, layout size is used instead.  When a node size is specified, the root node is always\\npositioned at `⟨0, 0⟩`.","type":{"name":"[number, number] | undefined"}},"separation":{"name":"separation","required":false,"description":"Sets the separation accessor, used to separate neighboring leaves.","type":{"name":"((a: HierarchyPointNode<Datum>, b: HierarchyPointNode<Datum>) => number) | undefined"}},"linkComponent":{"name":"linkComponent","required":false,"description":"Component which renders a single cluster link, passed the link object.","type":{"name":"FunctionComponent<LinkComponentProps<Datum>> | ComponentClass<LinkComponentProps<Datum>, any> | undefined"},"defaultValue":{"value":"DefaultLink"}},"nodeComponent":{"name":"nodeComponent","required":false,"description":"Component which renders a single cluster node, passed the node object.","type":{"name":"FunctionComponent<NodeComponentProps<Datum>> | ComponentClass<NodeComponentProps<Datum>, any> | undefined"},"defaultValue":{"value":"DefaultNode"}}},"filePath":"visx-hierarchy/src/hierarchies/Cluster.tsx","lineNumber":47},"Pack":{"displayName":"Pack","kind":"component","props":{"root":{"name":"root","required":true,"description":"The root hierarchy node from which to derive the pack layout.","type":{"name":"HierarchyNode<Datum>"}},"children":{"name":"children","required":false,"description":"Render override function which is passed the computed pack layout data.","type":{"name":"((pack: HierarchyCircularNode<Datum>) => ReactNode) | undefined"}},"top":{"name":"top","required":false,"description":"top offset applied to the g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"left offset applied to the g element container.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"className applied to the g element container.","type":{"name":"string | undefined"}},"radius":{"name":"radius","required":false,"description":"Radius accessor function which defines the radius of each leaf node.\\nIf the radius accessor is null, the radius of each leaf circle is derived\\nfrom the leaf node.value, and scaled proportionally to fit within\\nthe defined layout `size`.","type":{"name":"((node: HierarchyNode<Datum>) => number) | undefined"}},"size":{"name":"size","required":false,"description":"Sets the pack layout size to the defined [width, height].","type":{"name":"[number, number] | undefined"}},"padding":{"name":"padding","required":false,"description":"Sets this pack layout’s padding accessor to the specified number or function,\\nwhich determines approximate separation of nodes in the resulting pack.","type":{"name":"number | undefined"}},"nodeComponent":{"name":"nodeComponent","required":false,"description":"Component which renders a single pack node, passed the node object.","type":{"name":"FunctionComponent<NodeComponentProps<Datum>> | ComponentClass<NodeComponentProps<Datum>, any> | undefined"},"defaultValue":{"value":"DefaultNode"}}},"filePath":"visx-hierarchy/src/hierarchies/Pack.tsx","lineNumber":41},"Partition":{"displayName":"Partition","kind":"component","props":{"root":{"name":"root","required":true,"description":"The root hierarchy node from which to derive the treemap layout.","type":{"name":"HierarchyNode<Datum>"}},"children":{"name":"children","required":false,"description":"Render override function which is passed the computed partition layout data.","type":{"name":"((pack: HierarchyRectangularNode<Datum>) => ReactNode) | undefined"}},"top":{"name":"top","required":false,"description":"top offset applied to the g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"left offset applied to the g element container.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"className applied to the g element container.","type":{"name":"string | undefined"}},"size":{"name":"size","required":false,"description":"Sets this partition layout’s size to the specified two-element array of numbers `[width, height]` .","type":{"name":"[number, number] | undefined"}},"round":{"name":"round","required":false,"description":"Whether partition layout rounds values.","type":{"name":"boolean | undefined"}},"padding":{"name":"padding","required":false,"description":"Sets padding, used to separate a node’s adjacent children.","type":{"name":"number | undefined"}},"nodeComponent":{"name":"nodeComponent","required":false,"description":"Component which renders a single cluster node, passed the node object.","type":{"name":"FunctionComponent<NodeComponentProps<Datum>> | ComponentClass<NodeComponentProps<Datum>, any> | undefined"},"defaultValue":{"value":"DefaultNode"}}},"filePath":"visx-hierarchy/src/hierarchies/Partition.tsx","lineNumber":33}},"@visx/legend":{"LegendItem":{"displayName":"LegendItem","kind":"component","props":{"flexDirection":{"name":"flexDirection","required":false,"description":"Flex direction for the legend item layout. Determines if the shape and label are arranged horizontally or vertically.","type":{"name":"FlexDirection | undefined"},"defaultValue":{"value":"\'row\'"}},"alignItems":{"name":"alignItems","required":false,"description":"CSS align-items property for vertical alignment of the legend item contents.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'center\'"}},"margin":{"name":"margin","required":false,"description":"Margin around the legend item.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"\'0\'"}},"children":{"name":"children","required":false,"description":"Child elements to render inside the legend item (typically LegendShape and LegendLabel).","type":{"name":"ReactNode"}},"display":{"name":"display","required":false,"description":"CSS display property for the legend item.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'flex\'"}}},"filePath":"visx-legend/src/legends/Legend/LegendItem.tsx","lineNumber":17},"LegendLabel":{"displayName":"LegendLabel","kind":"component","props":{"align":{"name":"align","required":false,"description":"Horizontal alignment of the label text. Maps to CSS justify-content property.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'left\'"}},"label":{"name":"label","required":false,"description":"The label content to display. Can be a string or any React node.","type":{"name":"ReactNode"}},"flex":{"name":"flex","required":false,"description":"CSS flex property controlling how the label grows/shrinks in the legend item.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"\'1\'"}},"margin":{"name":"margin","required":false,"description":"Margin around the label.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"\'5px 0\'"}},"children":{"name":"children","required":false,"description":"Child elements to render. If provided, overrides the label prop.","type":{"name":"ReactNode"}}},"filePath":"visx-legend/src/legends/Legend/LegendLabel.tsx","lineNumber":19},"ShapeRect":{"displayName":"ShapeRect","kind":"component","props":{"fill":{"name":"fill","required":false,"description":"The fill color for the rectangle.","type":{"name":"string | undefined"}},"width":{"name":"width","required":false,"description":"Width of the rectangle.","type":{"name":"string | number | undefined"}},"height":{"name":"height","required":false,"description":"Height of the rectangle.","type":{"name":"string | number | undefined"}},"style":{"name":"style","required":false,"description":"Additional CSS styles to apply to the rectangle.","type":{"name":"CSSProperties | undefined"}}},"filePath":"visx-legend/src/shapes/Rect.tsx","lineNumber":14},"ShapeCircle":{"displayName":"ShapeCircle","kind":"component","props":{"fill":{"name":"fill","required":false,"description":"The fill color for the circle.","type":{"name":"string | undefined"}},"width":{"name":"width","required":false,"description":"Width of the container. The circle radius is derived from max(width, height).","type":{"name":"string | number | undefined"}},"height":{"name":"height","required":false,"description":"Height of the container. The circle radius is derived from max(width, height).","type":{"name":"string | number | undefined"}},"style":{"name":"style","required":false,"description":"Additional CSS styles to apply to the circle.","type":{"name":"CSSProperties | undefined"}}},"filePath":"visx-legend/src/shapes/Circle.tsx","lineNumber":15},"ShapeLine":{"displayName":"ShapeLine","kind":"component","props":{"fill":{"name":"fill","required":false,"description":"The stroke color for the line. Note: Despite the name, this is used as the stroke, not fill.","type":{"name":"string | undefined"}},"width":{"name":"width","required":false,"description":"Width of the line.","type":{"name":"string | number | undefined"}},"height":{"name":"height","required":false,"description":"Height of the container. The line is vertically centered.","type":{"name":"string | number | undefined"}},"style":{"name":"style","required":false,"description":"Additional CSS styles to apply to the line. The strokeWidth from style is used for line thickness.","type":{"name":"CSSProperties | undefined"}}},"filePath":"visx-legend/src/shapes/Line.tsx","lineNumber":15},"renderShape":{"displayName":"renderShape","kind":"function","props":{},"parameters":[{"name":"{\\n  shape = \'rect\',\\n  fill = NO_OP,\\n  size = NO_OP,\\n  width,\\n  height,\\n  label,\\n  item,\\n  itemIndex,\\n  shapeStyle = NO_OP,\\n}","type":{"name":"RenderShapeArgs<Data, Output>"}}],"filePath":"visx-legend/src/util/renderShape.ts","lineNumber":29},"LegendShape":{"displayName":"LegendShape","kind":"component","props":{"label":{"name":"label","required":true,"description":"The formatted label object containing datum, index, text, and optional value","type":{"name":"{ datum: Data; index: number; text: string; value?: Output | undefined; }"}},"item":{"name":"item","required":true,"description":"The data item for this legend entry","type":{"name":"Data"}},"itemIndex":{"name":"itemIndex","required":true,"description":"The index of this item in the legend","type":{"name":"number"}},"margin":{"name":"margin","required":false,"description":"Margin around the shape","type":{"name":"string | number | undefined"}},"shape":{"name":"shape","required":false,"description":"The shape component or function to render. Defaults to ShapeRect if not provided.","type":{"name":"LegendShape<Data, Output> | undefined"},"defaultValue":{"value":"ShapeRect"}},"fill":{"name":"fill","required":false,"description":"Accessor function for the fill color of the shape","type":{"name":"FillAccessor<Data, Output> | undefined"}},"size":{"name":"size","required":false,"description":"Accessor function for the size of the shape","type":{"name":"SizeAccessor<Data, Output> | undefined"}},"shapeStyle":{"name":"shapeStyle","required":false,"description":"Accessor function for additional shape styling","type":{"name":"ShapeStyleAccessor<Data, Output> | undefined"}},"width":{"name":"width","required":false,"description":"Width of the shape container","type":{"name":"string | number | undefined"}},"height":{"name":"height","required":false,"description":"Height of the shape container","type":{"name":"string | number | undefined"}}},"filePath":"visx-legend/src/legends/Legend/LegendShape.tsx","lineNumber":35},"valueOrIdentity":{"displayName":"valueOrIdentity","description":"Returns an object\'s value if defined, or the object.","kind":"function","props":{},"parameters":[{"name":"_","type":{"name":"ValueOrIdentity<T>"}}],"returnType":"T","filePath":"visx-legend/src/util/valueOrIdentity.ts","lineNumber":4},"valueOrIdentityString":{"displayName":"valueOrIdentityString","description":"Returns an object\'s value if defined, or the object, coerced to a string.","kind":"function","props":{},"parameters":[{"name":"_","type":{"name":"ValueOrIdentity<T>"}}],"returnType":"string","filePath":"visx-legend/src/util/valueOrIdentity.ts","lineNumber":10},"labelTransformFactory":{"displayName":"labelTransformFactory","description":"Returns a function which takes a Datum and index as input, and returns a formatted label object.","kind":"function","props":{},"parameters":[{"name":"{\\n  scale,\\n  labelFormat,\\n}","type":{"name":"{ scale: Scale; labelFormat: LabelFormatter<ScaleInput<Scale>>; }"}}],"returnType":"ItemTransformer<ScaleInput<Scale>, ReturnType<Scale>>","filePath":"visx-legend/src/util/labelTransformFactory.ts","lineNumber":5},"Legend":{"displayName":"Legend","kind":"component","props":{"children":{"name":"children","required":false,"description":"Optional render function override.","type":{"name":"((labels: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }[]) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"Classname to be applied to legend container.","type":{"name":"string | undefined"}},"style":{"name":"style","required":false,"description":"Styles to be applied to the legend container.","type":{"name":"CSSProperties | undefined"},"defaultValue":{"value":"defaultStyle"}},"domain":{"name":"domain","required":false,"description":"Legend domain.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"shapeWidth":{"name":"shapeWidth","required":false,"description":"Width of the legend shape.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"15"}},"shapeHeight":{"name":"shapeHeight","required":false,"description":"Height of the legend shape.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"15"}},"shapeMargin":{"name":"shapeMargin","required":false,"description":"Margin of the legend shape.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"\'2px 4px 2px 0\'"}},"labelAlign":{"name":"labelAlign","required":false,"description":"Flex-box alignment of legend item labels.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'left\'"}},"scale":{"name":"scale","required":true,"description":"`@visx/scale` or `d3-scale` object used to generate the legend items.","type":{"name":"Scale"}},"labelFlex":{"name":"labelFlex","required":false,"description":"Flex-box flex of legend item labels.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"\'1\'"}},"labelMargin":{"name":"labelMargin","required":false,"description":"Margin of legend item labels.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"\'0 4px\'"}},"itemMargin":{"name":"itemMargin","required":false,"description":"Margin of legend items.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"\'0\'"}},"direction":{"name":"direction","required":false,"description":"Flex direction of the legend itself.","type":{"name":"FlexDirection | undefined"},"defaultValue":{"value":"\'column\'"}},"itemDirection":{"name":"itemDirection","required":false,"description":"Flex direction of legend items.","type":{"name":"FlexDirection | undefined"},"defaultValue":{"value":"\'row\'"}},"fill":{"name":"fill","required":false,"description":"Legend item fill accessor function.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => string | undefined) | undefined"},"defaultValue":{"value":"valueOrIdentityString"}},"size":{"name":"size","required":false,"description":"Legend item size accessor function.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => string | number | undefined) | undefined"},"defaultValue":{"value":"valueOrIdentityString"}},"shape":{"name":"shape","required":false,"description":"Legend shape string preset or Element or Component.","type":{"name":"LegendShape<ScaleInput<Scale>, ReturnType<Scale>> | undefined"}},"shapeStyle":{"name":"shapeStyle","required":false,"description":"Styles applied to legend shapes.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => CSSProperties) | undefined"}},"labelFormat":{"name":"labelFormat","required":false,"description":"Given a legend item and its index, returns an item label.","type":{"name":"LabelFormatter<ScaleInput<Scale>> | undefined"},"defaultValue":{"value":"valueOrIdentity"}},"labelTransform":{"name":"labelTransform","required":false,"description":"Given the legend scale and labelFormatter, returns a label with datum, index, value, and label.","type":{"name":"LabelFormatterFactory<Scale> | undefined"},"defaultValue":{"value":"labelTransformFactory"}},"legendLabelProps":{"name":"legendLabelProps","required":false,"description":"Additional props to be set on LegendLabel.","type":{"name":"Partial<LegendLabelProps> | undefined"}}},"filePath":"visx-legend/src/legends/Legend/index.tsx","lineNumber":69},"identity":{"displayName":"identity","kind":"function","props":{},"parameters":[{"name":"x","type":{"name":"T"}}],"filePath":"visx-legend/src/util/identity.ts","lineNumber":1},"defaultDomain":{"displayName":"defaultDomain","kind":"function","props":{},"parameters":[{"name":"{\\n  steps = 5,\\n  scale,\\n}","type":{"name":"{ steps: number; scale: Scale; }"}}],"filePath":"visx-legend/src/util/defaultDomain.ts","lineNumber":3},"LegendQuantile":{"displayName":"LegendQuantile","description":"A Quantile scale takes a number input and returns an Output.","kind":"component","props":{"children":{"name":"children","required":false,"description":"Optional render function override.","type":{"name":"((labels: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }[]) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"Classname to be applied to legend container.","type":{"name":"string | undefined"}},"style":{"name":"style","required":false,"description":"Styles to be applied to the legend container.","type":{"name":"CSSProperties | undefined"}},"domain":{"name":"domain","required":false,"description":"Legend domain.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"shapeWidth":{"name":"shapeWidth","required":false,"description":"Width of the legend shape.","type":{"name":"string | number | undefined"}},"shapeHeight":{"name":"shapeHeight","required":false,"description":"Height of the legend shape.","type":{"name":"string | number | undefined"}},"shapeMargin":{"name":"shapeMargin","required":false,"description":"Margin of the legend shape.","type":{"name":"string | number | undefined"}},"labelAlign":{"name":"labelAlign","required":false,"description":"Flex-box alignment of legend item labels.","type":{"name":"string | undefined"}},"scale":{"name":"scale","required":true,"description":"`@visx/scale` or `d3-scale` object used to generate the legend items.","type":{"name":"Scale"}},"labelFlex":{"name":"labelFlex","required":false,"description":"Flex-box flex of legend item labels.","type":{"name":"string | number | undefined"}},"labelMargin":{"name":"labelMargin","required":false,"description":"Margin of legend item labels.","type":{"name":"string | number | undefined"}},"itemMargin":{"name":"itemMargin","required":false,"description":"Margin of legend items.","type":{"name":"string | number | undefined"}},"direction":{"name":"direction","required":false,"description":"Flex direction of the legend itself.","type":{"name":"FlexDirection | undefined"}},"itemDirection":{"name":"itemDirection","required":false,"description":"Flex direction of legend items.","type":{"name":"FlexDirection | undefined"}},"fill":{"name":"fill","required":false,"description":"Legend item fill accessor function.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => string | undefined) | undefined"}},"size":{"name":"size","required":false,"description":"Legend item size accessor function.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => string | number | undefined) | undefined"}},"shape":{"name":"shape","required":false,"description":"Legend shape string preset or Element or Component.","type":{"name":"LegendShape<ScaleInput<Scale>, ReturnType<Scale>> | undefined"}},"shapeStyle":{"name":"shapeStyle","required":false,"description":"Styles applied to legend shapes.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => CSSProperties) | undefined"}},"labelFormat":{"name":"labelFormat","required":false,"description":"Given a legend item and its index, returns an item label.","type":{"name":"LabelFormatter<ScaleInput<Scale>> | undefined"},"defaultValue":{"value":"identity"}},"labelTransform":{"name":"labelTransform","required":false,"description":"Given the legend scale and labelFormatter, returns a label with datum, index, value, and label.","type":{"name":"LabelFormatterFactory<Scale> | undefined"}},"legendLabelProps":{"name":"legendLabelProps","required":false,"description":"Additional props to be set on LegendLabel.","type":{"name":"Partial<LegendLabelProps> | undefined"}},"labelDelimiter":{"name":"labelDelimiter","required":false,"description":"The delimiter string to use between the min and max values in the label (e.g., \'-\' renders as \'0 - 10\').","type":{"name":"string | undefined"},"defaultValue":{"value":"\'-\'"}}},"filePath":"visx-legend/src/legends/Quantile.tsx","lineNumber":35},"LegendLinear":{"displayName":"LegendLinear","description":"Linear scales map from continuous inputs to continuous outputs.","kind":"component","props":{"steps":{"name":"steps","required":false,"description":"Number of discrete steps to show in the legend. The scale domain is divided into this many intervals.","type":{"name":"number | undefined"},"defaultValue":{"value":"5"}},"children":{"name":"children","required":false,"description":"Optional render function override.","type":{"name":"((labels: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }[]) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"Classname to be applied to legend container.","type":{"name":"string | undefined"}},"style":{"name":"style","required":false,"description":"Styles to be applied to the legend container.","type":{"name":"CSSProperties | undefined"}},"domain":{"name":"domain","required":false,"description":"Legend domain.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"shapeWidth":{"name":"shapeWidth","required":false,"description":"Width of the legend shape.","type":{"name":"string | number | undefined"}},"shapeHeight":{"name":"shapeHeight","required":false,"description":"Height of the legend shape.","type":{"name":"string | number | undefined"}},"shapeMargin":{"name":"shapeMargin","required":false,"description":"Margin of the legend shape.","type":{"name":"string | number | undefined"}},"labelAlign":{"name":"labelAlign","required":false,"description":"Flex-box alignment of legend item labels.","type":{"name":"string | undefined"}},"scale":{"name":"scale","required":true,"description":"`@visx/scale` or `d3-scale` object used to generate the legend items.","type":{"name":"Scale"}},"labelFlex":{"name":"labelFlex","required":false,"description":"Flex-box flex of legend item labels.","type":{"name":"string | number | undefined"}},"labelMargin":{"name":"labelMargin","required":false,"description":"Margin of legend item labels.","type":{"name":"string | number | undefined"}},"itemMargin":{"name":"itemMargin","required":false,"description":"Margin of legend items.","type":{"name":"string | number | undefined"}},"direction":{"name":"direction","required":false,"description":"Flex direction of the legend itself.","type":{"name":"FlexDirection | undefined"}},"itemDirection":{"name":"itemDirection","required":false,"description":"Flex direction of legend items.","type":{"name":"FlexDirection | undefined"}},"fill":{"name":"fill","required":false,"description":"Legend item fill accessor function.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => string | undefined) | undefined"}},"size":{"name":"size","required":false,"description":"Legend item size accessor function.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => string | number | undefined) | undefined"}},"shape":{"name":"shape","required":false,"description":"Legend shape string preset or Element or Component.","type":{"name":"LegendShape<ScaleInput<Scale>, ReturnType<Scale>> | undefined"}},"shapeStyle":{"name":"shapeStyle","required":false,"description":"Styles applied to legend shapes.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => CSSProperties) | undefined"}},"labelFormat":{"name":"labelFormat","required":false,"description":"Given a legend item and its index, returns an item label.","type":{"name":"LabelFormatter<ScaleInput<Scale>> | undefined"}},"labelTransform":{"name":"labelTransform","required":false,"description":"Given the legend scale and labelFormatter, returns a label with datum, index, value, and label.","type":{"name":"LabelFormatterFactory<Scale> | undefined"}},"legendLabelProps":{"name":"legendLabelProps","required":false,"description":"Additional props to be set on LegendLabel.","type":{"name":"Partial<LegendLabelProps> | undefined"}}},"filePath":"visx-legend/src/legends/Linear.tsx","lineNumber":16},"LegendOrdinal":{"displayName":"LegendOrdinal","description":"Ordinal scales map from strings to an Output type.","kind":"component","props":{"children":{"name":"children","required":false,"description":"Optional render function override.","type":{"name":"((labels: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }[]) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"Classname to be applied to legend container.","type":{"name":"string | undefined"}},"style":{"name":"style","required":false,"description":"Styles to be applied to the legend container.","type":{"name":"CSSProperties | undefined"}},"domain":{"name":"domain","required":false,"description":"Legend domain.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"shapeWidth":{"name":"shapeWidth","required":false,"description":"Width of the legend shape.","type":{"name":"string | number | undefined"}},"shapeHeight":{"name":"shapeHeight","required":false,"description":"Height of the legend shape.","type":{"name":"string | number | undefined"}},"shapeMargin":{"name":"shapeMargin","required":false,"description":"Margin of the legend shape.","type":{"name":"string | number | undefined"}},"labelAlign":{"name":"labelAlign","required":false,"description":"Flex-box alignment of legend item labels.","type":{"name":"string | undefined"}},"scale":{"name":"scale","required":true,"description":"`@visx/scale` or `d3-scale` object used to generate the legend items.","type":{"name":"Scale"}},"labelFlex":{"name":"labelFlex","required":false,"description":"Flex-box flex of legend item labels.","type":{"name":"string | number | undefined"}},"labelMargin":{"name":"labelMargin","required":false,"description":"Margin of legend item labels.","type":{"name":"string | number | undefined"}},"itemMargin":{"name":"itemMargin","required":false,"description":"Margin of legend items.","type":{"name":"string | number | undefined"}},"direction":{"name":"direction","required":false,"description":"Flex direction of the legend itself.","type":{"name":"FlexDirection | undefined"}},"itemDirection":{"name":"itemDirection","required":false,"description":"Flex direction of legend items.","type":{"name":"FlexDirection | undefined"}},"fill":{"name":"fill","required":false,"description":"Legend item fill accessor function.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => string | undefined) | undefined"}},"size":{"name":"size","required":false,"description":"Legend item size accessor function.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => string | number | undefined) | undefined"}},"shape":{"name":"shape","required":false,"description":"Legend shape string preset or Element or Component.","type":{"name":"LegendShape<ScaleInput<Scale>, ReturnType<Scale>> | undefined"}},"shapeStyle":{"name":"shapeStyle","required":false,"description":"Styles applied to legend shapes.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => CSSProperties) | undefined"}},"labelFormat":{"name":"labelFormat","required":false,"description":"Given a legend item and its index, returns an item label.","type":{"name":"LabelFormatter<ScaleInput<Scale>> | undefined"}},"labelTransform":{"name":"labelTransform","required":false,"description":"Given the legend scale and labelFormatter, returns a label with datum, index, value, and label.","type":{"name":"LabelFormatterFactory<Scale> | undefined"}},"legendLabelProps":{"name":"legendLabelProps","required":false,"description":"Additional props to be set on LegendLabel.","type":{"name":"Partial<LegendLabelProps> | undefined"}}},"filePath":"visx-legend/src/legends/Ordinal.tsx","lineNumber":12},"LegendThreshold":{"displayName":"LegendThreshold","description":"A Threshold legend component for threshold scales.\\nThreshold scales map continuous input values to discrete output values based on threshold boundaries.\\nThis component displays the threshold ranges with customizable delimiters and labels.","kind":"component","props":{"children":{"name":"children","required":false,"description":"Optional render function override.","type":{"name":"((labels: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }[]) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"Classname to be applied to legend container.","type":{"name":"string | undefined"}},"style":{"name":"style","required":false,"description":"Styles to be applied to the legend container.","type":{"name":"CSSProperties | undefined"}},"domain":{"name":"domain","required":false,"description":"Legend domain.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"shapeWidth":{"name":"shapeWidth","required":false,"description":"Width of the legend shape.","type":{"name":"string | number | undefined"}},"shapeHeight":{"name":"shapeHeight","required":false,"description":"Height of the legend shape.","type":{"name":"string | number | undefined"}},"shapeMargin":{"name":"shapeMargin","required":false,"description":"Margin of the legend shape.","type":{"name":"string | number | undefined"}},"labelAlign":{"name":"labelAlign","required":false,"description":"Flex-box alignment of legend item labels.","type":{"name":"string | undefined"}},"scale":{"name":"scale","required":true,"description":"`@visx/scale` or `d3-scale` object used to generate the legend items.","type":{"name":"Scale"}},"labelFlex":{"name":"labelFlex","required":false,"description":"Flex-box flex of legend item labels.","type":{"name":"string | number | undefined"}},"labelMargin":{"name":"labelMargin","required":false,"description":"Margin of legend item labels.","type":{"name":"string | number | undefined"}},"itemMargin":{"name":"itemMargin","required":false,"description":"Margin of legend items.","type":{"name":"string | number | undefined"}},"direction":{"name":"direction","required":false,"description":"Flex direction of the legend itself.","type":{"name":"FlexDirection | undefined"}},"itemDirection":{"name":"itemDirection","required":false,"description":"Flex direction of legend items.","type":{"name":"FlexDirection | undefined"}},"fill":{"name":"fill","required":false,"description":"Legend item fill accessor function.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => string | undefined) | undefined"}},"size":{"name":"size","required":false,"description":"Legend item size accessor function.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => string | number | undefined) | undefined"}},"shape":{"name":"shape","required":false,"description":"Legend shape string preset or Element or Component.","type":{"name":"LegendShape<ScaleInput<Scale>, ReturnType<Scale>> | undefined"}},"shapeStyle":{"name":"shapeStyle","required":false,"description":"Styles applied to legend shapes.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => CSSProperties) | undefined"}},"labelFormat":{"name":"labelFormat","required":false,"description":"Given a legend item and its index, returns an item label.","type":{"name":"LabelFormatter<ScaleInput<Scale>> | undefined"},"defaultValue":{"value":"identity"}},"labelTransform":{"name":"labelTransform","required":false,"description":"Given the legend scale and labelFormatter, returns a label with datum, index, value, and label.","type":{"name":"LabelFormatterFactory<Scale> | undefined"}},"legendLabelProps":{"name":"legendLabelProps","required":false,"description":"Additional props to be set on LegendLabel.","type":{"name":"Partial<LegendLabelProps> | undefined"}},"labelDelimiter":{"name":"labelDelimiter","required":false,"description":"The delimiter string to use between threshold values (e.g., \'-\' renders as \'0 - 10\').","type":{"name":"string | undefined"},"defaultValue":{"value":"\'to\'"}},"labelLower":{"name":"labelLower","required":false,"description":"The prefix to use for the lower threshold label (e.g., \'<\' renders as \'< 10\').","type":{"name":"string | undefined"},"defaultValue":{"value":"\'Less than \'"}},"labelUpper":{"name":"labelUpper","required":false,"description":"The prefix to use for the upper threshold label (e.g., \'>\' renders as \'> 100\').","type":{"name":"string | undefined"},"defaultValue":{"value":"\'More than \'"}}},"filePath":"visx-legend/src/legends/Threshold.tsx","lineNumber":78},"LegendSize":{"displayName":"LegendSize","description":"A Size legend component that creates a legend with discrete size intervals.\\nUseful for visualizing continuous numeric data with size-based scales.","kind":"component","props":{"steps":{"name":"steps","required":false,"description":"Number of discrete steps to show in the legend. The scale domain is divided into this many intervals.","type":{"name":"number | undefined"},"defaultValue":{"value":"5"}},"children":{"name":"children","required":false,"description":"Optional render function override.","type":{"name":"((labels: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }[]) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"Classname to be applied to legend container.","type":{"name":"string | undefined"}},"style":{"name":"style","required":false,"description":"Styles to be applied to the legend container.","type":{"name":"CSSProperties | undefined"}},"domain":{"name":"domain","required":false,"description":"Legend domain.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"shapeWidth":{"name":"shapeWidth","required":false,"description":"Width of the legend shape.","type":{"name":"string | number | undefined"}},"shapeHeight":{"name":"shapeHeight","required":false,"description":"Height of the legend shape.","type":{"name":"string | number | undefined"}},"shapeMargin":{"name":"shapeMargin","required":false,"description":"Margin of the legend shape.","type":{"name":"string | number | undefined"}},"labelAlign":{"name":"labelAlign","required":false,"description":"Flex-box alignment of legend item labels.","type":{"name":"string | undefined"}},"scale":{"name":"scale","required":true,"description":"`@visx/scale` or `d3-scale` object used to generate the legend items.","type":{"name":"Scale"}},"labelFlex":{"name":"labelFlex","required":false,"description":"Flex-box flex of legend item labels.","type":{"name":"string | number | undefined"}},"labelMargin":{"name":"labelMargin","required":false,"description":"Margin of legend item labels.","type":{"name":"string | number | undefined"}},"itemMargin":{"name":"itemMargin","required":false,"description":"Margin of legend items.","type":{"name":"string | number | undefined"}},"direction":{"name":"direction","required":false,"description":"Flex direction of the legend itself.","type":{"name":"FlexDirection | undefined"}},"itemDirection":{"name":"itemDirection","required":false,"description":"Flex direction of legend items.","type":{"name":"FlexDirection | undefined"}},"fill":{"name":"fill","required":false,"description":"Legend item fill accessor function.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => string | undefined) | undefined"}},"size":{"name":"size","required":false,"description":"Legend item size accessor function.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => string | number | undefined) | undefined"}},"shape":{"name":"shape","required":false,"description":"Legend shape string preset or Element or Component.","type":{"name":"LegendShape<ScaleInput<Scale>, ReturnType<Scale>> | undefined"}},"shapeStyle":{"name":"shapeStyle","required":false,"description":"Styles applied to legend shapes.","type":{"name":"((label: { datum: ScaleInput<Scale>; index: number; text: string; value?: ReturnType<Scale> | undefined; }) => CSSProperties) | undefined"}},"labelFormat":{"name":"labelFormat","required":false,"description":"Given a legend item and its index, returns an item label.","type":{"name":"LabelFormatter<ScaleInput<Scale>> | undefined"},"defaultValue":{"value":"identity"}},"labelTransform":{"name":"labelTransform","required":false,"description":"Given the legend scale and labelFormatter, returns a label with datum, index, value, and label.","type":{"name":"LabelFormatterFactory<Scale> | undefined"},"defaultValue":{"value":"labelTransformFactory"}},"legendLabelProps":{"name":"legendLabelProps","required":false,"description":"Additional props to be set on LegendLabel.","type":{"name":"Partial<LegendLabelProps> | undefined"}}},"filePath":"visx-legend/src/legends/Size.tsx","lineNumber":21}},"@visx/marker":{"Marker":{"displayName":"Marker","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the `<marker>`. Should be unique across all page elements.","type":{"name":"string"}},"size":{"name":"size","required":false,"description":"A number used to determine the size of the bounding box the marker content.","type":{"name":"number | undefined"}},"markerWidth":{"name":"markerWidth","required":false,"description":"The width of the marker viewport","type":{"name":"string | number | undefined"},"defaultValue":{"value":"3"}},"markerHeight":{"name":"markerHeight","required":false,"description":"The height of the marker viewport","type":{"name":"string | number | undefined"},"defaultValue":{"value":"3"}},"markerUnits":{"name":"markerUnits","required":false,"description":"Set the coordinate system for the markerWidth, markerHeight, and `<marker>` contents","type":{"name":"string | undefined"},"defaultValue":{"value":"\'userSpaceOnUse\'"}},"refX":{"name":"refX","required":false,"description":"The x coordinate for the reference point of the maker","type":{"name":"string | number | undefined"}},"refY":{"name":"refY","required":false,"description":"The y coordinate for the reference point of the maker","type":{"name":"string | number | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The stroke width. constrained to a `number` type due to use in bounding box calculations","type":{"name":"number | undefined"}},"children":{"name":"children","required":true,"description":"The <marker> contents. Typically one of: `<path>`, `<line>`, `<polyline>`, or `<polygon>`","type":{"name":"ReactNode"}}},"filePath":"visx-marker/src/markers/Marker.tsx","lineNumber":27},"MarkerArrow":{"displayName":"MarkerArrow","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the `<marker>`. Should be unique across all page elements.","type":{"name":"string"}},"size":{"name":"size","required":false,"description":"A number used to determine the size of the bounding box the marker content.","type":{"name":"number | undefined"},"defaultValue":{"value":"9"}},"markerWidth":{"name":"markerWidth","required":false,"description":"The width of the marker viewport","type":{"name":"string | number | undefined"}},"markerHeight":{"name":"markerHeight","required":false,"description":"The height of the marker viewport","type":{"name":"string | number | undefined"}},"markerUnits":{"name":"markerUnits","required":false,"description":"Set the coordinate system for the markerWidth, markerHeight, and `<marker>` contents","type":{"name":"string | undefined"}},"refX":{"name":"refX","required":false,"description":"The x coordinate for the reference point of the maker","type":{"name":"string | number | undefined"}},"refY":{"name":"refY","required":false,"description":"The y coordinate for the reference point of the maker","type":{"name":"string | number | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The stroke width. constrained to a `number` type due to use in bounding box calculations","type":{"name":"number | undefined"},"defaultValue":{"value":"1"}}},"filePath":"visx-marker/src/markers/Arrow.tsx","lineNumber":5},"MarkerCross":{"displayName":"MarkerCross","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the `<marker>`. Should be unique across all page elements.","type":{"name":"string"}},"size":{"name":"size","required":false,"description":"A number used to determine the size of the bounding box the marker content.","type":{"name":"number | undefined"},"defaultValue":{"value":"9"}},"markerWidth":{"name":"markerWidth","required":false,"description":"The width of the marker viewport","type":{"name":"string | number | undefined"}},"markerHeight":{"name":"markerHeight","required":false,"description":"The height of the marker viewport","type":{"name":"string | number | undefined"}},"markerUnits":{"name":"markerUnits","required":false,"description":"Set the coordinate system for the markerWidth, markerHeight, and `<marker>` contents","type":{"name":"string | undefined"}},"refX":{"name":"refX","required":false,"description":"The x coordinate for the reference point of the maker","type":{"name":"string | number | undefined"}},"refY":{"name":"refY","required":false,"description":"The y coordinate for the reference point of the maker","type":{"name":"string | number | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The stroke width. constrained to a `number` type due to use in bounding box calculations","type":{"name":"number | undefined"},"defaultValue":{"value":"1"}}},"filePath":"visx-marker/src/markers/Cross.tsx","lineNumber":5},"MarkerX":{"displayName":"MarkerX","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the `<marker>`. Should be unique across all page elements.","type":{"name":"string"}},"size":{"name":"size","required":false,"description":"A number used to determine the size of the bounding box the marker content.","type":{"name":"number | undefined"}},"markerWidth":{"name":"markerWidth","required":false,"description":"The width of the marker viewport","type":{"name":"string | number | undefined"}},"markerHeight":{"name":"markerHeight","required":false,"description":"The height of the marker viewport","type":{"name":"string | number | undefined"}},"markerUnits":{"name":"markerUnits","required":false,"description":"Set the coordinate system for the markerWidth, markerHeight, and `<marker>` contents","type":{"name":"string | undefined"}},"refX":{"name":"refX","required":false,"description":"The x coordinate for the reference point of the maker","type":{"name":"string | number | undefined"}},"refY":{"name":"refY","required":false,"description":"The y coordinate for the reference point of the maker","type":{"name":"string | number | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The stroke width. constrained to a `number` type due to use in bounding box calculations","type":{"name":"number | undefined"}}},"filePath":"visx-marker/src/markers/X.tsx","lineNumber":5},"MarkerCircle":{"displayName":"MarkerCircle","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the `<marker>`. Should be unique across all page elements.","type":{"name":"string"}},"size":{"name":"size","required":false,"description":"A number used to determine the size of the bounding box the marker content.","type":{"name":"number | undefined"},"defaultValue":{"value":"9"}},"markerWidth":{"name":"markerWidth","required":false,"description":"The width of the marker viewport","type":{"name":"string | number | undefined"}},"markerHeight":{"name":"markerHeight","required":false,"description":"The height of the marker viewport","type":{"name":"string | number | undefined"}},"markerUnits":{"name":"markerUnits","required":false,"description":"Set the coordinate system for the markerWidth, markerHeight, and `<marker>` contents","type":{"name":"string | undefined"}},"refX":{"name":"refX","required":false,"description":"The x coordinate for the reference point of the maker","type":{"name":"string | number | undefined"}},"refY":{"name":"refY","required":false,"description":"The y coordinate for the reference point of the maker","type":{"name":"string | number | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The stroke width. constrained to a `number` type due to use in bounding box calculations","type":{"name":"number | undefined"},"defaultValue":{"value":"1"}}},"filePath":"visx-marker/src/markers/Circle.tsx","lineNumber":5},"MarkerLine":{"displayName":"MarkerLine","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the `<marker>`. Should be unique across all page elements.","type":{"name":"string"}},"size":{"name":"size","required":false,"description":"A number used to determine the size of the bounding box the marker content.","type":{"name":"number | undefined"},"defaultValue":{"value":"9"}},"markerWidth":{"name":"markerWidth","required":false,"description":"The width of the marker viewport","type":{"name":"string | number | undefined"}},"markerHeight":{"name":"markerHeight","required":false,"description":"The height of the marker viewport","type":{"name":"string | number | undefined"}},"markerUnits":{"name":"markerUnits","required":false,"description":"Set the coordinate system for the markerWidth, markerHeight, and `<marker>` contents","type":{"name":"string | undefined"}},"refX":{"name":"refX","required":false,"description":"The x coordinate for the reference point of the maker","type":{"name":"string | number | undefined"}},"refY":{"name":"refY","required":false,"description":"The y coordinate for the reference point of the maker","type":{"name":"string | number | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The stroke width. constrained to a `number` type due to use in bounding box calculations","type":{"name":"number | undefined"},"defaultValue":{"value":"1"}}},"filePath":"visx-marker/src/markers/Line.tsx","lineNumber":5}},"@visx/mock-data":{"getSeededRandom":{"displayName":"getSeededRandom","description":"// returns a seeded random number generator","kind":"function","props":{},"parameters":[{"name":"seed","description":"Seed in the interval [0, 1).","type":{"name":"number"}}],"filePath":"visx-mock-data/src/generators/getSeededRandom.ts","lineNumber":4},"genDateValue":{"displayName":"genDateValue","kind":"function","props":{},"parameters":[{"name":"length","type":{"name":"number"}},{"name":"seed","description":"Optional random seed in the interval [0, 1).","type":{"name":"number"}},{"name":"startTimeMs","description":"Optional start time in ms UTC.","type":{"name":"number"}}],"returnType":"DateValue[]","filePath":"visx-mock-data/src/generators/genDateValue.ts","lineNumber":8},"genPointsRange":{"displayName":"genPointsRange","kind":"function","props":{},"parameters":[{"name":"length","type":{"name":"number"}},{"name":"[offsetX, offsetY, index]","type":{"name":"PointConfig"}},{"name":"random","type":{"name":"() => number"},"defaultValue":{"value":"randomNormal(0, 0.2)"}}],"returnType":"PointsRange[]","filePath":"visx-mock-data/src/generators/genRandomNormalPoints.ts","lineNumber":13},"genPoints":{"displayName":"genPoints","kind":"function","props":{},"parameters":[{"name":"count","type":{"name":"number"},"defaultValue":{"value":"300"}},{"name":"seed","description":"Optional random seed in the interval [0, 1).","type":{"name":"number | undefined"},"defaultValue":{"value":"undefined"}}],"returnType":"PointsRange[]","filePath":"visx-mock-data/src/generators/genRandomNormalPoints.ts","lineNumber":21},"genBin":{"displayName":"genBin","kind":"function","props":{},"parameters":[{"name":"length","type":{"name":"number"}},{"name":"bin","type":{"name":"BinFunction"},"defaultValue":{"value":"defaultBin"}},{"name":"count","type":{"name":"CountFunction"},"defaultValue":{"value":"defaultCount"}}],"returnType":"Bin[]","filePath":"visx-mock-data/src/generators/genBin.ts","lineNumber":13},"genBins":{"displayName":"genBins","kind":"function","props":{},"parameters":[{"name":"length","type":{"name":"number"}},{"name":"height","type":{"name":"number"}},{"name":"bin","type":{"name":"BinFunction"}},{"name":"count","type":{"name":"CountFunction"}}],"returnType":"Bins[]","filePath":"visx-mock-data/src/generators/genBins.ts","lineNumber":11},"genPhyllotaxis":{"displayName":"genPhyllotaxis","kind":"function","props":{},"parameters":[{"name":"{\\n  radius,\\n  width,\\n  height,\\n}","type":{"name":"GenPhyllotaxis"}}],"returnType":"GenPhyllotaxisFunction","filePath":"visx-mock-data/src/generators/genPhyllotaxis.ts","lineNumber":13},"genStats":{"displayName":"genStats","kind":"function","props":{},"parameters":[{"name":"number","description":"Number of stat distributions to generate.","type":{"name":"number"}},{"name":"random","description":"Function which generates a random number.","type":{"name":"() => number"},"defaultValue":{"value":"defaultRandom"}},{"name":"randomOffset","description":"Function which generates an offset for each data point / invocation of random.","type":{"name":"() => number"},"defaultValue":{"value":"defaultRandomOffset"}}],"returnType":"Stats[]","filePath":"visx-mock-data/src/generators/genStats.ts","lineNumber":27}},"@visx/network":{"DefaultLink":{"displayName":"DefaultLink","description":"// eslint-disable-next-line @typescript-eslint/no-explicit-any","kind":"component","props":{"link":{"name":"link","required":true,"type":{"name":"any"}}},"filePath":"visx-network/src/DefaultLink.tsx","lineNumber":5},"DefaultNode":{"displayName":"DefaultNode","kind":"component","props":{"cx":{"name":"cx","required":false,"type":{"name":"number | undefined"}},"cy":{"name":"cy","required":false,"type":{"name":"number | undefined"}},"node":{"name":"node","required":false,"type":{"name":"unknown"}}},"filePath":"visx-network/src/DefaultNode.tsx","lineNumber":9},"Links":{"displayName":"Links","kind":"component","props":{"links":{"name":"links","required":false,"description":"Array of links to render.","type":{"name":"Link[] | undefined"},"defaultValue":{"value":"[]"}},"linkComponent":{"name":"linkComponent","required":true,"description":"Component for rendering a single link.","type":{"name":"FunctionComponent<LinkProvidedProps<Link>> | ComponentClass<LinkProvidedProps<Link>, any>"}},"className":{"name":"className","required":false,"description":"Classname to add to each link parent g element.","type":{"name":"string | undefined"}}},"filePath":"visx-network/src/Links.tsx","lineNumber":17},"Nodes":{"displayName":"Nodes","kind":"component","props":{"nodes":{"name":"nodes","required":false,"description":"Array of links to render.","type":{"name":"Node[] | undefined"},"defaultValue":{"value":"[]"}},"nodeComponent":{"name":"nodeComponent","required":true,"description":"Component for rendering a single link.","type":{"name":"FunctionComponent<NodeProvidedProps<Node>> | ComponentClass<NodeProvidedProps<Node>, any>"},"defaultValue":{"value":"DefaultNode"}},"className":{"name":"className","required":false,"description":"Classname to add to each node parent g element.","type":{"name":"string | undefined"}},"x":{"name":"x","required":false,"description":"Returns the center x coordinate of a node.","type":{"name":"((d: Node) => number) | undefined"},"defaultValue":{"value":"(d: any) => d?.x || 0"}},"y":{"name":"y","required":false,"description":"Returns the center y coordinate of a node.","type":{"name":"((d: Node) => number) | undefined"},"defaultValue":{"value":"(d: any) => d?.y || 0"}}},"filePath":"visx-network/src/Nodes.tsx","lineNumber":23},"Graph":{"displayName":"Graph","kind":"component","props":{"graph":{"name":"graph","required":false,"description":"Graph to render nodes and links for.","type":{"name":"Graph<Link, Node> | undefined"}},"linkComponent":{"name":"linkComponent","required":false,"description":"Component for rendering a single Link.","type":{"name":"FunctionComponent<LinkProvidedProps<Link>> | ComponentClass<LinkProvidedProps<Link>, any> | undefined"},"defaultValue":{"value":"DefaultLink"}},"nodeComponent":{"name":"nodeComponent","required":false,"description":"Component for rendering a single Node.","type":{"name":"FunctionComponent<NodeProvidedProps<Node>> | ComponentClass<NodeProvidedProps<Node>, any> | undefined"},"defaultValue":{"value":"DefaultNode"}},"top":{"name":"top","required":false,"description":"Top transform offset to apply to links and nodes.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left transform offset to apply to links and nodes.","type":{"name":"number | undefined"}}},"filePath":"visx-network/src/Graph.tsx","lineNumber":32}},"@visx/pattern":{"Pattern":{"displayName":"Pattern","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id of the pattern element.","type":{"name":"string"}},"width":{"name":"width","required":true,"description":"Width of the pattern.","type":{"name":"number"}},"height":{"name":"height","required":true,"description":"Height of the pattern.","type":{"name":"number"}},"children":{"name":"children","required":true,"description":"Children of pattern element to render.","type":{"name":"ReactNode"}}},"filePath":"visx-pattern/src/patterns/Pattern.tsx","lineNumber":14},"pathForOrientation":{"displayName":"pathForOrientation","kind":"function","props":{},"parameters":[{"name":"{\\n  height,\\n  orientation,\\n}","type":{"name":"{ height: number; orientation: PatternOrientationType; }"}}],"filePath":"visx-pattern/src/patterns/Lines.tsx","lineNumber":7},"PatternLines":{"displayName":"PatternLines","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the pattern.","type":{"name":"string"}},"width":{"name":"width","required":true,"description":"Width of the pattern element.","type":{"name":"number"}},"height":{"name":"height","required":true,"description":"Height of the pattern element.","type":{"name":"number"}},"className":{"name":"className","required":false,"description":"className applied to line path element.","type":{"name":"string | undefined"}},"background":{"name":"background","required":false,"description":"Background color applied behind lines.","type":{"name":"string | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Stroke color applied to path elements.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"strokeWidth applied to path elements.","type":{"name":"string | number | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"strokeDasharray applied to path elements.","type":{"name":"string | number | undefined"}},"strokeLinecap":{"name":"strokeLinecap","required":false,"description":"strokeLinecap applied to path elements.","type":{"name":"\\"square\\" | \\"butt\\" | \\"round\\" | \\"inherit\\" | undefined"},"defaultValue":{"value":"\'square\'"}},"shapeRendering":{"name":"shapeRendering","required":false,"description":"shapeRendering applied to path elements.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"\'auto\'"}},"orientation":{"name":"orientation","required":false,"description":"Array of orientations to render (can mix multiple).","type":{"name":"PatternOrientationType[] | undefined"},"defaultValue":{"value":"[\'vertical\']"}}},"filePath":"visx-pattern/src/patterns/Lines.tsx","lineNumber":57},"PatternCircles":{"displayName":"PatternCircles","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the pattern.","type":{"name":"string"}},"width":{"name":"width","required":true,"description":"Width of the pattern element.","type":{"name":"number"}},"height":{"name":"height","required":true,"description":"Height of the pattern element.","type":{"name":"number"}},"radius":{"name":"radius","required":false,"description":"Radius of the pattern circles.","type":{"name":"number | undefined"},"defaultValue":{"value":"2"}},"fill":{"name":"fill","required":false,"description":"Fill applied to circles.","type":{"name":"string | undefined"}},"className":{"name":"className","required":false,"description":"className applied to circles.","type":{"name":"string | undefined"}},"stroke":{"name":"stroke","required":false,"description":"stroke applied to circles.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"strokeWidth applied to circles.","type":{"name":"string | number | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"strokeDasharray applied to circles.","type":{"name":"string | number | undefined"}},"complement":{"name":"complement","required":false,"description":"Whether to fill in circles within the pattern gaps to increase pattern density.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"background":{"name":"background","required":false,"description":"Background color applied behind cirlces.","type":{"name":"string | undefined"}}},"filePath":"visx-pattern/src/patterns/Circles.tsx","lineNumber":30},"PatternPath":{"displayName":"PatternPath","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the pattern.","type":{"name":"string"}},"width":{"name":"width","required":true,"description":"Width of the pattern element.","type":{"name":"number"}},"height":{"name":"height","required":true,"description":"Height of the pattern element.","type":{"name":"number"}},"path":{"name":"path","required":false,"description":"d attribute of the path element","type":{"name":"string | undefined"}},"fill":{"name":"fill","required":false,"description":"fill color applied to path.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'transparent\'"}},"className":{"name":"className","required":false,"description":"className applied to the path element.","type":{"name":"string | undefined"}},"background":{"name":"background","required":false,"description":"Background color applied behind path.","type":{"name":"string | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Stroke color applied to path.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"strokeWidth applied to path.","type":{"name":"string | number | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"strokeDasharray applied to path.","type":{"name":"string | number | undefined"}},"strokeLinecap":{"name":"strokeLinecap","required":false,"description":"strokeLinecap applied to path.","type":{"name":"\\"square\\" | \\"butt\\" | \\"round\\" | \\"inherit\\" | undefined"},"defaultValue":{"value":"\'square\'"}},"shapeRendering":{"name":"shapeRendering","required":false,"description":"shapeRendering applied to path.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"\'auto\'"}}},"filePath":"visx-pattern/src/patterns/Path.tsx","lineNumber":32},"PatternWaves":{"displayName":"PatternWaves","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the pattern.","type":{"name":"string"}},"width":{"name":"width","required":true,"description":"Width of the pattern element.","type":{"name":"number"}},"height":{"name":"height","required":true,"description":"Height of the pattern element.","type":{"name":"number"}},"fill":{"name":"fill","required":false,"description":"fill color applied to path.","type":{"name":"string | undefined"}},"className":{"name":"className","required":false,"description":"className applied to the path element.","type":{"name":"string | undefined"}},"background":{"name":"background","required":false,"description":"Background color applied behind path.","type":{"name":"string | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Stroke color applied to path.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"strokeWidth applied to path.","type":{"name":"string | number | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"strokeDasharray applied to path.","type":{"name":"string | number | undefined"}},"strokeLinecap":{"name":"strokeLinecap","required":false,"description":"strokeLinecap applied to path.","type":{"name":"\\"square\\" | \\"butt\\" | \\"round\\" | \\"inherit\\" | undefined"}},"shapeRendering":{"name":"shapeRendering","required":false,"description":"shapeRendering applied to path.","type":{"name":"string | number | undefined"}}},"filePath":"visx-pattern/src/patterns/Waves.tsx","lineNumber":30},"PatternHexagons":{"displayName":"PatternHexagons","kind":"component","props":{"id":{"name":"id","required":true,"description":"Unique id for the pattern.","type":{"name":"string"}},"height":{"name":"height","required":true,"description":"Height of the pattern element.","type":{"name":"number"}},"size":{"name":"size","required":false,"description":"Size of the hexagon shape.","type":{"name":"number | undefined"},"defaultValue":{"value":"3"}},"fill":{"name":"fill","required":false,"description":"Fill applied to hexagons.","type":{"name":"string | undefined"}},"className":{"name":"className","required":false,"description":"className applied to hexagon path element.","type":{"name":"string | undefined"}},"background":{"name":"background","required":false,"description":"Background color applied behind hexagons.","type":{"name":"string | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Stroke color applied to hexagon paths.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"strokeWidth applied to hexagon paths.","type":{"name":"string | number | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"strokeDasharray applied to hexagon paths.","type":{"name":"string | number | undefined"}},"strokeLinecap":{"name":"strokeLinecap","required":false,"description":"strokeLinecap applied to hexagon paths.","type":{"name":"\\"square\\" | \\"butt\\" | \\"round\\" | \\"inherit\\" | undefined"}},"shapeRendering":{"name":"shapeRendering","required":false,"description":"shapeRendering applied to hexagon paths.","type":{"name":"string | number | undefined"}}},"filePath":"visx-pattern/src/patterns/Hexagons.tsx","lineNumber":30}},"@visx/point":{"sumPoints":{"displayName":"sumPoints","kind":"function","props":{},"parameters":[{"name":"point1","type":{"name":"Point"}},{"name":"point2","type":{"name":"Point"}}],"filePath":"visx-point/src/sumPoints.ts","lineNumber":3},"subtractPoints":{"displayName":"subtractPoints","kind":"function","props":{},"parameters":[{"name":"point1","type":{"name":"Point"}},{"name":"point2","type":{"name":"Point"}}],"filePath":"visx-point/src/subtractPoints.ts","lineNumber":3}},"@visx/react-spring":{"useLineTransitionConfig":{"displayName":"useLineTransitionConfig","description":"A hook that returns `react-spring` transition config for animating a Line\\nhorizontally, vertically, and from a specific starting point.","kind":"hook","props":{"scale":{"name":"scale","required":true,"description":"Scale along which animation occurs.","type":{"name":"Scale"}},"animateXOrY":{"name":"animateXOrY","required":true,"description":"Whether to animate the `x` or `y` values of a Line.","type":{"name":"\\"x\\" | \\"y\\""}},"animationTrajectory":{"name":"animationTrajectory","required":false,"description":"The scale position entering lines come from, and exiting lines leave to.","type":{"name":"AnimationTrajectory | undefined"}}},"filePath":"visx-react-spring/src/spring-configs/useLineTransitionConfig.ts","lineNumber":60},"AnimatedTicks":{"displayName":"AnimatedTicks","kind":"component","props":{"tickLabelProps":{"name":"tickLabelProps","required":true,"type":{"name":"Partial<TextProps>[]"}},"hideTicks":{"name":"hideTicks","required":false,"description":"If true, will hide the ticks (but not the tick labels).","type":{"name":"boolean | undefined"}},"horizontal":{"name":"horizontal","required":true,"description":"Whether this axis is horizontal","type":{"name":"boolean"}},"orientation":{"name":"orientation","required":false,"description":"Placement of the axis","type":{"name":"ValueOf<{ readonly top: \\"top\\"; readonly left: \\"left\\"; readonly right: \\"right\\"; readonly bottom: \\"bottom\\"; }> | undefined"}},"scale":{"name":"scale","required":true,"description":"A [d3](https://github.com/d3/d3-scale) or [visx](https://github.com/airbnb/visx/tree/master/packages/visx-scale) scale function.","type":{"name":"Scale"}},"tickClassName":{"name":"tickClassName","required":false,"description":"The class name applied to each tick group.","type":{"name":"string | undefined"}},"tickComponent":{"name":"tickComponent","required":false,"description":"Override the component used to render tick labels (instead of <Text /> from @visx/text).","type":{"name":"((tickRendererProps: TickRendererProps) => ReactNode) | undefined"}},"tickStroke":{"name":"tickStroke","required":false,"description":"The color for the tick\'s stroke value.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'#222\'"}},"tickTransform":{"name":"tickTransform","required":false,"description":"A custom SVG transform value to be applied to each tick group.","type":{"name":"string | undefined"}},"ticks":{"name":"ticks","required":true,"description":"Computed ticks with positions and formatted value","type":{"name":"ComputedTick<Scale>[]"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The pixel value for the width of the lines.","type":{"name":"string | number | undefined"}},"tickLineProps":{"name":"tickLineProps","required":false,"description":"Props to be applied to individual tick lines.","type":{"name":"LineProps | undefined"}},"animationTrajectory":{"name":"animationTrajectory","required":false,"type":{"name":"AnimationTrajectory | undefined"}}},"filePath":"visx-react-spring/src/axis/AnimatedTicks.tsx","lineNumber":12},"AnimatedAxis":{"displayName":"AnimatedAxis","kind":"component","props":{"hideTicks":{"name":"hideTicks","required":false,"description":"If true, will hide the ticks (but not the tick labels).","type":{"name":"boolean | undefined"}},"orientation":{"name":"orientation","required":false,"description":"Placement of the axis","type":{"name":"\\"top\\" | \\"left\\" | \\"right\\" | \\"bottom\\" | undefined"}},"scale":{"name":"scale","required":true,"description":"A [d3](https://github.com/d3/d3-scale) or [visx](https://github.com/airbnb/visx/tree/master/packages/visx-scale) scale function.","type":{"name":"Scale"}},"tickClassName":{"name":"tickClassName","required":false,"description":"The class name applied to each tick group.","type":{"name":"string | undefined"}},"tickComponent":{"name":"tickComponent","required":false,"description":"Override the component used to render tick labels (instead of <Text /> from @visx/text).","type":{"name":"((tickRendererProps: TickRendererProps) => ReactNode) | undefined"}},"tickStroke":{"name":"tickStroke","required":false,"description":"The color for the tick\'s stroke value.","type":{"name":"string | undefined"}},"tickTransform":{"name":"tickTransform","required":false,"description":"A custom SVG transform value to be applied to each tick group.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The pixel value for the width of the lines.","type":{"name":"string | number | undefined"}},"tickLineProps":{"name":"tickLineProps","required":false,"description":"Props to be applied to individual tick lines.","type":{"name":"LineProps | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"The ref to the outermost axis group element.","type":{"name":"Ref<SVGGElement> | undefined"}},"children":{"name":"children","required":false,"description":"For more control over rendering or to add event handlers to datum, pass a function as children.","type":{"name":"((renderProps: AxisRendererProps<Scale>) => ReactNode) | undefined"}},"stroke":{"name":"stroke","required":false,"description":"The color for the stroke of the lines.","type":{"name":"string | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"The pattern of dashes in the stroke.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"A top pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"A left pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"axisLineClassName":{"name":"axisLineClassName","required":false,"description":"The class name applied to the axis line element.","type":{"name":"string | undefined"}},"hideAxisLine":{"name":"hideAxisLine","required":false,"description":"If true, will hide the axis line.","type":{"name":"boolean | undefined"}},"hideZero":{"name":"hideZero","required":false,"description":"If true, will hide the \'0\' value tick and tick label.","type":{"name":"boolean | undefined"}},"label":{"name":"label","required":false,"description":"The text for the axis label.","type":{"name":"string | undefined"}},"labelClassName":{"name":"labelClassName","required":false,"description":"The class name applied to the axis label text element.","type":{"name":"string | undefined"}},"labelOffset":{"name":"labelOffset","required":false,"description":"Pixel offset of the axis label (does not include tick label font size, which is accounted for automatically)","type":{"name":"number | undefined"}},"labelProps":{"name":"labelProps","required":false,"description":"Props applied to the axis label component.","type":{"name":"Partial<TextProps> | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"The number of ticks wanted for the axis (note this is approximate)","type":{"name":"number | undefined"}},"rangePadding":{"name":"rangePadding","required":false,"description":"Pixel padding to apply to axis sides.","type":{"name":"number | { start?: number | undefined; end?: number | undefined; } | undefined"}},"tickFormat":{"name":"tickFormat","required":false,"description":"A [d3 formatter](https://github.com/d3/d3-scale/blob/master/README.md#continuous_tickFormat) for the tick text.","type":{"name":"TickFormatter<ScaleInput<Scale>> | undefined"}},"tickLabelProps":{"name":"tickLabelProps","required":false,"description":"Either an object with the props for all tick labels or a function that returns props for a given tick label.","type":{"name":"TickLabelProps<ScaleInput<Scale>> | undefined"}},"tickLength":{"name":"tickLength","required":false,"description":"The length of the tick lines.","type":{"name":"number | undefined"}},"axisClassName":{"name":"axisClassName","required":false,"description":"The class name applied to the outermost axis group element.","type":{"name":"string | undefined"}},"tickValues":{"name":"tickValues","required":false,"description":"An array of values that determine the number and values of the ticks. Falls back to `scale.ticks()` or `.domain()`.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"animationTrajectory":{"name":"animationTrajectory","required":false,"type":{"name":"AnimationTrajectory | undefined"}}},"filePath":"visx-react-spring/src/axis/AnimatedAxis.tsx","lineNumber":12},"AnimatedGridLines":{"displayName":"AnimatedGridLines","kind":"component","props":{"lines":{"name":"lines","required":true,"type":{"name":"GridLines"}},"lineKey":{"name":"lineKey","required":true,"type":{"name":"(line: { from: { x?: number | undefined; y?: number | undefined; }; to: { x?: number | undefined; y?: number | undefined; }; index: number; }) => string"}},"scale":{"name":"scale","required":true,"type":{"name":"Scale"}},"animationTrajectory":{"name":"animationTrajectory","required":false,"description":"The scale position entering lines come from, and exiting lines leave to.","type":{"name":"AnimationTrajectory | undefined"}},"animateXOrY":{"name":"animateXOrY","required":true,"description":"Whether to animate the `x` or `y` values of a Line.","type":{"name":"\\"x\\" | \\"y\\""}},"lineStyle":{"name":"lineStyle","required":false,"description":"Styles to apply as grid line style.","type":{"name":"CSSProperties | undefined"}}},"filePath":"visx-react-spring/src/grid/AnimatedGridLines.tsx","lineNumber":16},"AnimatedGridRows":{"displayName":"AnimatedGridRows","kind":"component","props":{"scale":{"name":"scale","required":true,"description":"`@visx/scale` or `d3-scale` object used to convert value to position.","type":{"name":"Scale"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"Grid line stroke thickness.","type":{"name":"string | number | undefined"}},"className":{"name":"className","required":false,"description":"classname to apply to line group element.","type":{"name":"string | undefined"}},"width":{"name":"width","required":true,"description":"Total width of each grid row line.","type":{"name":"number"}},"offset":{"name":"offset","required":false,"description":"Pixel offset to apply as a translation (y- for Rows, x- for Columns) to each grid lines.","type":{"name":"number | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Grid line stroke color.","type":{"name":"string | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"Grid line stroke-dasharray attribute.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"Approximate number of grid lines. Approximate due to d3 alogrithm, specify `tickValues` for precise control.","type":{"name":"number | undefined"}},"tickValues":{"name":"tickValues","required":false,"description":"Exact values used to generate grid lines using `scale`.\\nOverrides `numTicks` if specified.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"lineStyle":{"name":"lineStyle","required":false,"description":"Styles to apply as grid line style.","type":{"name":"CSSProperties | undefined"}},"animationTrajectory":{"name":"animationTrajectory","required":false,"type":{"name":"AnimationTrajectory | undefined"}}},"filePath":"visx-react-spring/src/grid/AnimatedGridRows.tsx","lineNumber":8},"AnimatedGridColumns":{"displayName":"AnimatedGridColumns","kind":"component","props":{"scale":{"name":"scale","required":true,"description":"`@visx/scale` or `d3-scale` object used to convert value to position.","type":{"name":"Scale"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"Grid line stroke thickness.","type":{"name":"string | number | undefined"}},"className":{"name":"className","required":false,"description":"classname to apply to line group element.","type":{"name":"string | undefined"}},"height":{"name":"height","required":true,"description":"Total height of each grid column line.","type":{"name":"number"}},"offset":{"name":"offset","required":false,"description":"Pixel offset to apply as a translation (y- for Rows, x- for Columns) to each grid lines.","type":{"name":"number | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Grid line stroke color.","type":{"name":"string | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"Grid line stroke-dasharray attribute.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"Approximate number of grid lines. Approximate due to d3 alogrithm, specify `tickValues` for precise control.","type":{"name":"number | undefined"}},"tickValues":{"name":"tickValues","required":false,"description":"Exact values used to generate grid lines using `scale`.\\nOverrides `numTicks` if specified.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"lineStyle":{"name":"lineStyle","required":false,"description":"Styles to apply as grid line style.","type":{"name":"CSSProperties | undefined"}},"animationTrajectory":{"name":"animationTrajectory","required":false,"type":{"name":"AnimationTrajectory | undefined"}}},"filePath":"visx-react-spring/src/grid/AnimatedGridColumns.tsx","lineNumber":8}},"@visx/responsive":{"useParentSize":{"displayName":"useParentSize","kind":"hook","props":{"width":{"name":"width","required":true,"type":{"name":"number"}},"height":{"name":"height","required":true,"type":{"name":"number"}},"top":{"name":"top","required":true,"type":{"name":"number"}},"left":{"name":"left","required":true,"type":{"name":"number"}},"parentRef":{"name":"parentRef","required":true,"type":{"name":"RefObject<T>"}},"resize":{"name":"resize","required":true,"type":{"name":"(state: ParentSizeState) => void"}}},"filePath":"visx-responsive/src/hooks/useParentSize.ts","lineNumber":35},"ParentSize":{"displayName":"ParentSize","kind":"component","props":{"className":{"name":"className","required":false,"description":"Optional `className` to add to the parent `div` wrapper used for size measurement.","type":{"name":"string | undefined"}},"parentSizeStyles":{"name":"parentSizeStyles","required":false,"description":"@deprecated - use `style` prop as all other props are passed directly to the parent `div`.\\n@TODO remove in the next major version.\\nOptional `style` object to apply to the parent `div` wrapper used for size measurement.","type":{"name":"CSSProperties | undefined"},"defaultValue":{"value":"defaultParentSizeStyles"}},"children":{"name":"children","required":true,"description":"Child render function `({ width, height, top, left, ref, resize }) => ReactNode`.","type":{"name":"(args: ParentSizeProvidedProps) => ReactNode"}},"initialSize":{"name":"initialSize","required":false,"description":"Initial size before measuring the parent.","type":{"name":"Partial<ParentSizeState> | undefined"}},"resizeObserverPolyfill":{"name":"resizeObserverPolyfill","required":false,"description":"Optionally inject a ResizeObserver polyfill, else this *must* be globally available.","type":{"name":"ResizeObserverPolyfill | undefined"}},"ignoreDimensions":{"name":"ignoreDimensions","required":false,"description":"Optional dimensions provided won\'t trigger a state change when changed.","type":{"name":"keyof ParentSizeState | (keyof ParentSizeState)[] | undefined"}},"debounceTime":{"name":"debounceTime","required":false,"description":"Child render updates upon resize are delayed until `debounceTime` milliseconds _after_ the last resize event is observed. Defaults to `300`.","type":{"name":"number | undefined"}},"enableDebounceLeadingCall":{"name":"enableDebounceLeadingCall","required":false,"description":"Optional flag to toggle leading debounce calls. When set to true this will ensure that the component always renders immediately. Defaults to `true`.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}}},"filePath":"visx-responsive/src/components/ParentSize.tsx","lineNumber":25},"ScaleSVG":{"displayName":"ScaleSVG","kind":"component","props":{"children":{"name":"children","required":false,"description":"Child SVG to scale, rendered as the child of the parent wrappers provided by this component `<div><svg>{children}</svg></div>`.","type":{"name":"ReactNode"}},"width":{"name":"width","required":false,"description":"Width of the desired SVG.","type":{"name":"string | number | undefined"}},"height":{"name":"height","required":false,"description":"Height of the desired SVG.","type":{"name":"string | number | undefined"}},"xOrigin":{"name":"xOrigin","required":false,"description":"xOrigin of the desired SVG.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"0"}},"yOrigin":{"name":"yOrigin","required":false,"description":"yOrigin of the desired SVG.","type":{"name":"string | number | undefined"},"defaultValue":{"value":"0"}},"preserveAspectRatio":{"name":"preserveAspectRatio","required":false,"description":"Whether to preserve SVG aspect ratio.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'xMinYMin meet\'"}},"innerRef":{"name":"innerRef","required":false,"description":"Ref to the parent `<svg />` used for scaling.","type":{"name":"Ref<SVGSVGElement> | undefined"}}},"filePath":"visx-responsive/src/components/ScaleSVG.tsx","lineNumber":20},"withParentSize":{"displayName":"withParentSize","kind":"function","props":{},"parameters":[{"name":"BaseComponent","type":{"name":"ComponentType<P>"}},{"name":"resizeObserverPolyfill","description":"Optionally inject a ResizeObserver polyfill, else this *must* be globally available.","type":{"name":"ResizeObserverPolyfill"}}],"returnType":"ComponentType<{ [Key in keyof (Omit<P, keyof WithParentSizeState> & { initialWidth?: number | undefined; initialHeight?: number | undefined; } & DebounceSettings)]: (Omit<P, keyof WithParentSizeState> & { initialWidth?: number | undefined; initialHeight?: number | undefined; } & DebounceSettings)[Key]; }>","filePath":"visx-responsive/src/enhancers/withParentSize.tsx","lineNumber":35},"withScreenSize":{"displayName":"withScreenSize","kind":"function","props":{},"parameters":[{"name":"BaseComponent","type":{"name":"ComponentType<P>"}}],"returnType":"ComponentType<{ [Key in keyof (Omit<P, keyof WithScreenSizeState> & { windowResizeDebounceTime?: number | undefined; } & DebounceSettings)]: (Omit<P, keyof WithScreenSizeState> & { windowResizeDebounceTime?: number | undefined; } & DebounceSettings)[Key]; }>","filePath":"visx-responsive/src/enhancers/withScreenSize.tsx","lineNumber":27},"useScreenSize":{"displayName":"useScreenSize","kind":"hook","props":{"initialSize":{"name":"initialSize","required":false,"description":"Initial size before measuring the screen.","type":{"name":"ScreenSize | undefined"},"defaultValue":{"value":"defaultInitialSize"}},"debounceTime":{"name":"debounceTime","required":false,"description":"Child render updates upon resize are delayed until `debounceTime` milliseconds _after_ the last resize event is observed. Defaults to `300`.","type":{"name":"number | undefined"},"defaultValue":{"value":"300"}},"enableDebounceLeadingCall":{"name":"enableDebounceLeadingCall","required":false,"description":"Optional flag to toggle leading debounce calls. When set to true this will ensure that the component always renders immediately. Defaults to `true`.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}}},"filePath":"visx-responsive/src/hooks/useScreenSize.ts","lineNumber":20}},"@visx/sankey":{"Sankey":{"displayName":"Sankey","description":"Exposes d3-sankey as a React component.","kind":"component","props":{"root":{"name":"root","required":true,"description":"The root data from which to derive the sankey layout.","type":{"name":"SankeyGraph<NodeDatum, LinkDatum>"}},"className":{"name":"className","required":false,"description":"The class name(s) applied to the g element container.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Render override function which is passed the computed sankey data graph","type":{"name":"SankeyChildrenFunction<NodeDatum, LinkDatum> | undefined"}},"nodeId":{"name":"nodeId","required":false,"description":"Sets the node id accessor.","type":{"name":"NodeIdAccessor<NodeDatum, LinkDatum> | undefined"}},"nodeWidth":{"name":"nodeWidth","required":false,"description":"Sets the node width.","type":{"name":"number | undefined"},"defaultValue":{"value":"2"}},"nodePadding":{"name":"nodePadding","required":false,"description":"Sets the node padding.","type":{"name":"number | undefined"}},"nodeAlign":{"name":"nodeAlign","required":false,"description":"Sets the node alignment function.","type":{"name":"NodeAlignment<NodeDatum, LinkDatum> | undefined"}},"extent":{"name":"extent","required":false,"description":"Sets the extent of the sankey layout.","type":{"name":"[[number, number], [number, number]] | undefined"}},"size":{"name":"size","required":false,"description":"Sets the size of the layout. A convenience method equivalent to using an extent of [[0, 0], [width, height]]","type":{"name":"[number, number] | undefined"}},"iterations":{"name":"iterations","required":false,"description":"Sets the number of relaxation iterations.","type":{"name":"number | undefined"}},"nodeSort":{"name":"nodeSort","required":false,"description":"Sets the node comparison function.","type":{"name":"((a: SankeyNode<NodeDatum, LinkDatum>, b: SankeyNode<NodeDatum, LinkDatum>) => number | null | undefined) | undefined"}},"linkSort":{"name":"linkSort","required":false,"description":"Sets the link comparison function","type":{"name":"((a: SankeyLink<NodeDatum, LinkDatum>, b: SankeyLink<NodeDatum, LinkDatum>) => number | null | undefined) | undefined"}},"nodeProps":{"name":"nodeProps","required":false,"description":"Sets the props for the default rendered node rect. Ignored when children is defined.","type":{"name":"NodeProps | undefined"},"defaultValue":{"value":"{}"}},"linkProps":{"name":"linkProps","required":false,"description":"Sets the props for the default rendered link path. Ignored when children is defined.","type":{"name":"LinkProps | undefined"},"defaultValue":{"value":"{}"}},"sourceAccessor":{"name":"sourceAccessor","required":false,"description":"Sets the source accessor for determining the link path.","type":{"name":"((this: any, d: SankeyLink<NodeDatum, LinkDatum>, ...args: any[]) => [number, number]) | undefined"}},"targetAccessor":{"name":"targetAccessor","required":false,"description":"Sets the target accessor for determining the link path.","type":{"name":"((this: any, d: SankeyLink<NodeDatum, LinkDatum>, ...args: any[]) => [number, number]) | undefined"}}},"filePath":"visx-sankey/src/Sankey.tsx","lineNumber":107}},"@visx/scale":{"applyDomain":{"displayName":"applyDomain","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/domain.ts","lineNumber":5},"applyRange":{"displayName":"applyRange","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/range.ts","lineNumber":5},"applyAlign":{"displayName":"applyAlign","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/align.ts","lineNumber":5},"applyBase":{"displayName":"applyBase","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/base.ts","lineNumber":5},"applyClamp":{"displayName":"applyClamp","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/clamp.ts","lineNumber":5},"applyConstant":{"displayName":"applyConstant","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/constant.ts","lineNumber":5},"applyExponent":{"displayName":"applyExponent","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/exponent.ts","lineNumber":5},"createColorInterpolator":{"displayName":"createColorInterpolator","kind":"function","props":{},"parameters":[{"name":"interpolate","type":{"name":"ScaleInterpolate | ScaleInterpolateParams"}}],"filePath":"visx-scale/src/utils/createColorInterpolator.ts","lineNumber":24},"applyInterpolate":{"displayName":"applyInterpolate","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/interpolate.ts","lineNumber":7},"isUtcScale":{"displayName":"isUtcScale","description":"Check if the scale is UTC or Time scale\\nWhen local time is equal to UTC, always return true\\n@param scale time or utc scale","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"ScaleTime<Output, Output, never>"}}],"filePath":"visx-scale/src/utils/isUtcScale.ts","lineNumber":11},"applyNice":{"displayName":"applyNice","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/nice.ts","lineNumber":49},"applyPadding":{"displayName":"applyPadding","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/padding.ts","lineNumber":5},"applyReverse":{"displayName":"applyReverse","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/reverse.ts","lineNumber":5},"applyRound":{"displayName":"applyRound","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/round.ts","lineNumber":7},"applyUnknown":{"displayName":"applyUnknown","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/unknown.ts","lineNumber":5},"applyZero":{"displayName":"applyZero","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/operators/zero.ts","lineNumber":5},"scaleOperator":{"displayName":"scaleOperator","kind":"function","props":{},"parameters":[{"name":"ops","type":{"name":"(\\"domain\\" | \\"range\\" | \\"reverse\\" | \\"clamp\\" | \\"interpolate\\" | \\"nice\\" | \\"round\\" | \\"zero\\" | \\"base\\" | \\"exponent\\" | \\"constant\\" | \\"unknown\\" | \\"align\\" | \\"padding\\")[]"}}],"filePath":"visx-scale/src/operators/scaleOperator.ts","lineNumber":66},"createLinearScale":{"displayName":"createLinearScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<LinearScaleConfig<Output>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/linear.ts","lineNumber":17},"createLogScale":{"displayName":"createLogScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<LogScaleConfig<Output>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/log.ts","lineNumber":17},"createPowScale":{"displayName":"createPowScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<PowScaleConfig<Output>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/power.ts","lineNumber":18},"createSqrtScale":{"displayName":"createSqrtScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<SqrtScaleConfig<Output>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/squareRoot.ts","lineNumber":17},"createSymlogScale":{"displayName":"createSymlogScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<SymlogScaleConfig<Output>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/symlog.ts","lineNumber":17},"createTimeScale":{"displayName":"createTimeScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<TimeScaleConfig<Output>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/time.ts","lineNumber":16},"createUtcScale":{"displayName":"createUtcScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<UtcScaleConfig<Output>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/utc.ts","lineNumber":16},"createQuantileScale":{"displayName":"createQuantileScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<QuantileScaleConfig<Output>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/quantile.ts","lineNumber":8},"createQuantizeScale":{"displayName":"createQuantizeScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<QuantizeScaleConfig<Output>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/quantize.ts","lineNumber":14},"createThresholdScale":{"displayName":"createThresholdScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<ThresholdScaleConfig<ThresholdInput, Output>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/threshold.ts","lineNumber":9},"createOrdinalScale":{"displayName":"createOrdinalScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<OrdinalScaleConfig<DiscreteInput, Output>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/ordinal.ts","lineNumber":8},"createPointScale":{"displayName":"createPointScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<PointScaleConfig<DiscreteInput>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/point.ts","lineNumber":15},"createBandScale":{"displayName":"createBandScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<BandScaleConfig<DiscreteInput>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/band.ts","lineNumber":15},"createRadialScale":{"displayName":"createRadialScale","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"Omit<RadialScaleConfig<Output>, \\"type\\">"}}],"filePath":"visx-scale/src/scales/radial.ts","lineNumber":15},"createScale":{"displayName":"createScale","description":"// Actual implementation","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"ScaleConfig<Output, DiscreteInput, ThresholdInput> | Omit<LinearScaleConfig<Output>, \\"type\\">"}}],"filePath":"visx-scale/src/createScale.ts","lineNumber":129},"updateScale":{"displayName":"updateScale","description":"// Actual implementation","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}},{"name":"config","type":{"name":"ScaleConfigWithoutType<Output, DiscreteInput, ThresholdInput>"}}],"filePath":"visx-scale/src/updateScale.ts","lineNumber":152},"inferScaleType":{"displayName":"inferScaleType","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"D3Scale<Output, DiscreteInput, ThresholdInput>"}}],"returnType":"keyof ScaleTypeToScaleConfig<DefaultOutput, StringLike, DefaultThresholdInput>","filePath":"visx-scale/src/utils/inferScaleType.ts","lineNumber":7},"coerceNumber":{"displayName":"coerceNumber","kind":"function","props":{},"parameters":[{"name":"val","type":{"name":"NumberLike | T"}}],"returnType":"number | T","filePath":"visx-scale/src/utils/coerceNumber.ts","lineNumber":3},"getTicks":{"displayName":"getTicks","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"Scale"}},{"name":"numTicks","type":{"name":"number"}}],"returnType":"ScaleInput<Scale>[]","filePath":"visx-scale/src/utils/getTicks.ts","lineNumber":3},"toString":{"displayName":"toString","kind":"function","props":{},"parameters":[{"name":"x","type":{"name":"T"}}],"filePath":"visx-scale/src/utils/toString.ts","lineNumber":3},"scaleCanBeZeroed":{"displayName":"scaleCanBeZeroed","kind":"function","props":{},"parameters":[{"name":"scaleConfig","type":{"name":"ScaleConfig<Output>"}}],"returnType":"boolean","filePath":"visx-scale/src/utils/scaleCanBeZeroed.ts","lineNumber":21}},"@visx/shape":{"stackOffset":{"displayName":"stackOffset","kind":"function","props":{},"parameters":[{"name":"offset","type":{"name":"\\"expand\\" | \\"diverging\\" | \\"none\\" | \\"silhouette\\" | \\"wiggle\\""}}],"filePath":"visx-shape/src/util/stackOffset.ts","lineNumber":19},"stackOrder":{"displayName":"stackOrder","kind":"function","props":{},"parameters":[{"name":"order","type":{"name":"\\"none\\" | \\"ascending\\" | \\"descending\\" | \\"insideout\\" | \\"reverse\\""}}],"filePath":"visx-shape/src/util/stackOrder.ts","lineNumber":19},"setNumberOrNumberAccessor":{"displayName":"setNumberOrNumberAccessor","description":"This is a workaround for TypeScript not inferring the correct\\nmethod overload/signature for some d3 shape methods.","kind":"function","props":{},"parameters":[{"name":"func","type":{"name":"(d: number | NumAccessor) => void"}},{"name":"value","type":{"name":"number | NumAccessor"}}],"filePath":"visx-shape/src/util/setNumberOrNumberAccessor.ts","lineNumber":5},"arc":{"displayName":"arc","kind":"function","props":{},"parameters":[{"name":"{\\n  innerRadius,\\n  outerRadius,\\n  cornerRadius,\\n  startAngle,\\n  endAngle,\\n  padAngle,\\n  padRadius,\\n}","type":{"name":"ArcPathConfig<Datum>"},"defaultValue":{"value":"{}"}}],"filePath":"visx-shape/src/util/D3ShapeFactories.ts","lineNumber":21},"area":{"displayName":"area","kind":"function","props":{},"parameters":[{"name":"{ x, x0, x1, y, y0, y1, defined, curve }","type":{"name":"AreaPathConfig<Datum>"},"defaultValue":{"value":"{}"}}],"filePath":"visx-shape/src/util/D3ShapeFactories.ts","lineNumber":42},"line":{"displayName":"line","kind":"function","props":{},"parameters":[{"name":"{ x, y, defined, curve }","type":{"name":"LinePathConfig<Datum>"},"defaultValue":{"value":"{}"}}],"filePath":"visx-shape/src/util/D3ShapeFactories.ts","lineNumber":56},"pie":{"displayName":"pie","kind":"function","props":{},"parameters":[{"name":"{\\n  startAngle,\\n  endAngle,\\n  padAngle,\\n  value,\\n  sort,\\n  sortValues,\\n}","type":{"name":"PiePathConfig<Datum>"},"defaultValue":{"value":"{}"}}],"filePath":"visx-shape/src/util/D3ShapeFactories.ts","lineNumber":66},"radialLine":{"displayName":"radialLine","kind":"function","props":{},"parameters":[{"name":"{\\n  angle,\\n  radius,\\n  defined,\\n  curve,\\n}","type":{"name":"RadialLinePathConfig<Datum>"},"defaultValue":{"value":"{}"}}],"filePath":"visx-shape/src/util/D3ShapeFactories.ts","lineNumber":91},"stack":{"displayName":"stack","kind":"function","props":{},"parameters":[{"name":"{ keys, value, order, offset }","type":{"name":"StackPathConfig<Datum, Key>"}}],"filePath":"visx-shape/src/util/D3ShapeFactories.ts","lineNumber":106},"Arc":{"displayName":"Arc","kind":"component","props":{"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"data":{"name":"data","required":false,"description":"A Datum for which to generate an arc.","type":{"name":"Datum | undefined"}},"children":{"name":"children","required":false,"description":"Override render function which is passed the configured arc generator as input.","type":{"name":"((args: { path: Arc<any, Datum>; }) => ReactNode) | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"innerRadius":{"name":"innerRadius","required":false,"description":"Number or accessor function which returns a number, which defines the arc innerRadius.","type":{"name":"number | Accessor<Datum, number> | undefined"}},"outerRadius":{"name":"outerRadius","required":false,"description":"Number or accessor function which returns a number, which defines the arc outerRadius.","type":{"name":"number | Accessor<Datum, number> | undefined"}},"cornerRadius":{"name":"cornerRadius","required":false,"description":"Number or accessor function which returns a number, which defines the arc cornerRadius.","type":{"name":"number | Accessor<Datum, number> | undefined"}},"startAngle":{"name":"startAngle","required":false,"description":"Number or accessor function which returns a number, which defines the arc startAngle.","type":{"name":"number | Accessor<Datum, number> | undefined"}},"endAngle":{"name":"endAngle","required":false,"description":"Number or accessor function which returns a number, which defines the arc endAngle.","type":{"name":"number | Accessor<Datum, number> | undefined"}},"padAngle":{"name":"padAngle","required":false,"description":"Number or accessor function which returns a number, which defines the arc padAngle.","type":{"name":"number | Accessor<Datum, number> | undefined"}},"padRadius":{"name":"padRadius","required":false,"description":"Number or accessor function which returns a number, which defines the arc padRadius.","type":{"name":"number | Accessor<Datum, number> | undefined"}}},"filePath":"visx-shape/src/shapes/Arc.tsx","lineNumber":18},"Pie":{"displayName":"Pie","kind":"component","props":{"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset of rendered Pie.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset of rendered Pie.","type":{"name":"number | undefined"}},"data":{"name":"data","required":false,"description":"Array of data to generate a Pie for.","type":{"name":"Datum[] | undefined"},"defaultValue":{"value":"[]"}},"centroid":{"name":"centroid","required":false,"description":"Optional render function invoked for each Datum to render something (e.g., a Label) at each pie centroid.","type":{"name":"((xyCoords: [number, number], arc: PieArcDatum<Datum>) => ReactNode) | undefined"}},"pieValue":{"name":"pieValue","required":false,"description":"Invoked for each datum, returns the value for a given Pie segment/arc datum.","type":{"name":"Accessor<Datum, number> | undefined"}},"pieSort":{"name":"pieSort","required":false,"description":"Comparator function to sort *arcs*, overridden by pieSortValues if defined. If pieSort and pieSortValues are null, arcs match input data order.","type":{"name":"((a: Datum, b: Datum) => number) | null | undefined"}},"pieSortValues":{"name":"pieSortValues","required":false,"description":"Comparator function to sort arc *values*, overrides pieSort if defined. If pieSort and pieSortValues are null, arcs match input data order.","type":{"name":"((a: number, b: number) => number) | null | undefined"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the configured arc generator as input.","type":{"name":"((provided: ProvidedProps<Datum>) => ReactNode) | undefined"}},"fill":{"name":"fill","required":false,"description":"Optional accessor function to return the fill string value of a given arc.","type":{"name":"string | StringAccessor<Datum> | undefined"},"defaultValue":{"value":"\'\'"}},"startAngle":{"name":"startAngle","required":false,"description":"Returns the start angle of the overall Pie shape (the first value starts at startAngle), with 0 at -y (12 o’clock) and positive angles proceeding clockwise.","type":{"name":"number | AngleAccessor<Datum> | undefined"}},"endAngle":{"name":"endAngle","required":false,"description":"Returns the end angle of the overall Pie shape (the last value ends at endAngle), with 0 at -y (12 o’clock) and positive angles proceeding clockwise.","type":{"name":"number | AngleAccessor<Datum> | undefined"}},"padAngle":{"name":"padAngle","required":false,"description":"Padding angle of the Pie shape, which sets a fixed linear distance separating adjacent arcs.","type":{"name":"number | AngleAccessor<Datum> | undefined"}},"innerRadius":{"name":"innerRadius","required":false,"description":"Number or accessor function which returns a number, which defines the arc innerRadius.","type":{"name":"number | Accessor<PieArcDatum<Datum>, number> | undefined"},"defaultValue":{"value":"0"}},"outerRadius":{"name":"outerRadius","required":false,"description":"Number or accessor function which returns a number, which defines the arc outerRadius.","type":{"name":"number | Accessor<PieArcDatum<Datum>, number> | undefined"}},"cornerRadius":{"name":"cornerRadius","required":false,"description":"Number or accessor function which returns a number, which defines the arc cornerRadius.","type":{"name":"number | Accessor<PieArcDatum<Datum>, number> | undefined"}},"padRadius":{"name":"padRadius","required":false,"description":"Number or accessor function which returns a number, which defines the arc padRadius.","type":{"name":"number | Accessor<PieArcDatum<Datum>, number> | undefined"}}},"filePath":"visx-shape/src/shapes/Pie.tsx","lineNumber":46},"Line":{"displayName":"Line","kind":"component","props":{"className":{"name":"className","required":false,"description":"className to apply to line element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"reference to line element.","type":{"name":"Ref<SVGLineElement> | undefined"}},"fill":{"name":"fill","required":false,"description":"fill color applied to line element.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'transparent\'"}},"from":{"name":"from","required":false,"description":"Starting x,y point of the line.","type":{"name":"Point | undefined"},"defaultValue":{"value":"{ x: 0, y: 0 }"}},"to":{"name":"to","required":false,"description":"Ending x,y point of the line.","type":{"name":"Point | undefined"},"defaultValue":{"value":"{ x: 1, y: 1 }"}}},"filePath":"visx-shape/src/shapes/Line.tsx","lineNumber":23},"LinePath":{"displayName":"LinePath","kind":"component","props":{"data":{"name":"data","required":false,"description":"Array of data for which to generate a line shape.","type":{"name":"Datum[] | undefined"},"defaultValue":{"value":"[]"}},"innerRef":{"name":"innerRef","required":false,"description":"React RefObject passed to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"children":{"name":"children","required":false,"description":"Override render function which is passed the configured path generator as input.","type":{"name":"((args: { path: Line<Datum>; }) => ReactNode) | undefined"}},"fill":{"name":"fill","required":false,"description":"Fill color of the path element.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'transparent\'"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"defined":{"name":"defined","required":false,"description":"The defined accessor for the shape. The final line shape includes all points for which this function returns true. By default all points are defined.","type":{"name":"AccessorForArrayItem<Datum, boolean> | undefined"},"defaultValue":{"value":"() => true"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the line generator. Defaults to curveLinear.","type":{"name":"CurveFactory | CurveFactoryLineOnly | undefined"}},"x":{"name":"x","required":false,"description":"Sets the x0 accessor function, and sets x1 to null.","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"y":{"name":"y","required":false,"description":"Sets the y0 accessor function, and sets y1 to null.","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}}},"filePath":"visx-shape/src/shapes/LinePath.tsx","lineNumber":20},"LineRadial":{"displayName":"LineRadial","kind":"component","props":{"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"fill":{"name":"fill","required":false,"description":"Fill color of the path element.","type":{"name":"string | undefined"},"defaultValue":{"value":"\'transparent\'"}},"data":{"name":"data","required":false,"description":"Array of data for which to generate a line shape.","type":{"name":"Datum[] | undefined"},"defaultValue":{"value":"[]"}},"innerRef":{"name":"innerRef","required":false,"description":"React RefObject passed to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"children":{"name":"children","required":false,"description":"Override render function which is passed the configured path generator as input.","type":{"name":"((args: { path: RadialLine<Datum>; }) => ReactNode) | undefined"}},"defined":{"name":"defined","required":false,"description":"The defined accessor for the shape. The final radialLine shape includes all points for which this function returns true. By default all points are defined.","type":{"name":"AccessorForArrayItem<Datum, boolean> | undefined"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the radialLine generator. Defaults to curveLinear.","type":{"name":"CurveFactory | CurveFactoryLineOnly | undefined"}},"angle":{"name":"angle","required":false,"description":"Returns the angle value in radians for a given Datum, with 0 at -y (12 o’clock).","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"radius":{"name":"radius","required":false,"description":"Returns the radius value in radians for a given Datum, with 0 at the center.","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}}},"filePath":"visx-shape/src/shapes/LineRadial.tsx","lineNumber":16},"Area":{"displayName":"Area","kind":"component","props":{"children":{"name":"children","required":false,"description":"Override render function which is passed the configured area generator as input.","type":{"name":"((args: { path: Area<Datum>; }) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"Classname applied to path element.","type":{"name":"string | undefined"}},"data":{"name":"data","required":false,"description":"Array of data for which to generate an area shape.","type":{"name":"Datum[] | undefined"},"defaultValue":{"value":"[]"}},"innerRef":{"name":"innerRef","required":false,"description":"React RefObject passed to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"defined":{"name":"defined","required":false,"description":"The defined accessor for the shape. The final area shape includes all points for which this function returns true. By default all points are defined.","type":{"name":"AccessorForArrayItem<Datum, boolean> | undefined"},"defaultValue":{"value":"() => true"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the area generator. Defaults to curveLinear.","type":{"name":"CurveFactory | undefined"}},"x":{"name":"x","required":false,"description":"Sets the x0 accessor function, and sets x1 to null.","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"x0":{"name":"x0","required":false,"description":"Specifies the x0 accessor function which defaults to d => d[0].","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"x1":{"name":"x1","required":false,"description":"Specifies the x1 accessor function which defaults to null.","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"y":{"name":"y","required":false,"description":"Sets the y0 accessor function, and sets y1 to null.","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"y0":{"name":"y0","required":false,"description":"Specifies the y0 accessor function which defaults to d => 0.","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"y1":{"name":"y1","required":false,"description":"Specifies the y1 accessor function which defaults to d => d[1].","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}}},"filePath":"visx-shape/src/shapes/Area.tsx","lineNumber":8},"AreaClosed":{"displayName":"AreaClosed","kind":"component","props":{"children":{"name":"children","required":false,"description":"Override render function which is passed the configured area generator as input.","type":{"name":"((args: { path: Area<Datum>; }) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"Classname applied to path element.","type":{"name":"string | undefined"}},"data":{"name":"data","required":false,"description":"Array of data for which to generate an area shape.","type":{"name":"Datum[] | undefined"},"defaultValue":{"value":"[]"}},"innerRef":{"name":"innerRef","required":false,"description":"React RefObject passed to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"defined":{"name":"defined","required":false,"description":"The defined accessor for the shape. The final area shape includes all points for which this function returns true. By default all points are defined.","type":{"name":"AccessorForArrayItem<Datum, boolean> | undefined"},"defaultValue":{"value":"() => true"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the area generator. Defaults to curveLinear.","type":{"name":"CurveFactory | undefined"}},"x":{"name":"x","required":false,"description":"Sets the x0 accessor function, and sets x1 to null.","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"x0":{"name":"x0","required":false,"description":"Specifies the x0 accessor function which defaults to d => d[0].","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"x1":{"name":"x1","required":false,"description":"Specifies the x1 accessor function which defaults to null.","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"y":{"name":"y","required":false,"description":"Sets the y0 accessor function, and sets y1 to null.","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"y0":{"name":"y0","required":false,"description":"Specifies the y0 accessor function which defaults to d => 0.","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"y1":{"name":"y1","required":false,"description":"Specifies the y1 accessor function which defaults to d => d[1].","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"yScale":{"name":"yScale","required":true,"type":{"name":"PositionScale"}}},"filePath":"visx-shape/src/shapes/AreaClosed.tsx","lineNumber":11},"Stack":{"displayName":"Stack","kind":"component","props":{"data":{"name":"data","required":true,"description":"Array of data for which generates a stack.","type":{"name":"Datum[]"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset of rendered Stack.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset of rendered Stack.","type":{"name":"number | undefined"}},"keys":{"name":"keys","required":false,"description":"Array of keys corresponding to stack layers.","type":{"name":"Key[] | undefined"}},"offset":{"name":"offset","required":false,"description":"Sets the stack offset to the pre-defined d3 offset, see https://github.com/d3/d3-shape#stack_offset.","type":{"name":"\\"expand\\" | \\"diverging\\" | \\"none\\" | \\"silhouette\\" | \\"wiggle\\" | undefined"}},"order":{"name":"order","required":false,"description":"Sets the stack order to the pre-defined d3 function, see https://github.com/d3/d3-shape#stack_order.","type":{"name":"\\"none\\" | \\"ascending\\" | \\"descending\\" | \\"insideout\\" | \\"reverse\\" | undefined"}},"value":{"name":"value","required":false,"description":"Sets the value accessor for a Datum, which defaults to d[key].","type":{"name":"number | ((d: Datum, key: Key) => number) | undefined"}},"color":{"name":"color","required":false,"description":"Returns a color for a given stack key and index.","type":{"name":"((key: Key, index: number) => string) | undefined"}},"children":{"name":"children","required":false,"description":"Override render function which is passed the configured arc generator as input.","type":{"name":"((args: { stacks: Series<Datum, Key>[]; path: Area<SeriesPoint<Datum>>; stack: Stack<any, Datum, Key>; }) => ReactNode) | undefined"}},"x":{"name":"x","required":false,"description":"Sets the x0 accessor function, and sets x1 to null.","type":{"name":"AccessorForArrayItem<SeriesPoint<Datum>, number> | undefined"}},"x0":{"name":"x0","required":false,"description":"Specifies the x0 accessor function which defaults to d => d[0].","type":{"name":"AccessorForArrayItem<SeriesPoint<Datum>, number> | undefined"}},"x1":{"name":"x1","required":false,"description":"Specifies the x1 accessor function which defaults to null.","type":{"name":"AccessorForArrayItem<SeriesPoint<Datum>, number> | undefined"}},"y0":{"name":"y0","required":false,"description":"Specifies the y0 accessor function which defaults to d => 0.","type":{"name":"AccessorForArrayItem<SeriesPoint<Datum>, number> | undefined"}},"y1":{"name":"y1","required":false,"description":"Specifies the y1 accessor function which defaults to d => d[1].","type":{"name":"AccessorForArrayItem<SeriesPoint<Datum>, number> | undefined"}},"defined":{"name":"defined","required":false,"description":"The defined accessor for the shape. The final area shape includes all points for which this function returns true. By default all points are defined.","type":{"name":"AccessorForArrayItem<SeriesPoint<Datum>, boolean> | undefined"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the area generator. Defaults to curveLinear.","type":{"name":"CurveFactory | undefined"}}},"filePath":"visx-shape/src/shapes/Stack.tsx","lineNumber":36},"AreaStack":{"displayName":"AreaStack","kind":"component","props":{"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"color":{"name":"color","required":false,"description":"Returns a color for a given stack key and index.","type":{"name":"((key: Key, index: number) => string) | undefined"}},"offset":{"name":"offset","required":false,"description":"Sets the stack offset to the pre-defined d3 offset, see https://github.com/d3/d3-shape#stack_offset.","type":{"name":"\\"expand\\" | \\"diverging\\" | \\"none\\" | \\"silhouette\\" | \\"wiggle\\" | undefined"}},"order":{"name":"order","required":false,"description":"Sets the stack order to the pre-defined d3 function, see https://github.com/d3/d3-shape#stack_order.","type":{"name":"\\"none\\" | \\"ascending\\" | \\"descending\\" | \\"insideout\\" | \\"reverse\\" | undefined"}},"x1":{"name":"x1","required":false,"description":"Specifies the x1 accessor function which defaults to null.","type":{"name":"AccessorForArrayItem<SeriesPoint<Datum>, number> | undefined"}},"x":{"name":"x","required":false,"description":"Sets the x0 accessor function, and sets x1 to null.","type":{"name":"AccessorForArrayItem<SeriesPoint<Datum>, number> | undefined"}},"y1":{"name":"y1","required":false,"description":"Specifies the y1 accessor function which defaults to d => d[1].","type":{"name":"AccessorForArrayItem<SeriesPoint<Datum>, number> | undefined"}},"children":{"name":"children","required":false,"description":"Override render function which is passed the configured arc generator as input.","type":{"name":"((args: { stacks: Series<Datum, Key>[]; path: Area<SeriesPoint<Datum>>; stack: Stack<any, Datum, Key>; }) => ReactNode) | undefined"}},"data":{"name":"data","required":true,"description":"Array of data for which generates a stack.","type":{"name":"Datum[]"}},"top":{"name":"top","required":false,"description":"Top offset of rendered Stack.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset of rendered Stack.","type":{"name":"number | undefined"}},"value":{"name":"value","required":false,"description":"Sets the value accessor for a Datum, which defaults to d[key].","type":{"name":"number | ((d: Datum, key: Key) => number) | undefined"}},"defined":{"name":"defined","required":false,"description":"The defined accessor for the shape. The final area shape includes all points for which this function returns true. By default all points are defined.","type":{"name":"AccessorForArrayItem<SeriesPoint<Datum>, boolean> | undefined"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the area generator. Defaults to curveLinear.","type":{"name":"CurveFactory | undefined"}},"x0":{"name":"x0","required":false,"description":"Specifies the x0 accessor function which defaults to d => d[0].","type":{"name":"AccessorForArrayItem<SeriesPoint<Datum>, number> | undefined"}},"y0":{"name":"y0","required":false,"description":"Specifies the y0 accessor function which defaults to d => 0.","type":{"name":"AccessorForArrayItem<SeriesPoint<Datum>, number> | undefined"}},"keys":{"name":"keys","required":false,"description":"Array of keys corresponding to stack layers.","type":{"name":"Key[] | undefined"}}},"filePath":"visx-shape/src/shapes/AreaStack.tsx","lineNumber":28},"Bar":{"displayName":"Bar","kind":"component","props":{"className":{"name":"className","required":false,"description":"className to apply to rect element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"reference to rect element.","type":{"name":"Ref<SVGRectElement> | undefined"}}},"filePath":"visx-shape/src/shapes/Bar.tsx","lineNumber":12},"useBarRoundedPath":{"displayName":"useBarRoundedPath","description":"Hook that returns a BarRounded path.","kind":"hook","props":{"height":{"name":"height","required":true,"description":"height of the bar starting from y","type":{"name":"number"}},"width":{"name":"width","required":true,"description":"width of the bar starting from x","type":{"name":"number"}},"radius":{"name":"radius","required":true,"description":"corner radius of the bar. clamped to center of the shorter side of the bar (Math.min(width,height) / 2)","type":{"name":"number"}},"x":{"name":"x","required":true,"description":"left position of the bar","type":{"name":"number"}},"y":{"name":"y","required":true,"description":"top position of the bar","type":{"name":"number"}},"top":{"name":"top","required":false,"description":"apply corner radius to top left corner, and top right corner","type":{"name":"boolean | undefined"}},"left":{"name":"left","required":false,"description":"apply corner radius to top left corner, and bottom left corner","type":{"name":"boolean | undefined"}},"all":{"name":"all","required":false,"description":"apply corner radius to top left corner, top right corner, bottom right corner, and bottom left corner","type":{"name":"boolean | undefined"}},"bottom":{"name":"bottom","required":false,"description":"apply corner radius to bottom right corner, and bottom left corner","type":{"name":"boolean | undefined"}},"right":{"name":"right","required":false,"description":"apply corner radius to top right corner, and bottom right corner","type":{"name":"boolean | undefined"}},"topLeft":{"name":"topLeft","required":false,"description":"apply corner radius to top left corner","type":{"name":"boolean | undefined"}},"topRight":{"name":"topRight","required":false,"description":"apply corner radius to top right corner","type":{"name":"boolean | undefined"}},"bottomRight":{"name":"bottomRight","required":false,"description":"apply corner radius to bottom right","type":{"name":"boolean | undefined"}},"bottomLeft":{"name":"bottomLeft","required":false,"description":"apply corner radius to bottom left corner","type":{"name":"boolean | undefined"}}},"filePath":"visx-shape/src/shapes/BarRounded.tsx","lineNumber":43},"BarRounded":{"displayName":"BarRounded","kind":"component","props":{"className":{"name":"className","required":false,"description":"className to apply to path element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"reference to path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"x":{"name":"x","required":true,"description":"left position of the bar","type":{"name":"number"}},"y":{"name":"y","required":true,"description":"top position of the bar","type":{"name":"number"}},"width":{"name":"width","required":true,"description":"width of the bar starting from x","type":{"name":"number"}},"height":{"name":"height","required":true,"description":"height of the bar starting from y","type":{"name":"number"}},"radius":{"name":"radius","required":true,"description":"corner radius of the bar. clamped to center of the shorter side of the bar (Math.min(width,height) / 2)","type":{"name":"number"}},"all":{"name":"all","required":false,"description":"apply corner radius to top left corner, top right corner, bottom right corner, and bottom left corner","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"top":{"name":"top","required":false,"description":"apply corner radius to top left corner, and top right corner","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"bottom":{"name":"bottom","required":false,"description":"apply corner radius to bottom right corner, and bottom left corner","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"left":{"name":"left","required":false,"description":"apply corner radius to top left corner, and bottom left corner","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"right":{"name":"right","required":false,"description":"apply corner radius to top right corner, and bottom right corner","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"topLeft":{"name":"topLeft","required":false,"description":"apply corner radius to top left corner","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"topRight":{"name":"topRight","required":false,"description":"apply corner radius to top right corner","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"bottomLeft":{"name":"bottomLeft","required":false,"description":"apply corner radius to bottom left corner","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"bottomRight":{"name":"bottomRight","required":false,"description":"apply corner radius to bottom right","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"children":{"name":"children","required":false,"description":"Optional children override.","type":{"name":"(({ path }: { path: string; }) => ReactNode) | undefined"}}},"filePath":"visx-shape/src/shapes/BarRounded.tsx","lineNumber":99},"getBandwidth":{"displayName":"getBandwidth","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"AnyD3Scale"}}],"filePath":"visx-shape/src/util/getBandwidth.ts","lineNumber":3},"BarGroup":{"displayName":"BarGroup","description":"Generates bar groups as an array of objects and renders `<rect />`s for each datum grouped by `key`. A general setup might look like this:\\n\\n```js\\nconst data = [{\\n date: date1,\\n key1: value,\\n key2: value,\\n key3: value\\n}, {\\n date: date2,\\n key1: value,\\n key2: value,\\n key3: value,\\n}];\\n\\nconst x0 = d => d.date;\\nconst keys = [key1, key2, key3];\\n\\nconst x0Scale = scaleBand({\\n domain: data.map(x0),\\n padding: 0.2\\n});\\nconst x1Scale = scaleBand({\\n domain: keys,\\n padding: 0.1\\n});\\nconst yScale = scaleLinear({\\n  domain: [0, Math.max(...data.map(d => Math.max(...keys.map(key => d[key]))))]\\n});\\nconst color = scaleOrdinal({\\n  domain: keys,\\n  range: [blue, green, purple]\\n});\\n```\\n\\nExample: [https://airbnb.io/visx/bargroup](https://airbnb.io/visx/bargroup)","kind":"component","props":{"data":{"name":"data","required":true,"description":"Array of data for which to generate grouped bars.","type":{"name":"Datum[]"}},"color":{"name":"color","required":true,"description":"Returns the desired color for a bar with a given key and index.","type":{"name":"(key: Key, index: number) => string"}},"keys":{"name":"keys","required":true,"description":"Array of keys corresponding to stack layers.","type":{"name":"Key[]"}},"className":{"name":"className","required":false,"description":"className applied to Bars.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset of rendered Bars.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset of rendered Bars.","type":{"name":"number | undefined"}},"x0":{"name":"x0","required":true,"description":"Returns the value mapped to the x0 (group position) of a bar","type":{"name":"Accessor<Datum, ScaleInput<X0Scale>>"}},"x0Scale":{"name":"x0Scale","required":true,"description":"@visx/scale or d3-scale that takes an x0 value (position of group) and maps it to an x0 axis position of the group.","type":{"name":"X0Scale"}},"x1Scale":{"name":"x1Scale","required":true,"description":"@visx/scale or d3-scale that takes a group key and maps it to an x axis position (within a group).","type":{"name":"X1Scale"}},"yScale":{"name":"yScale","required":true,"description":"@visx/scale or d3-scale that takes an y value (Datum[key]) and maps it to a y axis position.","type":{"name":"PositionScale"}},"height":{"name":"height","required":true,"description":"Total height of the y-axis.","type":{"name":"number"}},"children":{"name":"children","required":false,"description":"Override render function which is passed the computed BarGroups.","type":{"name":"((barGroups: BarGroup<Key>[]) => ReactNode) | undefined"}}},"filePath":"visx-shape/src/shapes/BarGroup.tsx","lineNumber":76},"BarGroupHorizontal":{"displayName":"BarGroupHorizontal","kind":"component","props":{"data":{"name":"data","required":true,"description":"Array of data for which to generate grouped bars.","type":{"name":"Datum[]"}},"color":{"name":"color","required":true,"description":"Returns the desired color for a bar with a given key and index.","type":{"name":"(key: Key, index: number) => string"}},"keys":{"name":"keys","required":true,"description":"Array of keys corresponding to stack layers.","type":{"name":"Key[]"}},"className":{"name":"className","required":false,"description":"className applied to Bars.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset of rendered Bars.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset of rendered Bars.","type":{"name":"number | undefined"}},"x":{"name":"x","required":false,"description":"Returns the value (Datum[key]) mapped to the x of a bar","type":{"name":"((barValue: number) => number) | undefined"},"defaultValue":{"value":"(/** val */) => 0"}},"y0":{"name":"y0","required":true,"description":"Returns the value mapped to the y0 (position of group) of a bar","type":{"name":"Accessor<Datum, ScaleInput<Y0Scale>>"}},"xScale":{"name":"xScale","required":true,"description":"@visx/scale or d3-scale that takes a key value (Datum[key]) and maps it to an x axis position (width of bar).","type":{"name":"PositionScale"}},"y0Scale":{"name":"y0Scale","required":true,"description":"@visx/scale or d3-scale that takes a y0 value (position of group) and maps it to a y axis position.","type":{"name":"Y0Scale"}},"y1Scale":{"name":"y1Scale","required":true,"description":"@visx/scale or d3-scale that takes a group key and maps it to an y axis position (within a group).","type":{"name":"Y1Scale"}},"width":{"name":"width","required":true,"description":"Total width of the x-axis.","type":{"name":"number"}},"children":{"name":"children","required":false,"description":"Override render function which is passed the computed Ba/rGroups.","type":{"name":"((barGroups: BarGroupHorizontal<Key>[]) => ReactNode) | undefined"}}},"filePath":"visx-shape/src/shapes/BarGroupHorizontal.tsx","lineNumber":40},"getX":{"displayName":"getX","kind":"function","props":{},"parameters":[{"name":"l","type":{"name":"any"}}],"filePath":"visx-shape/src/util/accessors.ts","lineNumber":3},"getY":{"displayName":"getY","kind":"function","props":{},"parameters":[{"name":"l","type":{"name":"any"}}],"filePath":"visx-shape/src/util/accessors.ts","lineNumber":7},"getSource":{"displayName":"getSource","kind":"function","props":{},"parameters":[{"name":"l","type":{"name":"any"}}],"filePath":"visx-shape/src/util/accessors.ts","lineNumber":11},"getTarget":{"displayName":"getTarget","kind":"function","props":{},"parameters":[{"name":"l","type":{"name":"any"}}],"filePath":"visx-shape/src/util/accessors.ts","lineNumber":15},"getFirstItem":{"displayName":"getFirstItem","kind":"function","props":{},"parameters":[{"name":"d","type":{"name":"any[]"}}],"filePath":"visx-shape/src/util/accessors.ts","lineNumber":19},"getSecondItem":{"displayName":"getSecondItem","kind":"function","props":{},"parameters":[{"name":"d","type":{"name":"any[]"}}],"filePath":"visx-shape/src/util/accessors.ts","lineNumber":23},"BarStack":{"displayName":"BarStack","kind":"component","props":{"data":{"name":"data","required":true,"description":"Array of data for which generates a stack.","type":{"name":"Datum[]"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset of rendered Stack.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset of rendered Stack.","type":{"name":"number | undefined"}},"keys":{"name":"keys","required":false,"description":"Array of keys corresponding to stack layers.","type":{"name":"Key[] | undefined"}},"offset":{"name":"offset","required":false,"description":"Sets the stack offset to the pre-defined d3 offset, see https://github.com/d3/d3-shape#stack_offset.","type":{"name":"\\"expand\\" | \\"diverging\\" | \\"none\\" | \\"silhouette\\" | \\"wiggle\\" | undefined"}},"order":{"name":"order","required":false,"description":"Sets the stack order to the pre-defined d3 function, see https://github.com/d3/d3-shape#stack_order.","type":{"name":"\\"none\\" | \\"ascending\\" | \\"descending\\" | \\"insideout\\" | \\"reverse\\" | undefined"}},"value":{"name":"value","required":false,"description":"Sets the value accessor for a Datum, which defaults to d[key].","type":{"name":"number | ((d: Datum, key: Key) => number) | undefined"}},"xScale":{"name":"xScale","required":true,"description":"@visx/scale or d3-scale that takes an x value and maps it to an x axis position.","type":{"name":"XScale"}},"yScale":{"name":"yScale","required":true,"description":"@visx/scale or d3-scale that takes a y value and maps it to an y axis position.","type":{"name":"YScale"}},"color":{"name":"color","required":true,"description":"Returns the desired color for a bar with a given key and index.","type":{"name":"(key: Key, index: number) => string"}},"children":{"name":"children","required":false,"description":"Override render function which is passed the configured stack generator as input.","type":{"name":"((stacks: BarStack<Datum, Key>[]) => ReactNode) | undefined"}},"x":{"name":"x","required":true,"description":"Returns the value mapped to the x of a bar.","type":{"name":"Accessor<Datum, ScaleInput<XScale>>"}},"y0":{"name":"y0","required":false,"description":"Returns the value mapped to the y0 of a bar.","type":{"name":"Accessor<SeriesPoint<Datum>, ScaleInput<YScale>> | undefined"},"defaultValue":{"value":"getFirstItem"}},"y1":{"name":"y1","required":false,"description":"Returns the value mapped to the y1 of a bar.","type":{"name":"Accessor<SeriesPoint<Datum>, ScaleInput<YScale>> | undefined"},"defaultValue":{"value":"getSecondItem"}}},"filePath":"visx-shape/src/shapes/BarStack.tsx","lineNumber":36},"BarStackHorizontal":{"displayName":"BarStackHorizontal","kind":"component","props":{"data":{"name":"data","required":true,"description":"Array of data for which generates a stack.","type":{"name":"Datum[]"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"top":{"name":"top","required":false,"description":"Top offset of rendered Stack.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset of rendered Stack.","type":{"name":"number | undefined"}},"keys":{"name":"keys","required":false,"description":"Array of keys corresponding to stack layers.","type":{"name":"Key[] | undefined"}},"offset":{"name":"offset","required":false,"description":"Sets the stack offset to the pre-defined d3 offset, see https://github.com/d3/d3-shape#stack_offset.","type":{"name":"\\"expand\\" | \\"diverging\\" | \\"none\\" | \\"silhouette\\" | \\"wiggle\\" | undefined"}},"order":{"name":"order","required":false,"description":"Sets the stack order to the pre-defined d3 function, see https://github.com/d3/d3-shape#stack_order.","type":{"name":"\\"none\\" | \\"ascending\\" | \\"descending\\" | \\"insideout\\" | \\"reverse\\" | undefined"}},"value":{"name":"value","required":false,"description":"Sets the value accessor for a Datum, which defaults to d[key].","type":{"name":"number | ((d: Datum, key: Key) => number) | undefined"}},"xScale":{"name":"xScale","required":true,"description":"@visx/scale or d3-scale that takes an x value and maps it to an x axis position.","type":{"name":"XScale"}},"yScale":{"name":"yScale","required":true,"description":"@visx/scale or d3-scale that takes a y value and maps it to an y axis position.","type":{"name":"YScale"}},"color":{"name":"color","required":true,"description":"Returns the desired color for a bar with a given key and index.","type":{"name":"(key: Key, index: number) => string"}},"children":{"name":"children","required":false,"description":"Override render function which is passed the configured stack generator as input.","type":{"name":"((stacks: BarStack<Datum, Key>[]) => ReactNode) | undefined"}},"x0":{"name":"x0","required":false,"description":"Returns the value mapped to the x0 of a bar.","type":{"name":"Accessor<SeriesPoint<Datum>, ScaleInput<XScale>> | undefined"},"defaultValue":{"value":"getFirstItem"}},"x1":{"name":"x1","required":false,"description":"Returns the value mapped to the x1 of a bar.","type":{"name":"Accessor<SeriesPoint<Datum>, ScaleInput<XScale>> | undefined"},"defaultValue":{"value":"getSecondItem"}},"y":{"name":"y","required":true,"description":"Returns the value mapped to the y of a bar.","type":{"name":"Accessor<Datum, ScaleInput<YScale>>"}}},"filePath":"visx-shape/src/shapes/BarStackHorizontal.tsx","lineNumber":29},"degreesToRadians":{"displayName":"degreesToRadians","kind":"function","props":{},"filePath":"visx-shape/src/util/trigonometry.ts","lineNumber":1},"pathHorizontalDiagonal":{"displayName":"pathHorizontalDiagonal","kind":"function","props":{},"parameters":[{"name":"{\\n  source,\\n  target,\\n  x,\\n  y,\\n}","type":{"name":"Required<AccessorProps<Link, Node>>"}}],"filePath":"visx-shape/src/shapes/link/diagonal/LinkHorizontal.tsx","lineNumber":7},"LinkHorizontalDiagonal":{"displayName":"LinkHorizontalDiagonal","kind":"component","props":{"x":{"name":"x","required":false,"description":"Given a node, returns its x coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getY"}},"y":{"name":"y","required":false,"description":"Given a node, returns its y coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getX"}},"source":{"name":"source","required":false,"description":"Given a link, returns the source node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getSource"}},"target":{"name":"target","required":false,"description":"Given a link, returns the target node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getTarget"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"path":{"name":"path","required":false,"description":"Path generator, given a link returns a path d attribute string","type":{"name":"PathType<Link> | undefined"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator as input.","type":{"name":"((args: { path: PathType<Link>; }) => ReactNode) | undefined"}},"data":{"name":"data","required":true,"description":"Datum for which to render a link.","type":{"name":"Link"}}},"filePath":"visx-shape/src/shapes/link/diagonal/LinkHorizontal.tsx","lineNumber":26},"pathVerticalDiagonal":{"displayName":"pathVerticalDiagonal","kind":"function","props":{},"parameters":[{"name":"{\\n  source,\\n  target,\\n  x,\\n  y,\\n}","type":{"name":"Required<AccessorProps<Link, Node>>"}}],"filePath":"visx-shape/src/shapes/link/diagonal/LinkVertical.tsx","lineNumber":7},"LinkVerticalDiagonal":{"displayName":"LinkVerticalDiagonal","kind":"component","props":{"x":{"name":"x","required":false,"description":"Given a node, returns its x coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getX"}},"y":{"name":"y","required":false,"description":"Given a node, returns its y coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getY"}},"source":{"name":"source","required":false,"description":"Given a link, returns the source node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getSource"}},"target":{"name":"target","required":false,"description":"Given a link, returns the target node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getTarget"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"path":{"name":"path","required":false,"description":"Path generator, given a link returns a path d attribute string","type":{"name":"PathType<Link> | undefined"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator as input.","type":{"name":"((args: { path: PathType<Link>; }) => ReactNode) | undefined"}},"data":{"name":"data","required":true,"description":"Datum for which to render a link.","type":{"name":"Link"}}},"filePath":"visx-shape/src/shapes/link/diagonal/LinkVertical.tsx","lineNumber":25},"pathRadialDiagonal":{"displayName":"pathRadialDiagonal","kind":"function","props":{},"parameters":[{"name":"{\\n  source,\\n  target,\\n  angle,\\n  radius,\\n}","type":{"name":"Required<RadialAccessorProps<Link, Node>>"}}],"filePath":"visx-shape/src/shapes/link/diagonal/LinkRadial.tsx","lineNumber":7},"LinkRadialDiagonal":{"displayName":"LinkRadialDiagonal","kind":"component","props":{"angle":{"name":"angle","required":true,"type":{"name":"((node: Node) => number) & ((node: Node) => number)"},"defaultValue":{"value":"getX"}},"radius":{"name":"radius","required":true,"type":{"name":"((node: Node) => number) & ((node: Node) => number)"},"defaultValue":{"value":"getY"}},"target":{"name":"target","required":false,"description":"Given a link, returns the target node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getTarget"}},"source":{"name":"source","required":false,"description":"Given a link, returns the source node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getSource"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"path":{"name":"path","required":false,"description":"Path generator, given a link returns a path d attribute string","type":{"name":"PathType<Link> | undefined"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator as input.","type":{"name":"((args: { path: PathType<Link>; }) => ReactNode) | undefined"}},"data":{"name":"data","required":true,"description":"Datum for which to render a link.","type":{"name":"Link"}}},"filePath":"visx-shape/src/shapes/link/diagonal/LinkRadial.tsx","lineNumber":29},"pathHorizontalCurve":{"displayName":"pathHorizontalCurve","kind":"function","props":{},"parameters":[{"name":"{\\n  source,\\n  target,\\n  x,\\n  y,\\n  percent,\\n}","type":{"name":"Required<AccessorProps<Link, Node>> & { percent: number; }"}}],"filePath":"visx-shape/src/shapes/link/curve/LinkHorizontalCurve.tsx","lineNumber":7},"LinkHorizontalCurve":{"displayName":"LinkHorizontalCurve","kind":"component","props":{"x":{"name":"x","required":false,"description":"Given a node, returns its x coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getY"}},"y":{"name":"y","required":false,"description":"Given a node, returns its y coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getX"}},"source":{"name":"source","required":false,"description":"Given a link, returns the source node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getSource"}},"target":{"name":"target","required":false,"description":"Given a link, returns the target node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getTarget"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"path":{"name":"path","required":false,"description":"Path generator, given a link returns a path d attribute string","type":{"name":"PathType<Link> | undefined"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator as input.","type":{"name":"((args: { path: PathType<Link>; }) => ReactNode) | undefined"}},"data":{"name":"data","required":true,"description":"Datum for which to render a link.","type":{"name":"Link"}},"percent":{"name":"percent","required":false,"type":{"name":"number | undefined"},"defaultValue":{"value":"0.2"}}},"filePath":"visx-shape/src/shapes/link/curve/LinkHorizontalCurve.tsx","lineNumber":41},"pathVerticalCurve":{"displayName":"pathVerticalCurve","kind":"function","props":{},"parameters":[{"name":"{\\n  source,\\n  target,\\n  x,\\n  y,\\n  percent,\\n}","type":{"name":"Required<AccessorProps<Link, Node>> & { percent: number; }"}}],"filePath":"visx-shape/src/shapes/link/curve/LinkVerticalCurve.tsx","lineNumber":7},"LinkVerticalCurve":{"displayName":"LinkVerticalCurve","kind":"component","props":{"percent":{"name":"percent","required":false,"type":{"name":"number | undefined"},"defaultValue":{"value":"0.2"}},"x":{"name":"x","required":false,"description":"Given a node, returns its x coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getX"}},"y":{"name":"y","required":false,"description":"Given a node, returns its y coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getY"}},"source":{"name":"source","required":false,"description":"Given a link, returns the source node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getSource"}},"target":{"name":"target","required":false,"description":"Given a link, returns the target node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getTarget"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"path":{"name":"path","required":false,"description":"Path generator, given a link returns a path d attribute string","type":{"name":"PathType<Link> | undefined"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator as input.","type":{"name":"((args: { path: PathType<Link>; }) => ReactNode) | undefined"}},"data":{"name":"data","required":true,"description":"Datum for which to render a link.","type":{"name":"Link"}}},"filePath":"visx-shape/src/shapes/link/curve/LinkVerticalCurve.tsx","lineNumber":41},"pathRadialCurve":{"displayName":"pathRadialCurve","kind":"function","props":{},"parameters":[{"name":"{\\n  source,\\n  target,\\n  x,\\n  y,\\n  percent,\\n}","type":{"name":"Required<AccessorProps<Link, Node>> & { percent: number; }"}}],"filePath":"visx-shape/src/shapes/link/curve/LinkRadialCurve.tsx","lineNumber":7},"LinkRadialCurve":{"displayName":"LinkRadialCurve","kind":"component","props":{"percent":{"name":"percent","required":false,"type":{"name":"number | undefined"},"defaultValue":{"value":"0.2"}},"x":{"name":"x","required":false,"description":"Given a node, returns its x coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getX"}},"y":{"name":"y","required":false,"description":"Given a node, returns its y coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getY"}},"source":{"name":"source","required":false,"description":"Given a link, returns the source node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getSource"}},"target":{"name":"target","required":false,"description":"Given a link, returns the target node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getTarget"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"path":{"name":"path","required":false,"description":"Path generator, given a link returns a path d attribute string","type":{"name":"PathType<Link> | undefined"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator as input.","type":{"name":"((args: { path: PathType<Link>; }) => ReactNode) | undefined"}},"data":{"name":"data","required":true,"description":"Datum for which to render a link.","type":{"name":"Link"}}},"filePath":"visx-shape/src/shapes/link/curve/LinkRadialCurve.tsx","lineNumber":51},"pathHorizontalLine":{"displayName":"pathHorizontalLine","kind":"function","props":{},"parameters":[{"name":"{\\n  source,\\n  target,\\n  x,\\n  y,\\n}","type":{"name":"Required<AccessorProps<Link, Node>>"}}],"filePath":"visx-shape/src/shapes/link/line/LinkHorizontalLine.tsx","lineNumber":7},"LinkHorizontalLine":{"displayName":"LinkHorizontalLine","kind":"component","props":{"x":{"name":"x","required":false,"description":"Given a node, returns its x coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getY"}},"y":{"name":"y","required":false,"description":"Given a node, returns its y coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getX"}},"source":{"name":"source","required":false,"description":"Given a link, returns the source node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getSource"}},"target":{"name":"target","required":false,"description":"Given a link, returns the target node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getTarget"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"path":{"name":"path","required":false,"description":"Path generator, given a link returns a path d attribute string","type":{"name":"PathType<Link> | undefined"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator as input.","type":{"name":"((args: { path: PathType<Link>; }) => ReactNode) | undefined"}},"data":{"name":"data","required":true,"description":"Datum for which to render a link.","type":{"name":"Link"}}},"filePath":"visx-shape/src/shapes/link/line/LinkHorizontalLine.tsx","lineNumber":32},"pathVerticalLine":{"displayName":"pathVerticalLine","kind":"function","props":{},"parameters":[{"name":"{\\n  source,\\n  target,\\n  x,\\n  y,\\n}","type":{"name":"Required<AccessorProps<Link, Node>>"}}],"filePath":"visx-shape/src/shapes/link/line/LinkVerticalLine.tsx","lineNumber":7},"LinkVerticalLine":{"displayName":"LinkVerticalLine","kind":"component","props":{"x":{"name":"x","required":false,"description":"Given a node, returns its x coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getX"}},"y":{"name":"y","required":false,"description":"Given a node, returns its y coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getY"}},"source":{"name":"source","required":false,"description":"Given a link, returns the source node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getSource"}},"target":{"name":"target","required":false,"description":"Given a link, returns the target node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getTarget"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"path":{"name":"path","required":false,"description":"Path generator, given a link returns a path d attribute string","type":{"name":"PathType<Link> | undefined"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator as input.","type":{"name":"((args: { path: PathType<Link>; }) => ReactNode) | undefined"}},"data":{"name":"data","required":true,"description":"Datum for which to render a link.","type":{"name":"Link"}}},"filePath":"visx-shape/src/shapes/link/line/LinkVerticalLine.tsx","lineNumber":32},"pathRadialLine":{"displayName":"pathRadialLine","kind":"function","props":{},"parameters":[{"name":"{\\n  source,\\n  target,\\n  x,\\n  y,\\n}","type":{"name":"Required<AccessorProps<Link, Node>>"}}],"filePath":"visx-shape/src/shapes/link/line/LinkRadialLine.tsx","lineNumber":7},"LinkRadialLine":{"displayName":"LinkRadialLine","kind":"component","props":{"x":{"name":"x","required":false,"description":"Given a node, returns its x coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getX"}},"y":{"name":"y","required":false,"description":"Given a node, returns its y coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getY"}},"source":{"name":"source","required":false,"description":"Given a link, returns the source node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getSource"}},"target":{"name":"target","required":false,"description":"Given a link, returns the target node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getTarget"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"path":{"name":"path","required":false,"description":"Path generator, given a link returns a path d attribute string","type":{"name":"PathType<Link> | undefined"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator as input.","type":{"name":"((args: { path: PathType<Link>; }) => ReactNode) | undefined"}},"data":{"name":"data","required":true,"description":"Datum for which to render a link.","type":{"name":"Link"}}},"filePath":"visx-shape/src/shapes/link/line/LinkRadialLine.tsx","lineNumber":37},"pathHorizontalStep":{"displayName":"pathHorizontalStep","kind":"function","props":{},"parameters":[{"name":"{\\n  source,\\n  target,\\n  x,\\n  y,\\n  percent,\\n}","type":{"name":"Required<AccessorProps<Link, Node>> & { percent: number; }"}}],"filePath":"visx-shape/src/shapes/link/step/LinkHorizontalStep.tsx","lineNumber":7},"LinkHorizontalStep":{"displayName":"LinkHorizontalStep","kind":"component","props":{"percent":{"name":"percent","required":false,"type":{"name":"number | undefined"},"defaultValue":{"value":"0.5"}},"x":{"name":"x","required":false,"description":"Given a node, returns its x coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getY"}},"y":{"name":"y","required":false,"description":"Given a node, returns its y coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getX"}},"source":{"name":"source","required":false,"description":"Given a link, returns the source node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getSource"}},"target":{"name":"target","required":false,"description":"Given a link, returns the target node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getTarget"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"path":{"name":"path","required":false,"description":"Path generator, given a link returns a path d attribute string","type":{"name":"PathType<Link> | undefined"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator as input.","type":{"name":"((args: { path: PathType<Link>; }) => ReactNode) | undefined"}},"data":{"name":"data","required":true,"description":"Datum for which to render a link.","type":{"name":"Link"}}},"filePath":"visx-shape/src/shapes/link/step/LinkHorizontalStep.tsx","lineNumber":38},"pathVerticalStep":{"displayName":"pathVerticalStep","kind":"function","props":{},"parameters":[{"name":"{\\n  source,\\n  target,\\n  x,\\n  y,\\n  percent,\\n}","type":{"name":"Required<AccessorProps<Link, Node>> & { percent: number; }"}}],"filePath":"visx-shape/src/shapes/link/step/LinkVerticalStep.tsx","lineNumber":7},"LinkVerticalStep":{"displayName":"LinkVerticalStep","kind":"component","props":{"percent":{"name":"percent","required":false,"type":{"name":"number | undefined"},"defaultValue":{"value":"0.5"}},"x":{"name":"x","required":false,"description":"Given a node, returns its x coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getX"}},"y":{"name":"y","required":false,"description":"Given a node, returns its y coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getY"}},"source":{"name":"source","required":false,"description":"Given a link, returns the source node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getSource"}},"target":{"name":"target","required":false,"description":"Given a link, returns the target node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getTarget"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"path":{"name":"path","required":false,"description":"Path generator, given a link returns a path d attribute string","type":{"name":"PathType<Link> | undefined"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator as input.","type":{"name":"((args: { path: PathType<Link>; }) => ReactNode) | undefined"}},"data":{"name":"data","required":true,"description":"Datum for which to render a link.","type":{"name":"Link"}}},"filePath":"visx-shape/src/shapes/link/step/LinkVerticalStep.tsx","lineNumber":38},"pathRadialStep":{"displayName":"pathRadialStep","kind":"function","props":{},"parameters":[{"name":"{\\n  source,\\n  target,\\n  x,\\n  y,\\n}","type":{"name":"Required<AccessorProps<Link, Node>>"}}],"filePath":"visx-shape/src/shapes/link/step/LinkRadialStep.tsx","lineNumber":6},"LinkRadialStep":{"displayName":"LinkRadialStep","kind":"component","props":{"percent":{"name":"percent","required":false,"type":{"name":"number | undefined"}},"x":{"name":"x","required":false,"description":"Given a node, returns its x coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getX"}},"y":{"name":"y","required":false,"description":"Given a node, returns its y coordinate.","type":{"name":"((node: Node) => number) | undefined"},"defaultValue":{"value":"getY"}},"source":{"name":"source","required":false,"description":"Given a link, returns the source node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getSource"}},"target":{"name":"target","required":false,"description":"Given a link, returns the target node.","type":{"name":"((link: Link) => Node) | undefined"},"defaultValue":{"value":"getTarget"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"React ref to the path element.","type":{"name":"Ref<SVGPathElement> | undefined"}},"path":{"name":"path","required":false,"description":"Path generator, given a link returns a path d attribute string","type":{"name":"PathType<Link> | undefined"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the configured path generator as input.","type":{"name":"((args: { path: PathType<Link>; }) => ReactNode) | undefined"}},"data":{"name":"data","required":true,"description":"Datum for which to render a link.","type":{"name":"Link"}}},"filePath":"visx-shape/src/shapes/link/step/LinkRadialStep.tsx","lineNumber":45},"getPoint":{"displayName":"getPoint","kind":"function","props":{"side":{"name":"side","required":true,"type":{"name":"number"}},"rotate":{"name":"rotate","required":false,"description":"Rotation transform to apply to polygon.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"sides":{"name":"sides","required":false,"description":"Number of polygon sides.","type":{"name":"number | undefined"},"defaultValue":{"value":"4"}},"size":{"name":"size","required":false,"description":"Size of the shape.","type":{"name":"number | undefined"},"defaultValue":{"value":"25"}},"center":{"name":"center","required":false,"description":"Polygon center position.","type":{"name":"{ x: number; y: number; } | undefined"},"defaultValue":{"value":"DEFAULT_CENTER"}}},"filePath":"visx-shape/src/shapes/Polygon.tsx","lineNumber":8},"getPoints":{"displayName":"getPoints","kind":"function","props":{"rotate":{"name":"rotate","required":false,"description":"Rotation transform to apply to polygon.","type":{"name":"number | undefined"}},"sides":{"name":"sides","required":false,"description":"Number of polygon sides.","type":{"name":"number | undefined"}},"size":{"name":"size","required":false,"description":"Size of the shape.","type":{"name":"number | undefined"}},"center":{"name":"center","required":false,"description":"Polygon center position.","type":{"name":"{ x: number; y: number; } | undefined"}}},"filePath":"visx-shape/src/shapes/Polygon.tsx","lineNumber":24},"Polygon":{"displayName":"Polygon","kind":"component","props":{"sides":{"name":"sides","required":false,"description":"Number of polygon sides.","type":{"name":"number | undefined"},"defaultValue":{"value":"4"}},"size":{"name":"size","required":false,"description":"Size of the shape.","type":{"name":"number | undefined"},"defaultValue":{"value":"25"}},"points":{"name":"points","required":false,"description":"Points to use to render the polygon. If this is defined, `sides`, `size`, `rotate`, and `center` are ignored.","type":{"name":"[number, number][] | undefined"}},"className":{"name":"className","required":false,"description":"className to apply to polygon element.","type":{"name":"string | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Rotation transform to apply to polygon.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"children":{"name":"children","required":false,"description":"Render function override which is passed the generated polygon points.","type":{"name":"((args: { points: [number, number][]; }) => ReactNode) | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"Reference to polygon element.","type":{"name":"Ref<SVGPolygonElement> | undefined"}},"center":{"name":"center","required":false,"description":"Polygon center position.","type":{"name":"{ x: number; y: number; } | undefined"},"defaultValue":{"value":"DEFAULT_CENTER"}}},"filePath":"visx-shape/src/shapes/Polygon.tsx","lineNumber":62},"Circle":{"displayName":"Circle","kind":"component","props":{"className":{"name":"className","required":false,"description":"className to apply to circle element.","type":{"name":"string | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"reference to circle element.","type":{"name":"Ref<SVGCircleElement> | undefined"}}},"filePath":"visx-shape/src/shapes/Circle.tsx","lineNumber":12},"getOrCreateMeasurementElement":{"displayName":"getOrCreateMeasurementElement","kind":"function","props":{},"parameters":[{"name":"elementId","type":{"name":"string"}}],"filePath":"visx-shape/src/util/getOrCreateMeasurementElement.ts","lineNumber":3},"getSplitLineSegments":{"displayName":"getSplitLineSegments","kind":"function","props":{},"parameters":[{"name":"{\\n  path,\\n  pointsInSegments,\\n  segmentation = \'x\',\\n  sampleRate = 1,\\n}","type":{"name":"GetLineSegmentsConfig"}}],"returnType":"LineSegments","filePath":"visx-shape/src/util/getSplitLineSegments.ts","lineNumber":42},"SplitLinePath":{"displayName":"SplitLinePath","kind":"component","props":{"segments":{"name":"segments","required":true,"description":"Array of data segments, where each segment will be a separate path in the rendered line.","type":{"name":"Datum[][]"}},"styles":{"name":"styles","required":true,"description":"Styles to apply to each segment. If fewer styles are specified than the number of segments, they will be re-used.","type":{"name":"Omit<SVGProps<SVGPathElement>, \\"x\\" | \\"y\\" | \\"children\\">[]"}},"children":{"name":"children","required":false,"description":"Override render function which is passed the configured path generator as input.","type":{"name":"SplitLinePathRenderer | undefined"}},"className":{"name":"className","required":false,"description":"className applied to path element.","type":{"name":"string | undefined"}},"defined":{"name":"defined","required":false,"description":"The defined accessor for the shape. The final line shape includes all points for which this function returns true. By default all points are defined.","type":{"name":"AccessorForArrayItem<Datum, boolean> | undefined"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the line generator. Defaults to curveLinear.","type":{"name":"CurveFactory | CurveFactoryLineOnly | undefined"}},"x":{"name":"x","required":false,"description":"Sets the x0 accessor function, and sets x1 to null.","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"y":{"name":"y","required":false,"description":"Sets the y0 accessor function, and sets y1 to null.","type":{"name":"number | AccessorForArrayItem<Datum, number> | undefined"}},"segmentation":{"name":"segmentation","required":true,"description":"How to segment the line\\n- `x`: Split based on x-position,\\n assuming x values increase only (`segment[i].x > segment[i-1].x`)\\n or decrease only (`segment[i].x < segment[i-1].x`).\\n- `y`: Split based on y-position,\\n assuming y values increase only (`segment[i].y > segment[i-1].y`)\\n or decrease only (`segment[i].y < segment[i-1].y`).\\n- `length`: Assuming the path length between consecutive points are equal.\\n\\nDefault is `x`.","type":{"name":"LineSegmentation"}},"sampleRate":{"name":"sampleRate","required":false,"description":"The `path` will be sampled every `sampleRate` pixel to generate the returned points.\\nDefault is `1` pixel.","type":{"name":"number | undefined"}}},"filePath":"visx-shape/src/shapes/SplitLinePath.tsx","lineNumber":34}},"@visx/stats":{"BoxPlot":{"displayName":"BoxPlot","kind":"component","props":{"left":{"name":"left","required":false,"description":"Left pixel offset of the glyph.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"top":{"name":"top","required":false,"description":"Top pixel offset of the glyph.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"className":{"name":"className","required":false,"description":"Classname to apply to parent group element.","type":{"name":"string | undefined"}},"horizontal":{"name":"horizontal","required":false,"description":"Whether the glyph should be rendered horizontally instead of vertically.","type":{"name":"boolean | undefined"}},"valueScale":{"name":"valueScale","required":true,"description":"Scale for converting input values to pixel offsets.","type":{"name":"PickD3Scale<ContinuousDomainScaleType, number>"}},"max":{"name":"max","required":false,"description":"Maximum BoxPlot value.","type":{"name":"number | undefined"}},"min":{"name":"min","required":false,"description":"Minimum BoxPlot value.","type":{"name":"number | undefined"}},"firstQuartile":{"name":"firstQuartile","required":false,"description":"First quartile BoxPlot value.","type":{"name":"number | undefined"}},"thirdQuartile":{"name":"thirdQuartile","required":false,"description":"Third quartile BoxPlot value.","type":{"name":"number | undefined"}},"median":{"name":"median","required":false,"description":"Median BoxPlot value.","type":{"name":"number | undefined"}},"boxWidth":{"name":"boxWidth","required":false,"description":"Width of the BoxPlot.","type":{"name":"number | undefined"},"defaultValue":{"value":"10"}},"fill":{"name":"fill","required":false,"description":"Fill color to apply to outlier circles and BoxPlot rect.","type":{"name":"string | undefined"}},"fillOpacity":{"name":"fillOpacity","required":false,"description":"Fill color opacity to apply to outlier circles and BoxPlot rect.","type":{"name":"string | number | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Stroke color to apply to outlier circles, BoxPlot rect, and min/median/max lines.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"Stroke width to apply to outlier circles, BoxPlot rect, and min/median/max lines.","type":{"name":"string | number | undefined"}},"rx":{"name":"rx","required":false,"description":"Rx to apply to BoxPlot rect.","type":{"name":"number | undefined"},"defaultValue":{"value":"2"}},"ry":{"name":"ry","required":false,"description":"Ry to apply to BoxPlot rect.","type":{"name":"number | undefined"},"defaultValue":{"value":"2"}},"outliers":{"name":"outliers","required":false,"description":"Array of outlier values to be rendered.","type":{"name":"number[] | undefined"},"defaultValue":{"value":"[]"}},"medianProps":{"name":"medianProps","required":false,"description":"Props to pass to the median glyph line.","type":{"name":"SVGProps<SVGLineElement> | undefined"},"defaultValue":{"value":"{}"}},"maxProps":{"name":"maxProps","required":false,"description":"Props to pass to the maximum glyph line.","type":{"name":"SVGProps<SVGLineElement> | undefined"},"defaultValue":{"value":"{}"}},"minProps":{"name":"minProps","required":false,"description":"Props to pass to the minimum glyph line.","type":{"name":"SVGProps<SVGLineElement> | undefined"},"defaultValue":{"value":"{}"}},"boxProps":{"name":"boxProps","required":false,"description":"Props to pass to the box glyph rect.","type":{"name":"SVGProps<SVGRectElement> | undefined"},"defaultValue":{"value":"{}"}},"outlierProps":{"name":"outlierProps","required":false,"description":"Props to pass to the outlier glyph circles.","type":{"name":"SVGProps<SVGCircleElement> | undefined"},"defaultValue":{"value":"{}"}},"container":{"name":"container","required":false,"description":"Whether to render a container rect element (e.g., to capture mouse events).","type":{"name":"boolean | undefined"},"defaultValue":{"value":"false"}},"containerProps":{"name":"containerProps","required":false,"description":"Props to pass to the container glyph rect if rendered.","type":{"name":"SVGProps<SVGRectElement> | undefined"},"defaultValue":{"value":"{}"}},"children":{"name":"children","required":false,"description":"Override render function to fully control the rendering of the BoxPlot glyph.","type":{"name":"((childRenderProps: ChildRenderProps) => ReactNode) | undefined"}}},"filePath":"visx-stats/src/BoxPlot.tsx","lineNumber":63},"ViolinPlot":{"displayName":"ViolinPlot","kind":"component","props":{"left":{"name":"left","required":false,"description":"Left pixel offset of the glyph.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"top":{"name":"top","required":false,"description":"Top pixel offset of the glyph.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"className":{"name":"className","required":false,"description":"Classname to apply to parent group element.","type":{"name":"string | undefined"}},"horizontal":{"name":"horizontal","required":false,"description":"Whether the glyph should be rendered horizontally instead of vertically.","type":{"name":"boolean | undefined"}},"valueScale":{"name":"valueScale","required":true,"description":"Scale for converting values to pixel offsets.","type":{"name":"PickD3Scale<ContinuousDomainScaleType, number>"}},"data":{"name":"data","required":true,"description":"Data used to draw the violin plot glyph. Violin plot values and counts should be able to be derived from data.","type":{"name":"Datum[]"}},"count":{"name":"count","required":false,"description":"Given an datum, returns the count for it.","type":{"name":"((d: Datum) => number) | undefined"},"defaultValue":{"value":"defaultCountAccessor"}},"value":{"name":"value","required":false,"description":"Given an datum, returns the value for it.","type":{"name":"((d: Datum) => number) | undefined"},"defaultValue":{"value":"defaultValueAccessor"}},"width":{"name":"width","required":false,"description":"Width of the violin plot glyph.","type":{"name":"number | undefined"},"defaultValue":{"value":"10"}},"children":{"name":"children","required":false,"description":"Override render function to fully control the rendering of the ViolinPlot glyph.","type":{"name":"((providedProps: { path: string; }) => ReactNode) | undefined"}}},"filePath":"visx-stats/src/ViolinPlot.tsx","lineNumber":28},"computeStats":{"displayName":"computeStats","kind":"function","props":{},"parameters":[{"name":"numericalArray","type":{"name":"number[]"}}],"filePath":"visx-stats/src/util/computeStats.ts","lineNumber":9}},"@visx/text":{"useText":{"displayName":"useText","kind":"hook","props":{"wordsByLines":{"name":"wordsByLines","required":true,"type":{"name":"WordsWithWidth[]"}},"startDy":{"name":"startDy","required":true,"type":{"name":"string"}},"transform":{"name":"transform","required":true,"type":{"name":"string"}}},"filePath":"visx-text/src/hooks/useText.ts","lineNumber":19},"Text":{"displayName":"Text","kind":"component","props":{"className":{"name":"className","required":false,"description":"className to apply to the SVGText element.","type":{"name":"string | undefined"}},"scaleToFit":{"name":"scaleToFit","required":false,"description":"Whether to scale the fontSize to accommodate the specified width.","type":{"name":"boolean | \\"shrink-only\\" | undefined"}},"angle":{"name":"angle","required":false,"description":"Rotational angle of the text.","type":{"name":"number | undefined"}},"textAnchor":{"name":"textAnchor","required":false,"description":"Horizontal text anchor.","type":{"name":"\\"end\\" | \\"start\\" | \\"middle\\" | \\"inherit\\" | undefined"}},"verticalAnchor":{"name":"verticalAnchor","required":false,"description":"Vertical text anchor.","type":{"name":"\\"end\\" | \\"start\\" | \\"middle\\" | undefined"}},"style":{"name":"style","required":false,"description":"Styles to be applied to the text (and used in computation of its size).","type":{"name":"CSSProperties | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"Ref passed to the Text SVG element.","type":{"name":"Ref<SVGSVGElement> | undefined"}},"innerTextRef":{"name":"innerTextRef","required":false,"description":"Ref passed to the Text text element","type":{"name":"Ref<SVGTextElement> | undefined"}},"x":{"name":"x","required":false,"description":"x position of the text.","type":{"name":"string | number | undefined"}},"y":{"name":"y","required":false,"description":"y position of the text.","type":{"name":"string | number | undefined"}},"dx":{"name":"dx","required":false,"description":"dx offset of the text.","type":{"name":"string | number | undefined"}},"dy":{"name":"dy","required":false,"description":"dy offset of the text.","type":{"name":"string | number | undefined"}},"lineHeight":{"name":"lineHeight","required":false,"description":"Desired \\"line height\\" of the text, implemented as y offsets.","type":{"name":"string | number | undefined"}},"capHeight":{"name":"capHeight","required":false,"description":"Cap height of the text.","type":{"name":"string | number | undefined"}},"fontSize":{"name":"fontSize","required":false,"description":"Font size of text.","type":{"name":"string | number | undefined"}},"fontFamily":{"name":"fontFamily","required":false,"description":"Font family of text.","type":{"name":"string | undefined"}},"fill":{"name":"fill","required":false,"description":"Fill color of text.","type":{"name":"string | undefined"}},"width":{"name":"width","required":false,"description":"Maximum width to occupy (approximate as words are not split).","type":{"name":"number | undefined"}},"children":{"name":"children","required":false,"description":"String (or number coercible to one) to be styled and positioned.","type":{"name":"string | number | undefined"}}},"filePath":"visx-text/src/Text.tsx","lineNumber":9}},"@visx/threshold":{"Threshold":{"displayName":"Threshold","kind":"component","props":{"className":{"name":"className","required":false,"description":"className applied to container g element.","type":{"name":"string | undefined"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the area generator. Defaults to curveLinear.","type":{"name":"CurveFactory | undefined"}},"clipAboveTo":{"name":"clipAboveTo","required":true,"description":"Specifies a constant value, or an accessor called per datum, above which the *upper area* is clipped.","type":{"name":"number | NumberAccessor<Datum>"}},"clipBelowTo":{"name":"clipBelowTo","required":true,"description":"Specifies a constant value, or an accessor called per datum, below which the *lower area* is clipped.","type":{"name":"number | NumberAccessor<Datum>"}},"id":{"name":"id","required":true,"description":"id for this threshold. If not set, multiple Threshold\'s on a page may conflict and interfere with each other.","type":{"name":"string"},"defaultValue":{"value":"\'\'"}},"data":{"name":"data","required":true,"description":"Array of data for which to generate a threshold area shape.","type":{"name":"Datum[]"}},"defined":{"name":"defined","required":false,"description":"The defined accessor for the shape. The final area shape includes all points for which this\\nfunction returns true. By default all points are defined.","type":{"name":"((datum: Datum, index: number, data: Datum[]) => boolean) | undefined"}},"x":{"name":"x","required":true,"description":"For the Area shape, specifies the x accessor function for a datum, which defaults to `d => d[0]`.\\nAlternatively this may be a constant x value.","type":{"name":"number | NumberAccessor<Datum>"}},"y0":{"name":"y0","required":true,"description":"For the Area shape, specifies the accessor function (or constant value) which generates\\nthe \\"lower\\" area bound to which \\"belowAreaProps\\" and \\"clipBelow\\" props apply. Defaults to `d => 0`.","type":{"name":"number | NumberAccessor<Datum>"}},"y1":{"name":"y1","required":true,"description":"For the Area shape, specifies the accessor function (or constant value) which generates\\nthe \\"upper\\" area bound to which \\"aboveAreaProps\\" and \\"clipAbove\\" props apply. Defaults to `d => d[1]`.","type":{"name":"number | NumberAccessor<Datum>"}},"aboveAreaProps":{"name":"aboveAreaProps","required":false,"description":"Additional props passed to the \\"above\\" Area shape.","type":{"name":"AreaProps<Datum> | undefined"}},"belowAreaProps":{"name":"belowAreaProps","required":false,"description":"Additional props passed to the \\"below\\" Area shape.","type":{"name":"AreaProps<Datum> | undefined"}}},"filePath":"visx-threshold/src/Threshold.tsx","lineNumber":51}},"@visx/tooltip":{"Portal":{"displayName":"Portal","description":"Render within a portal using a declarative component API.","kind":"component","props":{"zIndex":{"name":"zIndex","required":false,"description":"Optional z-index to set on the Portal.","type":{"name":"string | number | undefined"}},"children":{"name":"children","required":true,"description":"Content to render in the Portal.","type":{"name":"NonNullable<ReactNode>"}}},"filePath":"visx-tooltip/src/Portal.tsx","lineNumber":12},"useTooltip":{"displayName":"useTooltip","kind":"hook","props":{"tooltipOpen":{"name":"tooltipOpen","required":true,"description":"Whether the tooltip is currently open/visible.","type":{"name":"boolean"}},"tooltipLeft":{"name":"tooltipLeft","required":false,"description":"The left position (in pixels) of the tooltip.","type":{"name":"number | undefined"}},"tooltipTop":{"name":"tooltipTop","required":false,"description":"The top position (in pixels) of the tooltip.","type":{"name":"number | undefined"}},"tooltipData":{"name":"tooltipData","required":false,"description":"The data associated with the tooltip.","type":{"name":"TooltipData | undefined"}},"updateTooltip":{"name":"updateTooltip","required":true,"description":"Function to update tooltip state.","type":{"name":"(args: UpdateTooltipArgs<TooltipData>) => void"}},"showTooltip":{"name":"showTooltip","required":true,"description":"Function to show the tooltip with the specified position and data.","type":{"name":"(args: ShowTooltipArgs<TooltipData>) => void"}},"hideTooltip":{"name":"hideTooltip","required":true,"description":"Function to hide the tooltip.","type":{"name":"() => void"}}},"filePath":"visx-tooltip/src/hooks/useTooltip.ts","lineNumber":27},"withTooltip":{"displayName":"withTooltip","kind":"function","props":{},"parameters":[{"name":"BaseComponent","type":{"name":"ComponentType<BaseComponentProps & WithTooltipProvidedProps<TooltipData>>"}},{"name":"containerProps","type":{"name":"WithTooltipContainerProps"},"defaultValue":{"value":"{\\n    style: {\\n      position: \'relative\',\\n      width: \'inherit\',\\n      height: \'inherit\',\\n    } as const,\\n  }"}},{"name":"renderContainer","type":{"name":"RenderTooltipContainer"},"defaultValue":{"value":"(children, props) => <div {...props}>{children}</div>"}}],"filePath":"visx-tooltip/src/enhancers/withTooltip.tsx","lineNumber":14},"Tooltip":{"displayName":"Tooltip","kind":"component","props":{"left":{"name":"left","required":false,"description":"The `left` position of the Tooltip.","type":{"name":"number | undefined"}},"offsetLeft":{"name":"offsetLeft","required":false,"description":"Offset the `left` position of the Tooltip by this margin.","type":{"name":"number | undefined"}},"offsetTop":{"name":"offsetTop","required":false,"description":"Offset the `top` position of the Tooltip by this margin.","type":{"name":"number | undefined"}},"top":{"name":"top","required":false,"description":"The `top` position of the Tooltip.","type":{"name":"number | undefined"}},"applyPositionStyle":{"name":"applyPositionStyle","required":false,"description":"Applies position: \'absolute\' for tooltips to correctly position themselves\\nwhen `unstyled=true`. In a future major release this will be the default behavior.","type":{"name":"boolean | undefined"}},"unstyled":{"name":"unstyled","required":false,"description":"Whether to omit applying any style, except `left` / `top`.\\nIn most cases if this is `true` a developer must do one of the following\\nfor positioning to work correctly:\\n- set `applyPositionStyle=true`\\n- create a CSS selector like: `.visx-tooltip { position: \'absolute\' }`","type":{"name":"boolean | undefined"}}},"filePath":"visx-tooltip/src/tooltips/Tooltip.tsx","lineNumber":46},"useTooltipInPortal":{"displayName":"useTooltipInPortal","description":"Hook that handles rendering of a Tooltip or TooltipWithBounds in a Portal.\\nHandles conversion of container coordinates to page coordinates using the container bounds.","kind":"hook","props":{"containerRef":{"name":"containerRef","required":true,"description":"Ref callback to be attached to the container element for boundary detection.","type":{"name":"(element: HTMLElement | SVGElement | null) => void"}},"containerBounds":{"name":"containerBounds","required":true,"description":"The bounding box of the container element.","type":{"name":"RectReadOnly"}},"forceRefreshBounds":{"name":"forceRefreshBounds","required":true,"description":"Function to force a refresh of the container bounds.","type":{"name":"() => void"}},"TooltipInPortal":{"name":"TooltipInPortal","required":true,"description":"Component to render the tooltip in a portal.","type":{"name":"FC<TooltipInPortalProps>"}}},"filePath":"visx-tooltip/src/hooks/useTooltipInPortal.tsx","lineNumber":40}},"@visx/voronoi":{"voronoi":{"displayName":"voronoi","description":"Returns a configured d3 voronoi `layout`. calling `layout(data)` returns a voronoi *diagram*.\\nAlternatively call `layout.polygons(data)`, `layout.triangles(data)`, `layout.links(data)`","kind":"function","props":{},"parameters":[{"name":"{ width = 0, height = 0, x, y }","type":{"name":"Config<Datum>"}}],"filePath":"visx-voronoi/src/voronoi.ts","lineNumber":20},"VoronoiPolygon":{"displayName":"VoronoiPolygon","kind":"component","props":{"children":{"name":"children","required":false,"description":"Override render function which is provided polygon and generated path.","type":{"name":"(({ path, polygon }: { path: string; polygon: [number, number][]; }) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"className to apply to path element.","type":{"name":"string | undefined"}},"polygon":{"name":"polygon","required":false,"description":"Array of coordinate arrays for the polygon (e.g., [[x,y], [x1,y1], ...]), used to generate polygon path.","type":{"name":"[number, number][] | undefined"}}},"filePath":"visx-voronoi/src/components/VoronoiPolygon.tsx","lineNumber":13}},"@visx/wordcloud":{"useWordcloud":{"displayName":"useWordcloud","kind":"hook","props":{"width":{"name":"width","required":true,"description":"Width of the wordcloud layout.","type":{"name":"number"}},"height":{"name":"height","required":true,"description":"Height of the wordcloud layout.","type":{"name":"number"}},"words":{"name":"words","required":true,"description":"Sets the words array.","type":{"name":"Datum[]"}},"padding":{"name":"padding","required":false,"description":"Sets the padding accessor function, which indicates the numerical padding for each word.\\n\\n@default 1","type":{"name":"number | ((datum: Datum, index: number) => number) | undefined"}},"font":{"name":"font","required":false,"description":"Sets the font accessor function, which indicates the font face for each word.\\n\\n@default serif","type":{"name":"string | ((datum: Datum, index: number) => string) | undefined"}},"fontSize":{"name":"fontSize","required":false,"description":"Sets the fontSize accessor function, which indicates the numerical font size for each word.\\n\\n@default function(datum) { return Math.sqrt(datum.value); }","type":{"name":"number | ((datum: Datum, index: number) => number) | undefined"}},"fontStyle":{"name":"fontStyle","required":false,"description":"Sets the fontStyle accessor function, which indicates the font style for each word.\\n\\n@default normal","type":{"name":"string | ((datum: Datum, index: number) => string) | undefined"}},"fontWeight":{"name":"fontWeight","required":false,"description":"Sets the fontWeight accessor function, which indicates the font weight for each word.\\n\\n@default normal","type":{"name":"string | number | ((datum: Datum, index: number) => string | number) | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Sets the rotate accessor function, which indicates the rotation angle (in degrees) for each word.\\n\\n@default function() { return (~~(Math.random() * 6) -3) * 30; }","type":{"name":"number | ((datum: Datum, index: number) => number) | undefined"}},"spiral":{"name":"spiral","required":false,"description":"Sets the current type of spiral used for positioning words.\\nThis can either be one of the two built-in spirals, \\"archimedean\\" and \\"rectangular\\", or an arbitrary spiral generator can be used.\\n\\n@default archimedean","type":{"name":"\\"archimedean\\" | \\"rectangular\\" | ((size: [number, number]) => (t: number) => [number, number]) | undefined"}},"random":{"name":"random","required":false,"description":"Sets the internal random number generator, used for selecting the initial position of each word,\\nand the clockwise/counterclockwise direction of the spiral for each word. Random function should return a number in the range [0, 1).\\nWhen the returned value is a fixed value, the layout coordinates of each word will be the same every time the word cloud of the same data is rendered.\\nBy default, the browser\'s built-in \'Math.random\' is used, which means that each rendering will change the position of the word.\\n\\n@default Math.random","type":{"name":"(() => number) | undefined"}}},"filePath":"visx-wordcloud/src/useWordcloud.ts","lineNumber":5},"Wordcloud":{"displayName":"Wordcloud","kind":"component","props":{"children":{"name":"children","required":true,"type":{"name":"(words: CloudWord[]) => ReactNode"}},"width":{"name":"width","required":true,"description":"Width of the wordcloud layout.","type":{"name":"number"}},"height":{"name":"height","required":true,"description":"Height of the wordcloud layout.","type":{"name":"number"}},"words":{"name":"words","required":true,"description":"Sets the words array.","type":{"name":"Datum[]"}},"padding":{"name":"padding","required":false,"description":"Sets the padding accessor function, which indicates the numerical padding for each word.\\n\\n@default 1","type":{"name":"number | ((datum: Datum, index: number) => number) | undefined"}},"font":{"name":"font","required":false,"description":"Sets the font accessor function, which indicates the font face for each word.\\n\\n@default serif","type":{"name":"string | ((datum: Datum, index: number) => string) | undefined"}},"fontSize":{"name":"fontSize","required":false,"description":"Sets the fontSize accessor function, which indicates the numerical font size for each word.\\n\\n@default function(datum) { return Math.sqrt(datum.value); }","type":{"name":"number | ((datum: Datum, index: number) => number) | undefined"}},"fontStyle":{"name":"fontStyle","required":false,"description":"Sets the fontStyle accessor function, which indicates the font style for each word.\\n\\n@default normal","type":{"name":"string | ((datum: Datum, index: number) => string) | undefined"}},"fontWeight":{"name":"fontWeight","required":false,"description":"Sets the fontWeight accessor function, which indicates the font weight for each word.\\n\\n@default normal","type":{"name":"string | number | ((datum: Datum, index: number) => string | number) | undefined"}},"rotate":{"name":"rotate","required":false,"description":"Sets the rotate accessor function, which indicates the rotation angle (in degrees) for each word.\\n\\n@default function() { return (~~(Math.random() * 6) -3) * 30; }","type":{"name":"number | ((datum: Datum, index: number) => number) | undefined"}},"spiral":{"name":"spiral","required":false,"description":"Sets the current type of spiral used for positioning words.\\nThis can either be one of the two built-in spirals, \\"archimedean\\" and \\"rectangular\\", or an arbitrary spiral generator can be used.\\n\\n@default archimedean","type":{"name":"\\"archimedean\\" | \\"rectangular\\" | ((size: [number, number]) => (t: number) => [number, number]) | undefined"}},"random":{"name":"random","required":false,"description":"Sets the internal random number generator, used for selecting the initial position of each word,\\nand the clockwise/counterclockwise direction of the spiral for each word. Random function should return a number in the range [0, 1).\\nWhen the returned value is a fixed value, the layout coordinates of each word will be the same every time the word cloud of the same data is rendered.\\nBy default, the browser\'s built-in \'Math.random\' is used, which means that each rendering will change the position of the word.\\n\\n@default Math.random","type":{"name":"(() => number) | undefined"}}},"filePath":"visx-wordcloud/src/Wordcloud.tsx","lineNumber":10}},"@visx/xychart":{"getScaleBandwidth":{"displayName":"getScaleBandwidth","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"Scale"}}],"filePath":"visx-xychart/src/utils/getScaleBandwidth.ts","lineNumber":3},"isValidNumber":{"displayName":"isValidNumber","kind":"function","props":{},"parameters":[{"name":"_","type":{"name":"unknown"}}],"returnType":"boolean","filePath":"visx-xychart/src/typeguards/isValidNumber.ts","lineNumber":1},"BaseAnnotation":{"displayName":"BaseAnnotation","kind":"component","props":{"dx":{"name":"dx","required":false,"description":"x delta of the Label from the Subject.","type":{"name":"number | undefined"}},"dy":{"name":"dy","required":false,"description":"y delta of the Label from the Subject.","type":{"name":"number | undefined"}},"canEditLabel":{"name":"canEditLabel","required":false,"description":"Whether the Label position (dx, dy) is editable.","type":{"name":"boolean | undefined"}},"canEditSubject":{"name":"canEditSubject","required":false,"description":"Whether the Subject position (x, y) is editable.","type":{"name":"boolean | undefined"}},"children":{"name":"children","required":true,"description":"Annotation children (Subject, Label, Connector)","type":{"name":"ReactNode"}},"onDragEnd":{"name":"onDragEnd","required":false,"description":"Callback invoked on drag end.","type":{"name":"(({ x, y, dx, dy, event }: HandlerArgs) => void) | undefined"}},"onDragMove":{"name":"onDragMove","required":false,"description":"Callback invoked on drag move.","type":{"name":"(({ x, y, dx, dy, event }: HandlerArgs) => void) | undefined"}},"onDragStart":{"name":"onDragStart","required":false,"description":"Callback invoked on drag start.","type":{"name":"(({ x, y, dx, dy, event }: HandlerArgs) => void) | undefined"}},"AnnotationComponent":{"name":"AnnotationComponent","required":true,"description":"Annotation component to render.","type":{"name":"FC<AnnotationProps> | FC<EditableAnnotationProps>"}},"dataKey":{"name":"dataKey","required":false,"description":"Key for series to which datum belongs (used for x/yAccessors). Alternatively xAccessor + yAccessor may be specified.","type":{"name":"string | undefined"}},"datum":{"name":"datum","required":true,"description":"Datum to annotate, used for Annotation positioning.","type":{"name":"Datum"}},"xAccessor":{"name":"xAccessor","required":false,"description":"If dataKey is not specified, you must specify an xAccessor for datum.","type":{"name":"((d: Datum) => ScaleInput<XScale>) | undefined"}},"yAccessor":{"name":"yAccessor","required":false,"description":"If dataKey is not specified, you must specify an yAccessor for datum.","type":{"name":"((d: Datum) => ScaleInput<YScale>) | undefined"}}},"filePath":"visx-xychart/src/components/annotation/private/BaseAnnotation.tsx","lineNumber":41},"Annotation":{"displayName":"Annotation","kind":"component","props":{"editable":{"name":"editable","required":false,"type":{"name":"boolean | undefined"}},"dx":{"name":"dx","required":false,"description":"x delta of the Label from the Subject.","type":{"name":"number | undefined"}},"dy":{"name":"dy","required":false,"description":"y delta of the Label from the Subject.","type":{"name":"number | undefined"}},"canEditLabel":{"name":"canEditLabel","required":false,"description":"Whether the Label position (dx, dy) is editable.","type":{"name":"boolean | undefined"}},"canEditSubject":{"name":"canEditSubject","required":false,"description":"Whether the Subject position (x, y) is editable.","type":{"name":"boolean | undefined"}},"children":{"name":"children","required":true,"description":"Annotation children (Subject, Label, Connector)","type":{"name":"ReactNode"}},"onDragEnd":{"name":"onDragEnd","required":false,"description":"Callback invoked on drag end.","type":{"name":"(({ x, y, dx, dy, event }: HandlerArgs) => void) | undefined"}},"onDragMove":{"name":"onDragMove","required":false,"description":"Callback invoked on drag move.","type":{"name":"(({ x, y, dx, dy, event }: HandlerArgs) => void) | undefined"}},"onDragStart":{"name":"onDragStart","required":false,"description":"Callback invoked on drag start.","type":{"name":"(({ x, y, dx, dy, event }: HandlerArgs) => void) | undefined"}},"dataKey":{"name":"dataKey","required":false,"description":"Key for series to which datum belongs (used for x/yAccessors). Alternatively xAccessor + yAccessor may be specified.","type":{"name":"string | undefined"}},"datum":{"name":"datum","required":true,"description":"Datum to annotate, used for Annotation positioning.","type":{"name":"Datum"}},"xAccessor":{"name":"xAccessor","required":false,"description":"If dataKey is not specified, you must specify an xAccessor for datum.","type":{"name":"((d: Datum) => ScaleInput<XScale>) | undefined"}},"yAccessor":{"name":"yAccessor","required":false,"description":"If dataKey is not specified, you must specify an yAccessor for datum.","type":{"name":"((d: Datum) => ScaleInput<YScale>) | undefined"}}},"filePath":"visx-xychart/src/components/annotation/Annotation.tsx","lineNumber":19},"AnimatedAnnotation":{"displayName":"AnimatedAnnotation","kind":"component","props":{"editable":{"name":"editable","required":false,"type":{"name":"boolean | undefined"}},"dx":{"name":"dx","required":false,"description":"x delta of the Label from the Subject.","type":{"name":"number | undefined"}},"dy":{"name":"dy","required":false,"description":"y delta of the Label from the Subject.","type":{"name":"number | undefined"}},"canEditLabel":{"name":"canEditLabel","required":false,"description":"Whether the Label position (dx, dy) is editable.","type":{"name":"boolean | undefined"}},"canEditSubject":{"name":"canEditSubject","required":false,"description":"Whether the Subject position (x, y) is editable.","type":{"name":"boolean | undefined"}},"children":{"name":"children","required":true,"description":"Annotation children (Subject, Label, Connector)","type":{"name":"ReactNode"}},"onDragEnd":{"name":"onDragEnd","required":false,"description":"Callback invoked on drag end.","type":{"name":"(({ x, y, dx, dy, event }: HandlerArgs) => void) | undefined"}},"onDragMove":{"name":"onDragMove","required":false,"description":"Callback invoked on drag move.","type":{"name":"(({ x, y, dx, dy, event }: HandlerArgs) => void) | undefined"}},"onDragStart":{"name":"onDragStart","required":false,"description":"Callback invoked on drag start.","type":{"name":"(({ x, y, dx, dy, event }: HandlerArgs) => void) | undefined"}},"dataKey":{"name":"dataKey","required":false,"description":"Key for series to which datum belongs (used for x/yAccessors). Alternatively xAccessor + yAccessor may be specified.","type":{"name":"string | undefined"}},"datum":{"name":"datum","required":true,"description":"Datum to annotate, used for Annotation positioning.","type":{"name":"Datum"}},"xAccessor":{"name":"xAccessor","required":false,"description":"If dataKey is not specified, you must specify an xAccessor for datum.","type":{"name":"((d: Datum) => ScaleInput<XScale>) | undefined"}},"yAccessor":{"name":"yAccessor","required":false,"description":"If dataKey is not specified, you must specify an yAccessor for datum.","type":{"name":"((d: Datum) => ScaleInput<YScale>) | undefined"}}},"filePath":"visx-xychart/src/components/annotation/AnimatedAnnotation.tsx","lineNumber":57},"AnnotationLabel":{"displayName":"AnnotationLabel","description":"AnnotationLabel which provides text styles from theme.","kind":"component","props":{"anchorLineStroke":{"name":"anchorLineStroke","required":false,"description":"Stroke color of anchor line.","type":{"name":"string | undefined"}},"backgroundFill":{"name":"backgroundFill","required":false,"description":"Background color of label.","type":{"name":"string | undefined"}},"backgroundPadding":{"name":"backgroundPadding","required":false,"description":"Padding of text from background.","type":{"name":"number | { top?: number | undefined; right?: number | undefined; bottom?: number | undefined; left?: number | undefined; } | undefined"}},"backgroundProps":{"name":"backgroundProps","required":false,"description":"Additional props to be passed to background SVGRectElement.","type":{"name":"SVGProps<SVGRectElement> | undefined"}},"className":{"name":"className","required":false,"description":"Optional className to apply to container in addition to \'visx-annotation-label\'.","type":{"name":"string | undefined"}},"fontColor":{"name":"fontColor","required":false,"description":"Color of title and subtitle text.","type":{"name":"string | undefined"}},"horizontalAnchor":{"name":"horizontalAnchor","required":false,"description":"Whether the label is horizontally anchored to the start, middle, or end of its x position.","type":{"name":"\\"end\\" | \\"start\\" | \\"middle\\" | \\"inherit\\" | undefined"}},"resizeObserverPolyfill":{"name":"resizeObserverPolyfill","required":false,"description":"Optionally inject a ResizeObserver polyfill, else this *must* be globally available.","type":{"name":"(new (cb: ResizeObserverCallback) => ResizeObserver) | undefined"}},"showAnchorLine":{"name":"showAnchorLine","required":false,"description":"Whether to render a line indicating label text anchor.","type":{"name":"boolean | undefined"}},"showBackground":{"name":"showBackground","required":false,"description":"Whether to render a label background.","type":{"name":"boolean | undefined"}},"subtitle":{"name":"subtitle","required":false,"description":"Optional subtitle.","type":{"name":"string | undefined"}},"subtitleFontSize":{"name":"subtitleFontSize","required":false,"description":"Optional title font size.","type":{"name":"string | number | undefined"}},"subtitleFontWeight":{"name":"subtitleFontWeight","required":false,"description":"Optional title font weight.","type":{"name":"string | number | undefined"}},"subtitleDy":{"name":"subtitleDy","required":false,"description":"The vertical offset of the subtitle from the title.","type":{"name":"number | undefined"}},"subtitleProps":{"name":"subtitleProps","required":false,"description":"Optional subtitle Text props (to override color, etc.).","type":{"name":"Partial<TextProps> | undefined"}},"title":{"name":"title","required":false,"description":"Optional title.","type":{"name":"string | undefined"}},"titleFontSize":{"name":"titleFontSize","required":false,"description":"Optional title font size.","type":{"name":"string | number | undefined"}},"titleFontWeight":{"name":"titleFontWeight","required":false,"description":"Optional title font weight.","type":{"name":"string | number | undefined"}},"titleProps":{"name":"titleProps","required":false,"description":"Optional title Text props (to override color, etc.).","type":{"name":"Partial<TextProps> | undefined"}},"verticalAnchor":{"name":"verticalAnchor","required":false,"description":"Whether the label is vertically anchored to the start, middle, or end of its y position.","type":{"name":"\\"end\\" | \\"start\\" | \\"middle\\" | undefined"}},"width":{"name":"width","required":false,"description":"Width of annotation, including background, for text wrapping.","type":{"name":"number | undefined"}},"maxWidth":{"name":"maxWidth","required":false,"description":"Max width of annotation, including background, for text wrapping.","type":{"name":"number | undefined"}},"x":{"name":"x","required":false,"description":"Left offset of entire AnnotationLabel, if not specified uses x + dx from Annotation.","type":{"name":"number | undefined"}},"y":{"name":"y","required":false,"description":"Top offset of entire AnnotationLabel, if not specified uses y + dy from Annotation.","type":{"name":"number | undefined"}}},"filePath":"visx-xychart/src/components/annotation/AnnotationLabel.tsx","lineNumber":11},"AnnotationConnector":{"displayName":"AnnotationConnector","description":"AnnotationConnector which provides color from theme.","kind":"component","props":{"x":{"name":"x","required":false,"description":"x position of the Subject.","type":{"name":"number | undefined"}},"y":{"name":"y","required":false,"description":"y position of the Subject.","type":{"name":"number | undefined"}},"dx":{"name":"dx","required":false,"description":"x delta of the Label from the Subject.","type":{"name":"number | undefined"}},"dy":{"name":"dy","required":false,"description":"y delta of the Label from the Subject.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"Optional className to apply to container in addition to \'visx-annotation-connector\'.","type":{"name":"string | undefined"}},"type":{"name":"type","required":false,"description":"Connector type.","type":{"name":"\\"line\\" | \\"elbow\\" | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Color of the connector line.","type":{"name":"string | undefined"}},"pathProps":{"name":"pathProps","required":false,"description":"Optional additional props.","type":{"name":"SVGProps<SVGPathElement> | undefined"}}},"filePath":"visx-xychart/src/components/annotation/AnnotationConnector.tsx","lineNumber":9},"AnnotationCircleSubject":{"displayName":"AnnotationCircleSubject","description":"AnnotationSubjectCircle which provides color from theme.","kind":"component","props":{"x":{"name":"x","required":false,"description":"x position of the Subject.","type":{"name":"number | undefined"}},"y":{"name":"y","required":false,"description":"y position of the Subject.","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"Optional className to apply to CircleSubject in addition to \'visx-annotation-subject\'.","type":{"name":"string | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Color of CircleSubject.","type":{"name":"string | undefined"}},"radius":{"name":"radius","required":false,"description":"Radius of CircleSubject.","type":{"name":"number | undefined"}}},"filePath":"visx-xychart/src/components/annotation/AnnotationCircleSubject.tsx","lineNumber":9},"AnnotationLineSubject":{"displayName":"AnnotationLineSubject","description":"AnnotationLineSubject which provides color and dimensions from context.","kind":"component","props":{"x":{"name":"x","required":false,"description":"x position of LineSubject (for vertical LineSubjects).","type":{"name":"number | undefined"}},"y":{"name":"y","required":false,"description":"y position of LineSubject (for horizontal LineSubjects).","type":{"name":"number | undefined"}},"className":{"name":"className","required":false,"description":"Optional className to apply to LineSubject in addition to \'visx-annotation-subject\'.","type":{"name":"string | undefined"}},"orientation":{"name":"orientation","required":false,"description":"Orientation of line.","type":{"name":"\\"vertical\\" | \\"horizontal\\" | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Color of LineSubject.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"strokeWidth of LineSubject.","type":{"name":"number | undefined"}},"min":{"name":"min","required":false,"type":{"name":"number | undefined"}},"max":{"name":"max","required":false,"type":{"name":"number | undefined"}}},"filePath":"visx-xychart/src/components/annotation/AnnotationLineSubject.tsx","lineNumber":12},"BaseAxis":{"displayName":"BaseAxis","description":"Component which handles all xychart-specific logic for axes,\\nand passes processed props to a specified Axis / AnimatedAxis component.","kind":"component","props":{"children":{"name":"children","required":false,"description":"For more control over rendering or to add event handlers to datum, pass a function as children.","type":{"name":"((renderProps: AxisRendererProps<Scale>) => ReactNode) | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"The ref to the outermost axis group element.","type":{"name":"Ref<SVGGElement> | undefined"}},"stroke":{"name":"stroke","required":false,"description":"The color for the stroke of the lines.","type":{"name":"string | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"The pattern of dashes in the stroke.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The pixel value for the width of the lines.","type":{"name":"string | number | undefined"}},"top":{"name":"top","required":false,"description":"A top pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"A left pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"axisLineClassName":{"name":"axisLineClassName","required":false,"description":"The class name applied to the axis line element.","type":{"name":"string | undefined"}},"hideAxisLine":{"name":"hideAxisLine","required":false,"description":"If true, will hide the axis line.","type":{"name":"boolean | undefined"}},"hideTicks":{"name":"hideTicks","required":false,"description":"If true, will hide the ticks (but not the tick labels).","type":{"name":"boolean | undefined"}},"hideZero":{"name":"hideZero","required":false,"description":"If true, will hide the \'0\' value tick and tick label.","type":{"name":"boolean | undefined"}},"label":{"name":"label","required":false,"description":"The text for the axis label.","type":{"name":"string | undefined"}},"labelClassName":{"name":"labelClassName","required":false,"description":"The class name applied to the axis label text element.","type":{"name":"string | undefined"}},"labelOffset":{"name":"labelOffset","required":false,"description":"Pixel offset of the axis label (does not include tick label font size, which is accounted for automatically)","type":{"name":"number | undefined"}},"labelProps":{"name":"labelProps","required":false,"description":"Props applied to the axis label component.","type":{"name":"Partial<TextProps> | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"The number of ticks wanted for the axis (note this is approximate)","type":{"name":"number | undefined"}},"rangePadding":{"name":"rangePadding","required":false,"description":"Pixel padding to apply to axis sides.","type":{"name":"number | { start?: number | undefined; end?: number | undefined; } | undefined"}},"tickLineProps":{"name":"tickLineProps","required":false,"description":"Props to be applied to individual tick lines.","type":{"name":"LineProps | undefined"}},"tickClassName":{"name":"tickClassName","required":false,"description":"The class name applied to each tick group.","type":{"name":"string | undefined"}},"tickComponent":{"name":"tickComponent","required":false,"description":"Override the component used to render tick labels (instead of <Text /> from @visx/text).","type":{"name":"((tickRendererProps: TickRendererProps) => ReactNode) | undefined"}},"ticksComponent":{"name":"ticksComponent","required":false,"description":"Override the component used to render all tick lines and labels.","type":{"name":"((tickRendererProps: TicksRendererProps<Scale>) => ReactNode) | undefined"}},"tickFormat":{"name":"tickFormat","required":false,"description":"A [d3 formatter](https://github.com/d3/d3-scale/blob/master/README.md#continuous_tickFormat) for the tick text.","type":{"name":"TickFormatter<ScaleInput<Scale>> | undefined"}},"tickLabelProps":{"name":"tickLabelProps","required":false,"description":"Either an object with the props for all tick labels or a function that returns props for a given tick label.","type":{"name":"TickLabelProps<ScaleInput<Scale>> | undefined"}},"tickLength":{"name":"tickLength","required":false,"description":"The length of the tick lines.","type":{"name":"number | undefined"}},"tickStroke":{"name":"tickStroke","required":false,"description":"The color for the tick\'s stroke value.","type":{"name":"string | undefined"}},"tickTransform":{"name":"tickTransform","required":false,"description":"A custom SVG transform value to be applied to each tick group.","type":{"name":"string | undefined"}},"axisClassName":{"name":"axisClassName","required":false,"description":"The class name applied to the outermost axis group element.","type":{"name":"string | undefined"}},"tickValues":{"name":"tickValues","required":false,"description":"An array of values that determine the number and values of the ticks. Falls back to `scale.ticks()` or `.domain()`.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"orientation":{"name":"orientation","required":true,"description":"Required axis orientation.","type":{"name":"NonNullable<\\"top\\" | \\"left\\" | \\"right\\" | \\"bottom\\" | undefined>"}},"AxisComponent":{"name":"AxisComponent","required":true,"description":"Rendered component which is passed VxAxisProps by BaseAxis after processing.","type":{"name":"FC<AxisProps<Scale>>"}}},"filePath":"visx-xychart/src/components/axis/BaseAxis.tsx","lineNumber":22},"AnimatedAxis":{"displayName":"AnimatedAxis","kind":"component","props":{"children":{"name":"children","required":false,"description":"For more control over rendering or to add event handlers to datum, pass a function as children.","type":{"name":"((renderProps: AxisRendererProps<Scale>) => ReactNode) | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"The ref to the outermost axis group element.","type":{"name":"Ref<SVGGElement> | undefined"}},"orientation":{"name":"orientation","required":true,"description":"Required axis orientation.","type":{"name":"NonNullable<\\"top\\" | \\"left\\" | \\"right\\" | \\"bottom\\" | undefined>"}},"stroke":{"name":"stroke","required":false,"description":"The color for the stroke of the lines.","type":{"name":"string | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"The pattern of dashes in the stroke.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The pixel value for the width of the lines.","type":{"name":"string | number | undefined"}},"top":{"name":"top","required":false,"description":"A top pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"A left pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"axisLineClassName":{"name":"axisLineClassName","required":false,"description":"The class name applied to the axis line element.","type":{"name":"string | undefined"}},"hideAxisLine":{"name":"hideAxisLine","required":false,"description":"If true, will hide the axis line.","type":{"name":"boolean | undefined"}},"hideTicks":{"name":"hideTicks","required":false,"description":"If true, will hide the ticks (but not the tick labels).","type":{"name":"boolean | undefined"}},"hideZero":{"name":"hideZero","required":false,"description":"If true, will hide the \'0\' value tick and tick label.","type":{"name":"boolean | undefined"}},"label":{"name":"label","required":false,"description":"The text for the axis label.","type":{"name":"string | undefined"}},"labelClassName":{"name":"labelClassName","required":false,"description":"The class name applied to the axis label text element.","type":{"name":"string | undefined"}},"labelOffset":{"name":"labelOffset","required":false,"description":"Pixel offset of the axis label (does not include tick label font size, which is accounted for automatically)","type":{"name":"number | undefined"}},"labelProps":{"name":"labelProps","required":false,"description":"Props applied to the axis label component.","type":{"name":"Partial<TextProps> | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"The number of ticks wanted for the axis (note this is approximate)","type":{"name":"number | undefined"}},"rangePadding":{"name":"rangePadding","required":false,"description":"Pixel padding to apply to axis sides.","type":{"name":"number | { start?: number | undefined; end?: number | undefined; } | undefined"}},"tickLineProps":{"name":"tickLineProps","required":false,"description":"Props to be applied to individual tick lines.","type":{"name":"LineProps | undefined"}},"tickClassName":{"name":"tickClassName","required":false,"description":"The class name applied to each tick group.","type":{"name":"string | undefined"}},"tickComponent":{"name":"tickComponent","required":false,"description":"Override the component used to render tick labels (instead of <Text /> from @visx/text).","type":{"name":"((tickRendererProps: TickRendererProps) => ReactNode) | undefined"}},"ticksComponent":{"name":"ticksComponent","required":false,"description":"Override the component used to render all tick lines and labels.","type":{"name":"((tickRendererProps: TicksRendererProps<Scale>) => ReactNode) | undefined"}},"tickFormat":{"name":"tickFormat","required":false,"description":"A [d3 formatter](https://github.com/d3/d3-scale/blob/master/README.md#continuous_tickFormat) for the tick text.","type":{"name":"TickFormatter<ScaleInput<Scale>> | undefined"}},"tickLabelProps":{"name":"tickLabelProps","required":false,"description":"Either an object with the props for all tick labels or a function that returns props for a given tick label.","type":{"name":"TickLabelProps<ScaleInput<Scale>> | undefined"}},"tickLength":{"name":"tickLength","required":false,"description":"The length of the tick lines.","type":{"name":"number | undefined"}},"tickStroke":{"name":"tickStroke","required":false,"description":"The color for the tick\'s stroke value.","type":{"name":"string | undefined"}},"tickTransform":{"name":"tickTransform","required":false,"description":"A custom SVG transform value to be applied to each tick group.","type":{"name":"string | undefined"}},"axisClassName":{"name":"axisClassName","required":false,"description":"The class name applied to the outermost axis group element.","type":{"name":"string | undefined"}},"tickValues":{"name":"tickValues","required":false,"description":"An array of values that determine the number and values of the ticks. Falls back to `scale.ticks()` or `.domain()`.","type":{"name":"ScaleInput<Scale>[] | undefined"}},"animationTrajectory":{"name":"animationTrajectory","required":false,"description":"Animation trjectory of axis ticks.","type":{"name":"AnimationTrajectory | undefined"}}},"filePath":"visx-xychart/src/components/axis/AnimatedAxis.tsx","lineNumber":16},"BaseGrid":{"displayName":"BaseGrid","description":"Component that handles all","kind":"component","props":{"rows":{"name":"rows","required":false,"description":"Whether to render GridRows.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}},"columns":{"name":"columns","required":false,"description":"Whether to render GridColumns.","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}},"GridRowsComponent":{"name":"GridRowsComponent","required":true,"description":"Rendered GridRows component which is passed GridRowProps by BaseGrid.","type":{"name":"FC<AllGridRowsProps<AxisScale>>"}},"GridColumnsComponent":{"name":"GridColumnsComponent","required":true,"description":"Rendered GridColumns component which is passed GridColumnsProps by BaseGrid.","type":{"name":"FC<GridColumnsProps<AxisScale>>"}},"className":{"name":"className","required":false,"description":"classname to apply to line group element.","type":{"name":"string | undefined"}},"children":{"name":"children","required":false,"description":"Optionally override rendering of grid lines.","type":{"name":"((props: { lines: GridLines; }) => ReactNode) | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Grid line stroke color.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"Grid line stroke thickness.","type":{"name":"string | number | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"Grid line stroke-dasharray attribute.","type":{"name":"string | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"Approximate number of grid lines. Approximate due to d3 alogrithm, specify `tickValues` for precise control.","type":{"name":"number | undefined"}},"lineStyle":{"name":"lineStyle","required":false,"description":"Styles to apply as grid line style.","type":{"name":"CSSProperties | undefined"}},"offset":{"name":"offset","required":false,"description":"Pixel offset to apply as a translation (y- for Rows, x- for Columns) to each grid lines.","type":{"name":"number | undefined"}}},"filePath":"visx-xychart/src/components/grid/BaseGrid.tsx","lineNumber":20},"AnimatedGrid":{"displayName":"AnimatedGrid","kind":"component","props":{"children":{"name":"children","required":false,"description":"Optionally override rendering of grid lines.","type":{"name":"((props: { lines: GridLines; }) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"classname to apply to line group element.","type":{"name":"string | undefined"}},"offset":{"name":"offset","required":false,"description":"Pixel offset to apply as a translation (y- for Rows, x- for Columns) to each grid lines.","type":{"name":"number | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Grid line stroke color.","type":{"name":"string | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"Grid line stroke-dasharray attribute.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"Grid line stroke thickness.","type":{"name":"string | number | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"Approximate number of grid lines. Approximate due to d3 alogrithm, specify `tickValues` for precise control.","type":{"name":"number | undefined"}},"lineStyle":{"name":"lineStyle","required":false,"description":"Styles to apply as grid line style.","type":{"name":"CSSProperties | undefined"}},"rows":{"name":"rows","required":false,"description":"Whether to render GridRows.","type":{"name":"boolean | undefined"}},"columns":{"name":"columns","required":false,"description":"Whether to render GridColumns.","type":{"name":"boolean | undefined"}},"animationTrajectory":{"name":"animationTrajectory","required":false,"description":"Animation trajectory of grid lines.","type":{"name":"AnimationTrajectory | undefined"}}},"filePath":"visx-xychart/src/components/grid/AnimatedGrid.tsx","lineNumber":20},"Axis":{"displayName":"Axis","kind":"component","props":{"children":{"name":"children","required":false,"description":"For more control over rendering or to add event handlers to datum, pass a function as children.","type":{"name":"((renderProps: AxisRendererProps<Scale>) => ReactNode) | undefined"}},"innerRef":{"name":"innerRef","required":false,"description":"The ref to the outermost axis group element.","type":{"name":"Ref<SVGGElement> | undefined"}},"orientation":{"name":"orientation","required":true,"description":"Required axis orientation.","type":{"name":"NonNullable<\\"top\\" | \\"left\\" | \\"right\\" | \\"bottom\\" | undefined>"}},"stroke":{"name":"stroke","required":false,"description":"The color for the stroke of the lines.","type":{"name":"string | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"The pattern of dashes in the stroke.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"The pixel value for the width of the lines.","type":{"name":"string | number | undefined"}},"top":{"name":"top","required":false,"description":"A top pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"A left pixel offset applied to the entire axis.","type":{"name":"number | undefined"}},"axisLineClassName":{"name":"axisLineClassName","required":false,"description":"The class name applied to the axis line element.","type":{"name":"string | undefined"}},"hideAxisLine":{"name":"hideAxisLine","required":false,"description":"If true, will hide the axis line.","type":{"name":"boolean | undefined"}},"hideTicks":{"name":"hideTicks","required":false,"description":"If true, will hide the ticks (but not the tick labels).","type":{"name":"boolean | undefined"}},"hideZero":{"name":"hideZero","required":false,"description":"If true, will hide the \'0\' value tick and tick label.","type":{"name":"boolean | undefined"}},"label":{"name":"label","required":false,"description":"The text for the axis label.","type":{"name":"string | undefined"}},"labelClassName":{"name":"labelClassName","required":false,"description":"The class name applied to the axis label text element.","type":{"name":"string | undefined"}},"labelOffset":{"name":"labelOffset","required":false,"description":"Pixel offset of the axis label (does not include tick label font size, which is accounted for automatically)","type":{"name":"number | undefined"}},"labelProps":{"name":"labelProps","required":false,"description":"Props applied to the axis label component.","type":{"name":"Partial<TextProps> | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"The number of ticks wanted for the axis (note this is approximate)","type":{"name":"number | undefined"}},"rangePadding":{"name":"rangePadding","required":false,"description":"Pixel padding to apply to axis sides.","type":{"name":"number | { start?: number | undefined; end?: number | undefined; } | undefined"}},"tickLineProps":{"name":"tickLineProps","required":false,"description":"Props to be applied to individual tick lines.","type":{"name":"LineProps | undefined"}},"tickClassName":{"name":"tickClassName","required":false,"description":"The class name applied to each tick group.","type":{"name":"string | undefined"}},"tickComponent":{"name":"tickComponent","required":false,"description":"Override the component used to render tick labels (instead of <Text /> from @visx/text).","type":{"name":"((tickRendererProps: TickRendererProps) => ReactNode) | undefined"}},"ticksComponent":{"name":"ticksComponent","required":false,"description":"Override the component used to render all tick lines and labels.","type":{"name":"((tickRendererProps: TicksRendererProps<Scale>) => ReactNode) | undefined"}},"tickFormat":{"name":"tickFormat","required":false,"description":"A [d3 formatter](https://github.com/d3/d3-scale/blob/master/README.md#continuous_tickFormat) for the tick text.","type":{"name":"TickFormatter<ScaleInput<Scale>> | undefined"}},"tickLabelProps":{"name":"tickLabelProps","required":false,"description":"Either an object with the props for all tick labels or a function that returns props for a given tick label.","type":{"name":"TickLabelProps<ScaleInput<Scale>> | undefined"}},"tickLength":{"name":"tickLength","required":false,"description":"The length of the tick lines.","type":{"name":"number | undefined"}},"tickStroke":{"name":"tickStroke","required":false,"description":"The color for the tick\'s stroke value.","type":{"name":"string | undefined"}},"tickTransform":{"name":"tickTransform","required":false,"description":"A custom SVG transform value to be applied to each tick group.","type":{"name":"string | undefined"}},"axisClassName":{"name":"axisClassName","required":false,"description":"The class name applied to the outermost axis group element.","type":{"name":"string | undefined"}},"tickValues":{"name":"tickValues","required":false,"description":"An array of values that determine the number and values of the ticks. Falls back to `scale.ticks()` or `.domain()`.","type":{"name":"ScaleInput<Scale>[] | undefined"}}},"filePath":"visx-xychart/src/components/axis/Axis.tsx","lineNumber":12},"Grid":{"displayName":"Grid","kind":"component","props":{"children":{"name":"children","required":false,"description":"Optionally override rendering of grid lines.","type":{"name":"((props: { lines: GridLines; }) => ReactNode) | undefined"}},"className":{"name":"className","required":false,"description":"classname to apply to line group element.","type":{"name":"string | undefined"}},"offset":{"name":"offset","required":false,"description":"Pixel offset to apply as a translation (y- for Rows, x- for Columns) to each grid lines.","type":{"name":"number | undefined"}},"stroke":{"name":"stroke","required":false,"description":"Grid line stroke color.","type":{"name":"string | undefined"}},"strokeDasharray":{"name":"strokeDasharray","required":false,"description":"Grid line stroke-dasharray attribute.","type":{"name":"string | undefined"}},"strokeWidth":{"name":"strokeWidth","required":false,"description":"Grid line stroke thickness.","type":{"name":"string | number | undefined"}},"top":{"name":"top","required":false,"description":"Top offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"left":{"name":"left","required":false,"description":"Left offset to apply to glyph g element container.","type":{"name":"number | undefined"}},"numTicks":{"name":"numTicks","required":false,"description":"Approximate number of grid lines. Approximate due to d3 alogrithm, specify `tickValues` for precise control.","type":{"name":"number | undefined"}},"lineStyle":{"name":"lineStyle","required":false,"description":"Styles to apply as grid line style.","type":{"name":"CSSProperties | undefined"}},"rows":{"name":"rows","required":false,"description":"Whether to render GridRows.","type":{"name":"boolean | undefined"}},"columns":{"name":"columns","required":false,"description":"Whether to render GridColumns.","type":{"name":"boolean | undefined"}}},"filePath":"visx-xychart/src/components/grid/Grid.tsx","lineNumber":9},"Tooltip":{"displayName":"Tooltip","description":"This is a wrapper component which bails early if tooltip is not visible.\\nIf scroll detection is enabled in UseTooltipPortalOptions, this avoids re-rendering\\nthe component on every scroll. If many charts with Tooltips are rendered on a page,\\nthis also avoids creating many resize observers / hitting browser limits.","kind":"component","props":{"renderTooltip":{"name":"renderTooltip","required":true,"description":"When TooltipContext.tooltipOpen=true, this function is invoked and if the\\nreturn value is non-null, its content is rendered inside the tooltip container.\\nContent will be rendered in an HTML parent.","type":{"name":"(params: RenderTooltipParams<Datum>) => ReactNode"}},"renderGlyph":{"name":"renderGlyph","required":false,"description":"Function which handles rendering glyphs.","type":{"name":"((params: RenderTooltipGlyphProps<Datum>) => ReactNode) | undefined"}},"snapTooltipToDatumX":{"name":"snapTooltipToDatumX","required":false,"description":"Whether to snap tooltip + crosshair x-coord to the nearest Datum x-coord instead of the event x-coord.","type":{"name":"boolean | undefined"}},"snapTooltipToDatumY":{"name":"snapTooltipToDatumY","required":false,"description":"Whether to snap tooltip + crosshair y-coord to the nearest Datum y-coord instead of the event y-coord.","type":{"name":"boolean | undefined"}},"showVerticalCrosshair":{"name":"showVerticalCrosshair","required":false,"description":"Whether to show a vertical line at tooltip position.","type":{"name":"boolean | undefined"}},"showHorizontalCrosshair":{"name":"showHorizontalCrosshair","required":false,"description":"Whether to show a horizontal line at tooltip position.","type":{"name":"boolean | undefined"}},"showDatumGlyph":{"name":"showDatumGlyph","required":false,"description":"Whether to show a glyph at the tooltip position for the (single) nearest Datum.","type":{"name":"boolean | undefined"}},"showSeriesGlyphs":{"name":"showSeriesGlyphs","required":false,"description":"Whether to show a glyph for the nearest Datum in each series.","type":{"name":"boolean | undefined"}},"verticalCrosshairStyle":{"name":"verticalCrosshairStyle","required":false,"description":"Optional styles for the vertical crosshair, if visible.","type":{"name":"SVGProps<SVGLineElement> | undefined"}},"horizontalCrosshairStyle":{"name":"horizontalCrosshairStyle","required":false,"description":"Optional styles for the vertical crosshair, if visible.","type":{"name":"SVGProps<SVGLineElement> | undefined"}},"glyphStyle":{"name":"glyphStyle","required":false,"description":"Optional styles for the point, if visible.","type":{"name":"SVGProps<SVGCircleElement> | undefined"}},"resizeObserverPolyfill":{"name":"resizeObserverPolyfill","required":false,"description":"Tooltip depends on ResizeObserver, which may be polyfilled globally,\\npassed to XYChart, or injected into this component.","type":{"name":"(new (cb: ResizeObserverCallback) => ResizeObserver) | undefined"}},"className":{"name":"className","required":false,"description":"Optional className to apply to the Tooltip in addition to `visx-tooltip`.","type":{"name":"string | undefined"}},"style":{"name":"style","required":false,"description":"Styles to apply, unless `unstyled=true`.","type":{"name":"CSSProperties | undefined"}},"offsetLeft":{"name":"offsetLeft","required":false,"description":"Offset the `left` position of the Tooltip by this margin.","type":{"name":"number | undefined"}},"offsetTop":{"name":"offsetTop","required":false,"description":"Offset the `top` position of the Tooltip by this margin.","type":{"name":"number | undefined"}},"applyPositionStyle":{"name":"applyPositionStyle","required":false,"description":"Applies position: \'absolute\' for tooltips to correctly position themselves\\nwhen `unstyled=true`. In a future major release this will be the default behavior.","type":{"name":"boolean | undefined"}},"unstyled":{"name":"unstyled","required":false,"description":"Whether to omit applying any style, except `left` / `top`.\\nIn most cases if this is `true` a developer must do one of the following\\nfor positioning to work correctly:\\n- set `applyPositionStyle=true`\\n- create a CSS selector like: `.visx-tooltip { position: \'absolute\' }`","type":{"name":"boolean | undefined"}},"zIndex":{"name":"zIndex","required":false,"description":"Optional z-index to set on the Portal.","type":{"name":"string | number | undefined"}},"debounce":{"name":"debounce","required":false,"description":"Debounce resize or scroll events in milliseconds (needed for positioning)","type":{"name":"number | { scroll: number; resize: number; } | undefined"}},"detectBounds":{"name":"detectBounds","required":false,"description":"whether TooltipWithBounds should be used to auto-detect (page) boundaries and reposition itself.","type":{"name":"boolean | undefined"}},"scroll":{"name":"scroll","required":false,"description":"React to nested scroll changes, don\'t use this if you know your view is static","type":{"name":"boolean | undefined"}}},"filePath":"visx-xychart/src/components/Tooltip.tsx","lineNumber":342},"useEventEmitter":{"displayName":"useEventEmitter","description":"Hook for optionally subscribing to a specified EventType,\\nand returns emitter for emitting events.","kind":"hook","props":{},"filePath":"visx-xychart/src/hooks/useEventEmitter.ts","lineNumber":29},"EventEmitterProvider":{"displayName":"EventEmitterProvider","description":"Provider for EventEmitterContext.","kind":"component","props":{"children":{"name":"children","required":true,"type":{"name":"ReactNode"}}},"filePath":"visx-xychart/src/providers/EventEmitterProvider.tsx","lineNumber":6},"TooltipProvider":{"displayName":"TooltipProvider","description":"Simple wrapper around useTooltip, to provide tooltip data via context.","kind":"component","props":{"hideTooltipDebounceMs":{"name":"hideTooltipDebounceMs","required":false,"description":"Debounce time for when `hideTooltip` is invoked.","type":{"name":"number | undefined"},"defaultValue":{"value":"400"}},"children":{"name":"children","required":true,"type":{"name":"ReactNode"}}},"filePath":"visx-xychart/src/providers/TooltipProvider.tsx","lineNumber":15},"buildChartTheme":{"displayName":"buildChartTheme","description":"Provides a simplified API to build a full XYChartTheme.","kind":"function","props":{},"parameters":[{"name":"config","type":{"name":"ThemeConfig"}}],"returnType":"XYChartTheme","filePath":"visx-xychart/src/theme/buildChartTheme.ts","lineNumber":39},"useDataRegistry":{"displayName":"useDataRegistry","description":"Hook that returns an API equivalent to DataRegistry but which updates as needed for use as a hook.","kind":"hook","props":{"registerData":{"name":"registerData","required":true,"description":"Add one or more entries to the registry.","type":{"name":"(entryOrEntries: DataRegistryEntry<XScale, YScale, Datum> | DataRegistryEntry<XScale, YScale, Datum>[]) => void"}},"unregisterData":{"name":"unregisterData","required":true,"description":"Remove one or more entries to the registry.","type":{"name":"(keyOrKeys: string | string[]) => void"}},"entries":{"name":"entries","required":true,"description":"Returns all data registry entries. This value is not constant between calls.","type":{"name":"() => DataRegistryEntry<XScale, YScale, Datum>[]"}},"get":{"name":"get","required":true,"description":"Returns a specific entity from the registry, if it exists.","type":{"name":"(key: string) => DataRegistryEntry<XScale, YScale, Datum>"}},"keys":{"name":"keys","required":true,"description":"Returns the current registry keys.\\nThis value is constant between calls if the keys themselves have not changed.","type":{"name":"() => string[]"}}},"filePath":"visx-xychart/src/hooks/useDataRegistry.ts","lineNumber":7},"useDimensions":{"displayName":"useDimensions","description":"A hook for accessing and setting memoized width, height, and margin chart dimensions.","kind":"hook","props":{},"filePath":"visx-xychart/src/hooks/useDimensions.ts","lineNumber":12},"isDiscreteScale":{"displayName":"isDiscreteScale","kind":"function","props":{},"parameters":[{"name":"scaleConfig","type":{"name":"ScaleConfig<AxisScaleOutput, any, any>"}}],"filePath":"visx-xychart/src/utils/isDiscreteScale.ts","lineNumber":5},"useScales":{"displayName":"useScales","description":"A hook for creating memoized x- and y-scales.","kind":"hook","props":{"xScaleConfig":{"name":"xScaleConfig","required":true,"type":{"name":"ScaleConfig<AxisScaleOutput>"}},"yScaleConfig":{"name":"yScaleConfig","required":true,"type":{"name":"ScaleConfig<AxisScaleOutput>"}},"dataRegistry":{"name":"dataRegistry","required":true,"type":{"name":"Omit<DataRegistry<XScale, YScale, Datum>, \\"registry\\" | \\"registryKeys\\">"}},"xRange":{"name":"xRange","required":true,"type":{"name":"[number, number]"}},"yRange":{"name":"yRange","required":true,"type":{"name":"[number, number]"}}},"filePath":"visx-xychart/src/hooks/useScales.ts","lineNumber":10},"DataProvider":{"displayName":"DataProvider","kind":"component","props":{"initialDimensions":{"name":"initialDimensions","required":false,"description":"/* Optionally define the initial dimensions.","type":{"name":"Partial<{ width: number; height: number; margin: { top: number; right: number; bottom: number; left: number; }; }> | undefined"}},"theme":{"name":"theme","required":false,"description":"/* Optional chart theme provided by DataProvider, overrides any theme already available in context.","type":{"name":"XYChartTheme | undefined"}},"xScale":{"name":"xScale","required":true,"description":"/* x-scale configuration whose shape depends on scale type.","type":{"name":"XScaleConfig"}},"yScale":{"name":"yScale","required":true,"description":"/* y-scale configuration whose shape depends on scale type.","type":{"name":"YScaleConfig"}},"children":{"name":"children","required":true,"description":"/* Any React children.","type":{"name":"ReactNode"}},"horizontal":{"name":"horizontal","required":false,"description":"/* Determines whether Series will be plotted horizontally (e.g., horizontal bars). By default this will try to be inferred based on scale types.","type":{"name":"boolean | \\"auto\\" | undefined"}},"resizeObserverPolyfill":{"name":"resizeObserverPolyfill","required":false,"description":"Optionally set the resizeObserverPolyfill context, which will be available to\\nParentSize, Tooltip, and AnnotationLabel components.","type":{"name":"ResizeObserverPolyfill | undefined"}}},"filePath":"visx-xychart/src/providers/DataProvider.tsx","lineNumber":42},"usePointerEventEmitters":{"displayName":"usePointerEventEmitters","description":"A hook that simplifies creation of handlers for emitting\\npointermove, pointerout, and pointerup events to EventEmitterContext.","kind":"hook","props":{"source":{"name":"source","required":true,"description":"Source of the events, e.g., the component name.","type":{"name":"string"}},"onBlur":{"name":"onBlur","required":false,"type":{"name":"boolean | undefined"}},"onFocus":{"name":"onFocus","required":false,"type":{"name":"boolean | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"type":{"name":"boolean | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"type":{"name":"boolean | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"type":{"name":"boolean | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"type":{"name":"boolean | undefined"}}},"filePath":"visx-xychart/src/hooks/useEventEmitters.ts","lineNumber":20},"isPointerEvent":{"displayName":"isPointerEvent","description":"// functional definition of a PointerEvent (mouse, touch)","kind":"function","props":{},"parameters":[{"name":"event","type":{"name":"EventType"}}],"returnType":"boolean","filePath":"visx-xychart/src/typeguards/events.ts","lineNumber":6},"isFocusEvent":{"displayName":"isFocusEvent","kind":"function","props":{},"parameters":[{"name":"event","type":{"name":"EventType"}}],"returnType":"boolean","filePath":"visx-xychart/src/typeguards/events.ts","lineNumber":10},"findNearestDatumSingleDimension":{"displayName":"findNearestDatumSingleDimension","description":"Finds the nearest datum in a single direction (x or y) closest to the specified `scaledValue`.","kind":"function","props":{},"parameters":[{"name":"{\\n  scale,\\n  accessor,\\n  scaledValue,\\n  data,\\n}","type":{"name":"{ scale: Scale; accessor: (d: Datum) => ScaleInput<Scale>; scaledValue: number; data: Datum[]; }"}}],"filePath":"visx-xychart/src/utils/findNearestDatumSingleDimension.ts","lineNumber":7},"findNearestDatumX":{"displayName":"findNearestDatumX","kind":"function","props":{},"parameters":[{"name":"{\\n  xScale: scale,\\n  xAccessor: accessor,\\n  yScale,\\n  yAccessor,\\n  point,\\n  data,\\n}","type":{"name":"NearestDatumArgs<XScale, YScale, Datum>"}}],"returnType":"NearestDatumReturnType<Datum>","filePath":"visx-xychart/src/utils/findNearestDatumX.ts","lineNumber":5},"findNearestDatumY":{"displayName":"findNearestDatumY","kind":"function","props":{},"parameters":[{"name":"{\\n  yScale: scale,\\n  yAccessor: accessor,\\n  xScale,\\n  xAccessor,\\n  point,\\n  data,\\n}","type":{"name":"NearestDatumArgs<XScale, YScale, Datum>"}}],"returnType":"NearestDatumReturnType<Datum>","filePath":"visx-xychart/src/utils/findNearestDatumY.ts","lineNumber":5},"usePointerEventHandlers":{"displayName":"usePointerEventHandlers","description":"Hook that returns PointerEvent handlers that invoke the passed pointer\\nhandlers with the nearest datum to the event for the passed dataKey.","kind":"hook","props":{"dataKey":{"name":"dataKey","required":true,"description":"Controls whether callbacks are invoked for one or more registered dataKeys, the nearest dataKey, or all dataKeys.","type":{"name":"string | string[]"}},"findNearestDatum":{"name":"findNearestDatum","required":false,"description":"Optionally override the findNearestDatum logic.","type":{"name":"((params: NearestDatumArgs<XScale, YScale, Datum>) => NearestDatumReturnType<Datum>) | undefined"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked onFocus for one or more series based on dataKey.","type":{"name":"((params: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked onBlur.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked onPointerMove for one or more series based on dataKey.","type":{"name":"((params: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked onPointerOut.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked onPointerUp for one or more series based on dataKey.","type":{"name":"((params: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked onPointerDown for one or more series based on dataKey.","type":{"name":"((params: EventHandlerParams<Datum>) => void) | undefined"}},"allowedSources":{"name":"allowedSources","required":false,"description":"Valid event sources for which to invoke handlers.","type":{"name":"string[] | undefined"}}},"filePath":"visx-xychart/src/hooks/useEventHandlers.ts","lineNumber":51},"XYChart":{"displayName":"XYChart","kind":"component","props":{"accessibilityLabel":{"name":"accessibilityLabel","required":false,"description":"aria-label for the chart svg element.","type":{"name":"string | undefined"}},"captureEvents":{"name":"captureEvents","required":false,"description":"Whether to capture and dispatch pointer events to EventEmitter context (which e.g., Series subscribe to).","type":{"name":"boolean | undefined"}},"width":{"name":"width","required":false,"description":"Total width of the desired chart svg, including margin.","type":{"name":"number | undefined"}},"height":{"name":"height","required":false,"description":"Total height of the desired chart svg, including margin.","type":{"name":"number | undefined"}},"margin":{"name":"margin","required":false,"description":"Margin to apply around the outside.","type":{"name":"Margin | undefined"}},"children":{"name":"children","required":true,"description":"XYChart children (Series, Tooltip, etc.).","type":{"name":"ReactNode"}},"theme":{"name":"theme","required":false,"description":"If DataContext is not available, XYChart will wrap itself in a DataProvider and set this as the theme.","type":{"name":"XYChartTheme | undefined"}},"xScale":{"name":"xScale","required":false,"description":"If DataContext is not available, XYChart will wrap itself in a DataProvider and set this as the xScale config.","type":{"name":"XScaleConfig | undefined"}},"yScale":{"name":"yScale","required":false,"description":"If DataContext is not available, XYChart will wrap itself in a DataProvider and set this as the yScale config.","type":{"name":"YScaleConfig | undefined"}},"horizontal":{"name":"horizontal","required":false,"description":"/* If DataContext is not available, XYChart will wrap itself in a DataProvider and set this as horizontal. Determines whether Series will be plotted horizontally (e.g., horizontal bars). By default this will try to be inferred based on scale types.","type":{"name":"boolean | \\"auto\\" | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent _for each Series with pointerEvents={true}_.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events for the nearest Datum to the PointerEvent _for each Series with pointerEvents={true}_.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent _for each Series with pointerEvents={true}_.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent _for each Series with pointerEvents={true}_.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"pointerEventsDataKey":{"name":"pointerEventsDataKey","required":false,"description":"Whether to invoke PointerEvent handlers for all dataKeys, or the nearest dataKey.","type":{"name":"\\"all\\" | \\"nearest\\" | undefined"}},"resizeObserverPolyfill":{"name":"resizeObserverPolyfill","required":false,"description":"Responsive charts, <Tooltip />, and <AnnotationLabel /> depend on ResizeObserver\\nwhich may be polyfilled globally, passed to individual components or injected once\\ninto this component.","type":{"name":"ResizeObserverPolyfill | undefined"}}},"filePath":"visx-xychart/src/components/XYChart.tsx","lineNumber":98},"getScaledValueFactory":{"displayName":"getScaledValueFactory","description":"Returns a function that takes a Datum as input and returns a scaled value, correcting for the scale\'s bandwidth if applicable.","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"Scale"}},{"name":"accessor","type":{"name":"(d: Datum) => ScaleInput<Scale>"}},{"name":"align","type":{"name":"\\"end\\" | \\"start\\" | \\"center\\""},"defaultValue":{"value":"\'center\'"}}],"filePath":"visx-xychart/src/utils/getScaledValueFactory.ts","lineNumber":7},"getScaleBaseline":{"displayName":"getScaleBaseline","description":"Returns the output value of a scale\'s baseline value, which is either zero\\nor the minimum scale value if its domain doesn\'t include zero.","kind":"function","props":{},"parameters":[{"name":"scale","type":{"name":"Scale"}}],"filePath":"visx-xychart/src/utils/getScaleBaseline.ts","lineNumber":9},"useSeriesEvents":{"displayName":"useSeriesEvents","description":"This hook simplifies the logic for initializing Series event emitters + handlers.","kind":"hook","props":{"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"dataKey":{"name":"dataKey","required":true,"description":"Controls whether callbacks are invoked for one or more registered dataKeys, the nearest dataKey, or all dataKeys.","type":{"name":"string | string[]"}},"allowedSources":{"name":"allowedSources","required":false,"description":"Valid event sources for which to invoke handlers.","type":{"name":"string[] | undefined"}},"findNearestDatum":{"name":"findNearestDatum","required":false,"description":"Optionally override the findNearestDatum logic.","type":{"name":"((params: NearestDatumArgs<XScale, YScale, Datum>) => NearestDatumReturnType<Datum>) | undefined"}},"source":{"name":"source","required":true,"description":"The source of emitted events.","type":{"name":"string"}}},"filePath":"visx-xychart/src/hooks/useSeriesEvents.ts","lineNumber":33},"BaseGlyphSeries":{"displayName":"BaseGlyphSeries","kind":"component","props":{"dataKey":{"name":"dataKey","required":true,"description":"Required data key for the Series, should be unique across all series.","type":{"name":"string"}},"data":{"name":"data","required":true,"description":"Data for the Series.","type":{"name":"Datum[]"}},"xAccessor":{"name":"xAccessor","required":true,"description":"Given a Datum, returns the x-scale value.","type":{"name":"(d: Datum) => ScaleInput<XScale>"}},"yAccessor":{"name":"yAccessor","required":true,"description":"Given a Datum, returns the y-scale value.","type":{"name":"(d: Datum) => ScaleInput<YScale>"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}},"colorAccessor":{"name":"colorAccessor","required":false,"description":"Given a Datum, returns its color. Falls back to theme color if unspecified or if a null-ish value is returned.","type":{"name":"((d: Datum, index: number) => string | null | undefined) | undefined"}},"size":{"name":"size","required":false,"description":"The size of a `Glyph`, a `number` or a function which takes a `Datum` and returns a `number`.","type":{"name":"number | ((d: Datum) => number) | undefined"},"defaultValue":{"value":"8"}},"renderGlyphs":{"name":"renderGlyphs","required":true,"description":"Function which handles rendering glyphs.","type":{"name":"(glyphsProps: GlyphsProps<XScale, YScale, Datum>) => ReactNode"}},"xScale":{"name":"xScale","required":true,"type":{"name":"XScale"}},"yScale":{"name":"yScale","required":true,"type":{"name":"YScale"}}},"filePath":"visx-xychart/src/components/series/private/BaseGlyphSeries.tsx","lineNumber":23},"BaseGlyphSeriesWithRegisteredData":{"displayName":"BaseGlyphSeriesWithRegisteredData","kind":"component","props":{"dataKey":{"name":"dataKey","required":true,"description":"Required data key for the Series, should be unique across all series.","type":{"name":"string"}},"data":{"name":"data","required":true,"description":"Data for the Series.","type":{"name":"Datum[]"}},"xAccessor":{"name":"xAccessor","required":true,"description":"Given a Datum, returns the x-scale value.","type":{"name":"(d: Datum) => ScaleInput<XScale>"}},"yAccessor":{"name":"yAccessor","required":true,"description":"Given a Datum, returns the y-scale value.","type":{"name":"(d: Datum) => ScaleInput<YScale>"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"colorAccessor":{"name":"colorAccessor","required":false,"description":"Given a Datum, returns its color. Falls back to theme color if unspecified or if a null-ish value is returned.","type":{"name":"((d: Datum, index: number) => string | null | undefined) | undefined"}},"size":{"name":"size","required":false,"description":"The size of a `Glyph`, a `number` or a function which takes a `Datum` and returns a `number`.","type":{"name":"number | ((d: Datum) => number) | undefined"}},"renderGlyphs":{"name":"renderGlyphs","required":true,"description":"Function which handles rendering glyphs.","type":{"name":"(glyphsProps: GlyphsProps<XScale, YScale, Datum>) => ReactNode"}}},"filePath":"visx-xychart/src/components/series/private/BaseGlyphSeries.tsx","lineNumber":89},"defaultRenderGlyph":{"displayName":"defaultRenderGlyph","kind":"function","props":{},"parameters":[{"name":"{\\n  key,\\n  color,\\n  x,\\n  y,\\n  size,\\n  onBlur,\\n  onFocus,\\n  onPointerMove,\\n  onPointerOut,\\n  onPointerUp,\\n}","type":{"name":"GlyphProps<Datum>"}}],"filePath":"visx-xychart/src/components/series/private/defaultRenderGlyph.tsx","lineNumber":4},"BaseAreaSeriesWithRegisteredData":{"displayName":"BaseAreaSeriesWithRegisteredData","kind":"component","props":{"dataKey":{"name":"dataKey","required":true,"description":"Required data key for the Series, should be unique across all series.","type":{"name":"string"}},"data":{"name":"data","required":true,"description":"Data for the Series.","type":{"name":"Datum[]"}},"xAccessor":{"name":"xAccessor","required":true,"description":"Given a Datum, returns the x-scale value.","type":{"name":"(d: Datum) => ScaleInput<XScale>"}},"yAccessor":{"name":"yAccessor","required":true,"description":"Given a Datum, returns the y-scale value.","type":{"name":"(d: Datum) => ScaleInput<YScale>"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"x0Accessor":{"name":"x0Accessor","required":false,"description":"Optional accessor to override the baseline value of Area shapes per datum (useful to generate band shapes) when chart is rendered horizontally (vertical line). Defaults to the scale zero value, not compatible with AreaStack.","type":{"name":"((d: Datum) => ScaleInput<XScale>) | undefined"}},"y0Accessor":{"name":"y0Accessor","required":false,"description":"Optional accessor to override the baseline value of Area shapes per datum (useful to generate band shapes). Defaults to the scale zero value, not compatible with AreaStack.","type":{"name":"((d: Datum) => ScaleInput<YScale>) | undefined"}},"renderLine":{"name":"renderLine","required":false,"description":"Whether to render a Line along value of the Area shape (area is fill only).","type":{"name":"boolean | undefined"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the line generator. Defaults to curveLinear.","type":{"name":"CurveFactory | undefined"}},"lineProps":{"name":"lineProps","required":false,"description":"Props to be passed to the Line, if rendered.","type":{"name":"Omit<{ data?: Datum[] | undefined; innerRef?: Ref<SVGPathElement> | undefined; children?: ((args: { path: Line<Datum>; }) => ReactNode) | undefined; fill?: string | undefined; className?: string | undefined; } & LinePathConfig<Datum> & SVGProps<SVGPathElement>, \\"x\\" | \\"y\\" | \\"children\\" | \\"data\\" | \\"defined\\"> | undefined"}},"PathComponent":{"name":"PathComponent","required":false,"description":"Rendered component which is passed path props by BaseAreaSeries after processing.","type":{"name":"\\"path\\" | FC<Omit<SVGProps<SVGPathElement>, \\"ref\\">> | undefined"}}},"filePath":"visx-xychart/src/components/series/private/BaseAreaSeries.tsx","lineNumber":180},"AreaSeries":{"displayName":"AreaSeries","kind":"component","props":{"dataKey":{"name":"dataKey","required":true,"description":"Required data key for the Series, should be unique across all series.","type":{"name":"string"}},"xAccessor":{"name":"xAccessor","required":true,"description":"Given a Datum, returns the x-scale value.","type":{"name":"(d: Datum) => ScaleInput<XScale>"}},"yAccessor":{"name":"yAccessor","required":true,"description":"Given a Datum, returns the y-scale value.","type":{"name":"(d: Datum) => ScaleInput<YScale>"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the line generator. Defaults to curveLinear.","type":{"name":"CurveFactory | undefined"}},"data":{"name":"data","required":true,"description":"Data for the Series.","type":{"name":"Datum[]"}},"x0Accessor":{"name":"x0Accessor","required":false,"description":"Optional accessor to override the baseline value of Area shapes per datum (useful to generate band shapes) when chart is rendered horizontally (vertical line). Defaults to the scale zero value, not compatible with AreaStack.","type":{"name":"((d: Datum) => ScaleInput<XScale>) | undefined"}},"y0Accessor":{"name":"y0Accessor","required":false,"description":"Optional accessor to override the baseline value of Area shapes per datum (useful to generate band shapes). Defaults to the scale zero value, not compatible with AreaStack.","type":{"name":"((d: Datum) => ScaleInput<YScale>) | undefined"}},"renderLine":{"name":"renderLine","required":false,"description":"Whether to render a Line along value of the Area shape (area is fill only).","type":{"name":"boolean | undefined"}},"lineProps":{"name":"lineProps","required":false,"description":"Props to be passed to the Line, if rendered.","type":{"name":"Omit<{ data?: Datum[] | undefined; innerRef?: Ref<SVGPathElement> | undefined; children?: ((args: { path: Line<Datum>; }) => ReactNode) | undefined; fill?: string | undefined; className?: string | undefined; } & LinePathConfig<Datum> & SVGProps<SVGPathElement>, \\"x\\" | \\"y\\" | \\"children\\" | \\"data\\" | \\"defined\\"> | undefined"}}},"filePath":"visx-xychart/src/components/series/AreaSeries.tsx","lineNumber":6},"getBarStackRegistryData":{"displayName":"getBarStackRegistryData","description":"Constructs the `DataRegistryEntry`s for a BarStack, using the stacked data.","kind":"function","props":{},"parameters":[{"name":"stackedData","type":{"name":"BarStackData<XScale, YScale>"}},{"name":"comprehensiveDomain","type":{"name":"[number, number]"}},{"name":"horizontal","type":{"name":"boolean"}}],"filePath":"visx-xychart/src/utils/getBarStackRegistryData.ts","lineNumber":17},"getStackValue":{"displayName":"getStackValue","description":"Returns the value which forms a stack group.","kind":"function","props":{"stack":{"name":"stack","required":true,"type":{"name":"ScaleInput<XScale> | ScaleInput<YScale>"}}},"filePath":"visx-xychart/src/utils/combineBarStackData.ts","lineNumber":6},"combineBarStackData":{"displayName":"combineBarStackData","description":"Merges `seriesChildren` `props.data` by their `stack` value which\\nforms the stack grouping (`x` if vertical, `y` if horizontal)\\nand returns `CombinedStackData[]`.","kind":"function","props":{},"parameters":[{"name":"seriesChildren","type":{"name":"ReactElement<SeriesProps<XScale, YScale, Datum>, string | JSXElementConstructor<any>>[]"}},{"name":"horizontal","type":{"name":"boolean"}}],"returnType":"CombinedStackData<XScale, YScale>[]","filePath":"visx-xychart/src/utils/combineBarStackData.ts","lineNumber":15},"getChildrenAndGrandchildrenWithProps":{"displayName":"getChildrenAndGrandchildrenWithProps","description":"Returns children and grandchildren of type React.ReactNode.\\nFlattens children one level to support React.Fragments and Array type children.","kind":"function","props":{},"parameters":[{"name":"children","type":{"name":"ReactNode"}}],"returnType":"ReactElement<P, string | JSXElementConstructor<any>>[]","filePath":"visx-xychart/src/utils/getChildrenAndGrandchildrenWithProps.ts","lineNumber":14},"useStackedData":{"displayName":"useStackedData","kind":"hook","props":{"children":{"name":"children","required":true,"type":{"name":"ReactNode"}},"offset":{"name":"offset","required":false,"description":"Sets the stack offset to the pre-defined d3 offset, see https://github.com/d3/d3-shape#stack_offset.","type":{"name":"\\"expand\\" | \\"diverging\\" | \\"none\\" | \\"silhouette\\" | \\"wiggle\\" | undefined"}},"order":{"name":"order","required":false,"description":"Sets the stack order to the pre-defined d3 function, see https://github.com/d3/d3-shape#stack_order.","type":{"name":"\\"reverse\\" | \\"none\\" | \\"ascending\\" | \\"descending\\" | \\"insideout\\" | undefined"}}},"filePath":"visx-xychart/src/hooks/useStackedData.ts","lineNumber":20},"findNearestStackDatum":{"displayName":"findNearestStackDatum","description":"This is a wrapper around findNearestDatumX/Y for BarStack, accounting for a\\nBar\'s d0 and d1, not just d1 (which findNearestDatum uses). Additionally,\\nreturns the BarSeries original `Datum`, not the `BarStackDatum` so\\nTooltip typing is correct.","kind":"function","props":{},"parameters":[{"name":"nearestDatumArgs","type":{"name":"NearestDatumArgs<XScale, YScale, BarStackDatum<XScale, YScale>>"}},{"name":"seriesData","type":{"name":"Datum[]"}},{"name":"horizontal","type":{"name":"boolean"}}],"filePath":"visx-xychart/src/utils/findNearestStackDatum.ts","lineNumber":13},"BaseAreaStack":{"displayName":"BaseAreaStack","kind":"component","props":{"children":{"name":"children","required":true,"description":"`AreaSeries` elements, note we can\'t strictly enforce this with TS yet.","type":{"name":"ReactElement<AreaStackChildProps<XScale, YScale, Datum>, string | JSXElementConstructor<any>> | ReactElement<AreaStackChildProps<XScale, YScale, Datum>, string | JSXElementConstructor<any>>[]"}},"PathComponent":{"name":"PathComponent","required":false,"description":"Rendered component which is passed path props by BaseAreaStack after processing.","type":{"name":"\\"path\\" | FC<Omit<SVGProps<SVGPathElement>, \\"ref\\">> | undefined"},"defaultValue":{"value":"\'path\'"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the line generator. Defaults to curveLinear.","type":{"name":"CurveFactory | undefined"}},"renderLine":{"name":"renderLine","required":false,"description":"Whether to render a Line along value of the Area shape (area is fill only).","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}},"offset":{"name":"offset","required":false,"description":"Sets the stack offset to the pre-defined d3 offset, see https://github.com/d3/d3-shape#stack_offset.","type":{"name":"\\"expand\\" | \\"diverging\\" | \\"none\\" | \\"silhouette\\" | \\"wiggle\\" | undefined"}},"order":{"name":"order","required":false,"description":"Sets the stack order to the pre-defined d3 function, see https://github.com/d3/d3-shape#stack_order.","type":{"name":"\\"reverse\\" | \\"none\\" | \\"ascending\\" | \\"descending\\" | \\"insideout\\" | undefined"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}}},"filePath":"visx-xychart/src/components/series/private/BaseAreaStack.tsx","lineNumber":67},"AreaStack":{"displayName":"AreaStack","kind":"component","props":{"children":{"name":"children","required":true,"description":"`AreaSeries` elements, note we can\'t strictly enforce this with TS yet.","type":{"name":"ReactElement<AreaStackChildProps<XScale, YScale, Datum>, string | JSXElementConstructor<any>> | ReactElement<AreaStackChildProps<XScale, YScale, Datum>, string | JSXElementConstructor<any>>[]"}},"offset":{"name":"offset","required":false,"description":"Sets the stack offset to the pre-defined d3 offset, see https://github.com/d3/d3-shape#stack_offset.","type":{"name":"\\"expand\\" | \\"diverging\\" | \\"none\\" | \\"silhouette\\" | \\"wiggle\\" | undefined"}},"order":{"name":"order","required":false,"description":"Sets the stack order to the pre-defined d3 function, see https://github.com/d3/d3-shape#stack_order.","type":{"name":"\\"reverse\\" | \\"none\\" | \\"ascending\\" | \\"descending\\" | \\"insideout\\" | undefined"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the line generator. Defaults to curveLinear.","type":{"name":"CurveFactory | undefined"}},"renderLine":{"name":"renderLine","required":false,"description":"Whether to render a Line along value of the Area shape (area is fill only).","type":{"name":"boolean | undefined"}}},"filePath":"visx-xychart/src/components/series/AreaStack.tsx","lineNumber":6},"BaseBarSeriesWithRegisteredData":{"displayName":"BaseBarSeriesWithRegisteredData","kind":"component","props":{"dataKey":{"name":"dataKey","required":true,"description":"Required data key for the Series, should be unique across all series.","type":{"name":"string"}},"data":{"name":"data","required":true,"description":"Data for the Series.","type":{"name":"Datum[]"}},"xAccessor":{"name":"xAccessor","required":true,"description":"Given a Datum, returns the x-scale value.","type":{"name":"(d: Datum) => ScaleInput<XScale>"}},"yAccessor":{"name":"yAccessor","required":true,"description":"Given a Datum, returns the y-scale value.","type":{"name":"(d: Datum) => ScaleInput<YScale>"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"BarsComponent":{"name":"BarsComponent","required":true,"description":"Rendered component which is passed BarsProps by BaseBarSeries after processing.","type":{"name":"FC<BarsProps<XScale, YScale>>"}},"barPadding":{"name":"barPadding","required":false,"description":"Specify bar padding when bar thickness does not come from a `band` scale.\\nAccepted values are [0, 1], 0 = no padding, 1 = no bar, defaults to 0.1.","type":{"name":"number | undefined"}},"colorAccessor":{"name":"colorAccessor","required":false,"description":"Given a Datum, returns its color. Falls back to theme color if unspecified or if a null-ish value is returned.","type":{"name":"((d: Datum, index: number) => string | null | undefined) | undefined"}},"radiusAll":{"name":"radiusAll","required":false,"description":"Whether to apply radius to all corners.","type":{"name":"boolean | undefined"}},"radiusTop":{"name":"radiusTop","required":false,"description":"Whether to apply radius to top corners.","type":{"name":"boolean | undefined"}},"radiusRight":{"name":"radiusRight","required":false,"description":"Whether to apply radius to right corners.","type":{"name":"boolean | undefined"}},"radiusBottom":{"name":"radiusBottom","required":false,"description":"Whether to apply radius to bottom corners.","type":{"name":"boolean | undefined"}},"radiusLeft":{"name":"radiusLeft","required":false,"description":"Whether to apply radius to left corners.","type":{"name":"boolean | undefined"}}},"filePath":"visx-xychart/src/components/series/private/BaseBarSeries.tsx","lineNumber":137},"findNearestGroupDatum":{"displayName":"findNearestGroupDatum","description":"This is a wrapper around findNearestDatumX/Y for BarGroup, accounting for a\\nBar\'s group scale offset (which findNearestDatum does not).","kind":"function","props":{},"parameters":[{"name":"nearestDatumArgs","type":{"name":"NearestDatumArgs<XScale, YScale, Datum>"}},{"name":"groupScale","type":{"name":"ScaleBand<string>"}},{"name":"horizontal","type":{"name":"boolean"}}],"filePath":"visx-xychart/src/utils/findNearestGroupDatum.ts","lineNumber":11},"BaseBarGroup":{"displayName":"BaseBarGroup","kind":"component","props":{"children":{"name":"children","required":true,"description":"`BarSeries` elements","type":{"name":"ReactNode"}},"padding":{"name":"padding","required":false,"description":"Group band scale padding, [0, 1] where 0 = no padding, 1 = no bar.","type":{"name":"number | undefined"},"defaultValue":{"value":"0.1"}},"sortBars":{"name":"sortBars","required":false,"description":"Comparator function to sort `dataKeys` within a bar group. By default the DOM rendering order of `BarGroup`s `children` is used.","type":{"name":"((dataKeyA: string, dataKeyB: string) => number) | undefined"}},"BarsComponent":{"name":"BarsComponent","required":true,"description":"Rendered component which is passed BarsProps by BaseBarGroup after processing.","type":{"name":"FC<BarsProps<XScale, YScale>>"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}}},"filePath":"visx-xychart/src/components/series/private/BaseBarGroup.tsx","lineNumber":46},"Bars":{"displayName":"Bars","kind":"component","props":{"bars":{"name":"bars","required":true,"type":{"name":"Bar[]"}},"xScale":{"name":"xScale","required":true,"type":{"name":"AxisScale"}},"yScale":{"name":"yScale","required":true,"type":{"name":"AxisScale"}},"horizontal":{"name":"horizontal","required":false,"type":{"name":"boolean | undefined"}},"radiusAll":{"name":"radiusAll","required":false,"description":"Whether to apply radius to all corners.","type":{"name":"boolean | undefined"}},"radiusTop":{"name":"radiusTop","required":false,"description":"Whether to apply radius to top corners.","type":{"name":"boolean | undefined"}},"radiusRight":{"name":"radiusRight","required":false,"description":"Whether to apply radius to right corners.","type":{"name":"boolean | undefined"}},"radiusBottom":{"name":"radiusBottom","required":false,"description":"Whether to apply radius to bottom corners.","type":{"name":"boolean | undefined"}},"radiusLeft":{"name":"radiusLeft","required":false,"description":"Whether to apply radius to left corners.","type":{"name":"boolean | undefined"}}},"filePath":"visx-xychart/src/components/series/private/Bars.tsx","lineNumber":7},"BarGroup":{"displayName":"BarGroup","kind":"component","props":{"children":{"name":"children","required":true,"description":"`BarSeries` elements","type":{"name":"ReactNode"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"padding":{"name":"padding","required":false,"description":"Group band scale padding, [0, 1] where 0 = no padding, 1 = no bar.","type":{"name":"number | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"sortBars":{"name":"sortBars","required":false,"description":"Comparator function to sort `dataKeys` within a bar group. By default the DOM rendering order of `BarGroup`s `children` is used.","type":{"name":"((dataKeyA: string, dataKeyB: string) => number) | undefined"}}},"filePath":"visx-xychart/src/components/series/BarGroup.tsx","lineNumber":7},"BarSeries":{"displayName":"BarSeries","kind":"component","props":{"dataKey":{"name":"dataKey","required":true,"description":"Required data key for the Series, should be unique across all series.","type":{"name":"string"}},"xAccessor":{"name":"xAccessor","required":true,"description":"Given a Datum, returns the x-scale value.","type":{"name":"(d: Datum) => ScaleInput<XScale>"}},"yAccessor":{"name":"yAccessor","required":true,"description":"Given a Datum, returns the y-scale value.","type":{"name":"(d: Datum) => ScaleInput<YScale>"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"data":{"name":"data","required":true,"description":"Data for the Series.","type":{"name":"Datum[]"}},"radiusAll":{"name":"radiusAll","required":false,"description":"Whether to apply radius to all corners.","type":{"name":"boolean | undefined"}},"radiusTop":{"name":"radiusTop","required":false,"description":"Whether to apply radius to top corners.","type":{"name":"boolean | undefined"}},"radiusRight":{"name":"radiusRight","required":false,"description":"Whether to apply radius to right corners.","type":{"name":"boolean | undefined"}},"radiusBottom":{"name":"radiusBottom","required":false,"description":"Whether to apply radius to bottom corners.","type":{"name":"boolean | undefined"}},"radiusLeft":{"name":"radiusLeft","required":false,"description":"Whether to apply radius to left corners.","type":{"name":"boolean | undefined"}},"barPadding":{"name":"barPadding","required":false,"description":"Specify bar padding when bar thickness does not come from a `band` scale.\\nAccepted values are [0, 1], 0 = no padding, 1 = no bar, defaults to 0.1.","type":{"name":"number | undefined"}},"colorAccessor":{"name":"colorAccessor","required":false,"description":"Given a Datum, returns its color. Falls back to theme color if unspecified or if a null-ish value is returned.","type":{"name":"((d: Datum, index: number) => string | null | undefined) | undefined"}}},"filePath":"visx-xychart/src/components/series/BarSeries.tsx","lineNumber":7},"BaseBarStack":{"displayName":"BaseBarStack","kind":"component","props":{"children":{"name":"children","required":true,"description":"`BarSeries` elements, note we can\'t strictly enforce this with TS yet.","type":{"name":"ReactElement<BarStackChildProps<XScale, YScale, Datum>, string | JSXElementConstructor<any>> | ReactElement<BarStackChildProps<XScale, YScale, Datum>, string | JSXElementConstructor<any>>[]"}},"BarsComponent":{"name":"BarsComponent","required":true,"description":"Rendered component which is passed BarsProps by BaseBarStack after processing.","type":{"name":"FC<BarsProps<XScale, YScale>>"}},"offset":{"name":"offset","required":false,"description":"Sets the stack offset to the pre-defined d3 offset, see https://github.com/d3/d3-shape#stack_offset.","type":{"name":"\\"expand\\" | \\"diverging\\" | \\"none\\" | \\"silhouette\\" | \\"wiggle\\" | undefined"}},"order":{"name":"order","required":false,"description":"Sets the stack order to the pre-defined d3 function, see https://github.com/d3/d3-shape#stack_order.","type":{"name":"\\"reverse\\" | \\"none\\" | \\"ascending\\" | \\"descending\\" | \\"insideout\\" | undefined"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"},"defaultValue":{"value":"true"}}},"filePath":"visx-xychart/src/components/series/private/BaseBarStack.tsx","lineNumber":55},"BarStack":{"displayName":"BarStack","kind":"component","props":{"children":{"name":"children","required":true,"description":"`BarSeries` elements, note we can\'t strictly enforce this with TS yet.","type":{"name":"ReactElement<BarStackChildProps<XScale, YScale, Datum>, string | JSXElementConstructor<any>> | ReactElement<BarStackChildProps<XScale, YScale, Datum>, string | JSXElementConstructor<any>>[]"}},"offset":{"name":"offset","required":false,"description":"Sets the stack offset to the pre-defined d3 offset, see https://github.com/d3/d3-shape#stack_offset.","type":{"name":"\\"expand\\" | \\"diverging\\" | \\"none\\" | \\"silhouette\\" | \\"wiggle\\" | undefined"}},"order":{"name":"order","required":false,"description":"Sets the stack order to the pre-defined d3 function, see https://github.com/d3/d3-shape#stack_order.","type":{"name":"\\"reverse\\" | \\"none\\" | \\"ascending\\" | \\"descending\\" | \\"insideout\\" | undefined"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}}},"filePath":"visx-xychart/src/components/series/BarStack.tsx","lineNumber":7},"GlyphSeries":{"displayName":"GlyphSeries","kind":"component","props":{"dataKey":{"name":"dataKey","required":true,"description":"Required data key for the Series, should be unique across all series.","type":{"name":"string"}},"xAccessor":{"name":"xAccessor","required":true,"description":"Given a Datum, returns the x-scale value.","type":{"name":"(d: Datum) => ScaleInput<XScale>"}},"yAccessor":{"name":"yAccessor","required":true,"description":"Given a Datum, returns the y-scale value.","type":{"name":"(d: Datum) => ScaleInput<YScale>"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"data":{"name":"data","required":true,"description":"Data for the Series.","type":{"name":"Datum[]"}},"colorAccessor":{"name":"colorAccessor","required":false,"description":"Given a Datum, returns its color. Falls back to theme color if unspecified or if a null-ish value is returned.","type":{"name":"((d: Datum, index: number) => string | null | undefined) | undefined"}},"size":{"name":"size","required":false,"description":"The size of a `Glyph`, a `number` or a function which takes a `Datum` and returns a `number`.","type":{"name":"number | ((d: Datum) => number) | undefined"}},"renderGlyph":{"name":"renderGlyph","required":false,"type":{"name":"FC<GlyphProps<Datum>> | undefined"},"defaultValue":{"value":"defaultRenderGlyph"}}},"filePath":"visx-xychart/src/components/series/GlyphSeries.tsx","lineNumber":8},"BaseBaseLineSeriesWithRegisteredData":{"displayName":"BaseBaseLineSeriesWithRegisteredData","kind":"component","props":{"dataKey":{"name":"dataKey","required":true,"description":"Required data key for the Series, should be unique across all series.","type":{"name":"string"}},"data":{"name":"data","required":true,"description":"Data for the Series.","type":{"name":"Datum[]"}},"xAccessor":{"name":"xAccessor","required":true,"description":"Given a Datum, returns the x-scale value.","type":{"name":"(d: Datum) => ScaleInput<XScale>"}},"yAccessor":{"name":"yAccessor","required":true,"description":"Given a Datum, returns the y-scale value.","type":{"name":"(d: Datum) => ScaleInput<YScale>"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"PathComponent":{"name":"PathComponent","required":false,"description":"Rendered component which is passed path props by BaseLineSeries after processing.","type":{"name":"\\"path\\" | FC<Omit<SVGProps<SVGPathElement>, \\"ref\\">> | undefined"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the line generator. Defaults to curveLinear.","type":{"name":"CurveFactory | CurveFactoryLineOnly | undefined"}},"colorAccessor":{"name":"colorAccessor","required":false,"description":"Given a datakey, returns its color. Falls back to theme color if unspecified or if a null-ish value is returned.","type":{"name":"((dataKey: string) => string | null | undefined) | undefined"}}},"filePath":"visx-xychart/src/components/series/private/BaseLineSeries.tsx","lineNumber":119},"LineSeries":{"displayName":"LineSeries","kind":"component","props":{"dataKey":{"name":"dataKey","required":true,"description":"Required data key for the Series, should be unique across all series.","type":{"name":"string"}},"xAccessor":{"name":"xAccessor","required":true,"description":"Given a Datum, returns the x-scale value.","type":{"name":"(d: Datum) => ScaleInput<XScale>"}},"yAccessor":{"name":"yAccessor","required":true,"description":"Given a Datum, returns the y-scale value.","type":{"name":"(d: Datum) => ScaleInput<YScale>"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the line generator. Defaults to curveLinear.","type":{"name":"CurveFactory | CurveFactoryLineOnly | undefined"}},"data":{"name":"data","required":true,"description":"Data for the Series.","type":{"name":"Datum[]"}},"colorAccessor":{"name":"colorAccessor","required":false,"description":"Given a datakey, returns its color. Falls back to theme color if unspecified or if a null-ish value is returned.","type":{"name":"((dataKey: string) => string | null | undefined) | undefined"}}},"filePath":"visx-xychart/src/components/series/LineSeries.tsx","lineNumber":6},"AnimatedAreaSeries":{"displayName":"AnimatedAreaSeries","kind":"component","props":{"dataKey":{"name":"dataKey","required":true,"description":"Required data key for the Series, should be unique across all series.","type":{"name":"string"}},"xAccessor":{"name":"xAccessor","required":true,"description":"Given a Datum, returns the x-scale value.","type":{"name":"(d: Datum) => ScaleInput<XScale>"}},"yAccessor":{"name":"yAccessor","required":true,"description":"Given a Datum, returns the y-scale value.","type":{"name":"(d: Datum) => ScaleInput<YScale>"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the line generator. Defaults to curveLinear.","type":{"name":"CurveFactory | undefined"}},"data":{"name":"data","required":true,"description":"Data for the Series.","type":{"name":"Datum[]"}},"x0Accessor":{"name":"x0Accessor","required":false,"description":"Optional accessor to override the baseline value of Area shapes per datum (useful to generate band shapes) when chart is rendered horizontally (vertical line). Defaults to the scale zero value, not compatible with AreaStack.","type":{"name":"((d: Datum) => ScaleInput<XScale>) | undefined"}},"y0Accessor":{"name":"y0Accessor","required":false,"description":"Optional accessor to override the baseline value of Area shapes per datum (useful to generate band shapes). Defaults to the scale zero value, not compatible with AreaStack.","type":{"name":"((d: Datum) => ScaleInput<YScale>) | undefined"}},"renderLine":{"name":"renderLine","required":false,"description":"Whether to render a Line along value of the Area shape (area is fill only).","type":{"name":"boolean | undefined"}},"lineProps":{"name":"lineProps","required":false,"description":"Props to be passed to the Line, if rendered.","type":{"name":"Omit<{ data?: Datum[] | undefined; innerRef?: Ref<SVGPathElement> | undefined; children?: ((args: { path: Line<Datum>; }) => ReactNode) | undefined; fill?: string | undefined; className?: string | undefined; } & LinePathConfig<Datum> & SVGProps<SVGPathElement>, \\"x\\" | \\"y\\" | \\"children\\" | \\"data\\" | \\"defined\\"> | undefined"}}},"filePath":"visx-xychart/src/components/series/AnimatedAreaSeries.tsx","lineNumber":7},"AnimatedAreaStack":{"displayName":"AnimatedAreaStack","kind":"component","props":{"children":{"name":"children","required":true,"description":"`AreaSeries` elements, note we can\'t strictly enforce this with TS yet.","type":{"name":"ReactElement<AreaStackChildProps<XScale, YScale, Datum>, string | JSXElementConstructor<any>> | ReactElement<AreaStackChildProps<XScale, YScale, Datum>, string | JSXElementConstructor<any>>[]"}},"offset":{"name":"offset","required":false,"description":"Sets the stack offset to the pre-defined d3 offset, see https://github.com/d3/d3-shape#stack_offset.","type":{"name":"\\"expand\\" | \\"diverging\\" | \\"none\\" | \\"silhouette\\" | \\"wiggle\\" | undefined"}},"order":{"name":"order","required":false,"description":"Sets the stack order to the pre-defined d3 function, see https://github.com/d3/d3-shape#stack_order.","type":{"name":"\\"reverse\\" | \\"none\\" | \\"ascending\\" | \\"descending\\" | \\"insideout\\" | undefined"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the line generator. Defaults to curveLinear.","type":{"name":"CurveFactory | undefined"}},"renderLine":{"name":"renderLine","required":false,"description":"Whether to render a Line along value of the Area shape (area is fill only).","type":{"name":"boolean | undefined"}}},"filePath":"visx-xychart/src/components/series/AnimatedAreaStack.tsx","lineNumber":7},"colorHasUrl":{"displayName":"colorHasUrl","kind":"function","props":{},"filePath":"visx-xychart/src/utils/cleanColorString.ts","lineNumber":3},"cleanColor":{"displayName":"cleanColor","kind":"function","props":{},"filePath":"visx-xychart/src/utils/cleanColorString.ts","lineNumber":4},"AnimatedBars":{"displayName":"AnimatedBars","description":"Wrapper component which renders a Bars component depending on whether it needs rounded corners.","kind":"component","props":{"bars":{"name":"bars","required":true,"type":{"name":"Bar[]"}},"xScale":{"name":"xScale","required":true,"type":{"name":"XScale"}},"yScale":{"name":"yScale","required":true,"type":{"name":"YScale"}},"horizontal":{"name":"horizontal","required":false,"type":{"name":"boolean | undefined"}},"radiusAll":{"name":"radiusAll","required":false,"description":"Whether to apply radius to all corners.","type":{"name":"boolean | undefined"}},"radiusTop":{"name":"radiusTop","required":false,"description":"Whether to apply radius to top corners.","type":{"name":"boolean | undefined"}},"radiusRight":{"name":"radiusRight","required":false,"description":"Whether to apply radius to right corners.","type":{"name":"boolean | undefined"}},"radiusBottom":{"name":"radiusBottom","required":false,"description":"Whether to apply radius to bottom corners.","type":{"name":"boolean | undefined"}},"radiusLeft":{"name":"radiusLeft","required":false,"description":"Whether to apply radius to left corners.","type":{"name":"boolean | undefined"}}},"filePath":"visx-xychart/src/components/series/private/AnimatedBars.tsx","lineNumber":148},"AnimatedBarSeries":{"displayName":"AnimatedBarSeries","kind":"component","props":{"dataKey":{"name":"dataKey","required":true,"description":"Required data key for the Series, should be unique across all series.","type":{"name":"string"}},"xAccessor":{"name":"xAccessor","required":true,"description":"Given a Datum, returns the x-scale value.","type":{"name":"(d: Datum) => ScaleInput<XScale>"}},"yAccessor":{"name":"yAccessor","required":true,"description":"Given a Datum, returns the y-scale value.","type":{"name":"(d: Datum) => ScaleInput<YScale>"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"data":{"name":"data","required":true,"description":"Data for the Series.","type":{"name":"Datum[]"}},"radiusAll":{"name":"radiusAll","required":false,"description":"Whether to apply radius to all corners.","type":{"name":"boolean | undefined"}},"radiusTop":{"name":"radiusTop","required":false,"description":"Whether to apply radius to top corners.","type":{"name":"boolean | undefined"}},"radiusRight":{"name":"radiusRight","required":false,"description":"Whether to apply radius to right corners.","type":{"name":"boolean | undefined"}},"radiusBottom":{"name":"radiusBottom","required":false,"description":"Whether to apply radius to bottom corners.","type":{"name":"boolean | undefined"}},"radiusLeft":{"name":"radiusLeft","required":false,"description":"Whether to apply radius to left corners.","type":{"name":"boolean | undefined"}},"barPadding":{"name":"barPadding","required":false,"description":"Specify bar padding when bar thickness does not come from a `band` scale.\\nAccepted values are [0, 1], 0 = no padding, 1 = no bar, defaults to 0.1.","type":{"name":"number | undefined"}},"colorAccessor":{"name":"colorAccessor","required":false,"description":"Given a Datum, returns its color. Falls back to theme color if unspecified or if a null-ish value is returned.","type":{"name":"((d: Datum, index: number) => string | null | undefined) | undefined"}}},"filePath":"visx-xychart/src/components/series/AnimatedBarSeries.tsx","lineNumber":7},"AnimatedBarStack":{"displayName":"AnimatedBarStack","kind":"component","props":{"children":{"name":"children","required":true,"description":"`BarSeries` elements, note we can\'t strictly enforce this with TS yet.","type":{"name":"ReactElement<BarStackChildProps<XScale, YScale, Datum>, string | JSXElementConstructor<any>> | ReactElement<BarStackChildProps<XScale, YScale, Datum>, string | JSXElementConstructor<any>>[]"}},"offset":{"name":"offset","required":false,"description":"Sets the stack offset to the pre-defined d3 offset, see https://github.com/d3/d3-shape#stack_offset.","type":{"name":"\\"expand\\" | \\"diverging\\" | \\"none\\" | \\"silhouette\\" | \\"wiggle\\" | undefined"}},"order":{"name":"order","required":false,"description":"Sets the stack order to the pre-defined d3 function, see https://github.com/d3/d3-shape#stack_order.","type":{"name":"\\"reverse\\" | \\"none\\" | \\"ascending\\" | \\"descending\\" | \\"insideout\\" | undefined"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}}},"filePath":"visx-xychart/src/components/series/AnimatedBarStack.tsx","lineNumber":7},"AnimatedBarGroup":{"displayName":"AnimatedBarGroup","kind":"component","props":{"children":{"name":"children","required":true,"description":"`BarSeries` elements","type":{"name":"ReactNode"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"padding":{"name":"padding","required":false,"description":"Group band scale padding, [0, 1] where 0 = no padding, 1 = no bar.","type":{"name":"number | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"sortBars":{"name":"sortBars","required":false,"description":"Comparator function to sort `dataKeys` within a bar group. By default the DOM rendering order of `BarGroup`s `children` is used.","type":{"name":"((dataKeyA: string, dataKeyB: string) => number) | undefined"}}},"filePath":"visx-xychart/src/components/series/AnimatedBarGroup.tsx","lineNumber":7},"useAnimatedGlyphsConfig":{"displayName":"useAnimatedGlyphsConfig","description":"Memoized useTransition config","kind":"hook","props":{"xScale":{"name":"xScale","required":true,"type":{"name":"XScale"}},"yScale":{"name":"yScale","required":true,"type":{"name":"YScale"}},"horizontal":{"name":"horizontal","required":false,"type":{"name":"boolean | undefined"}}},"filePath":"visx-xychart/src/components/series/private/AnimatedGlyphs.tsx","lineNumber":9},"AnimatedGlyphs":{"displayName":"AnimatedGlyphs","kind":"component","props":{"renderGlyph":{"name":"renderGlyph","required":true,"description":"// unanimated Glyph component","type":{"name":"FC<GlyphProps<Datum>>"}},"xScale":{"name":"xScale","required":true,"type":{"name":"XScale"}},"yScale":{"name":"yScale","required":true,"type":{"name":"YScale"}},"horizontal":{"name":"horizontal","required":false,"type":{"name":"boolean | undefined"}},"glyphs":{"name":"glyphs","required":true,"type":{"name":"GlyphProps<Datum>[]"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback to invoke for onBlur.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback to invoke for onFocus.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback to invoke for onPointerMove.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback to invoke for onPointerOut.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback to invoke for onPointerUp.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}}},"filePath":"visx-xychart/src/components/series/private/AnimatedGlyphs.tsx","lineNumber":40},"AnimatedGlyphSeries":{"displayName":"AnimatedGlyphSeries","kind":"component","props":{"dataKey":{"name":"dataKey","required":true,"description":"Required data key for the Series, should be unique across all series.","type":{"name":"string"}},"xAccessor":{"name":"xAccessor","required":true,"description":"Given a Datum, returns the x-scale value.","type":{"name":"(d: Datum) => ScaleInput<XScale>"}},"yAccessor":{"name":"yAccessor","required":true,"description":"Given a Datum, returns the y-scale value.","type":{"name":"(d: Datum) => ScaleInput<YScale>"}},"onFocus":{"name":"onFocus","required":false,"description":"Callback invoked for onFocus events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onBlur":{"name":"onBlur","required":false,"description":"Callback invoked for onBlur events for the nearest Datum to the FocusEvent.\\nXYChart will NOT capture and emit FocusEvents, they are emitted from individual Series glyph shapes.","type":{"name":"((event: FocusEvent<Element, Element>) => void) | undefined"}},"onPointerDown":{"name":"onPointerDown","required":false,"description":"Callback invoked for onPointerDown events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerMove":{"name":"onPointerMove","required":false,"description":"Callback invoked for onPointerMove events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerUp":{"name":"onPointerUp","required":false,"description":"Callback invoked for onPointerUp events for the nearest Datum to the PointerEvent.\\nBy default XYChart will capture and emit PointerEvents, invoking this function for\\nany Series with a defined handler. Alternatively you may set <XYChart captureEvents={false} />\\nand Series will emit their own events.","type":{"name":"(({ datum, distanceX, distanceY, event, index, key, svgPoint, }: EventHandlerParams<Datum>) => void) | undefined"}},"onPointerOut":{"name":"onPointerOut","required":false,"description":"Callback invoked for onPointerOut events. By default XYChart will capture and emit\\nPointerEvents, invoking this function for any Series with a defined handler.\\nAlternatively you may set <XYChart captureEvents={false} /> and Series will emit\\ntheir own events.","type":{"name":"((event: PointerEvent<Element>) => void) | undefined"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"data":{"name":"data","required":true,"description":"Data for the Series.","type":{"name":"Datum[]"}},"colorAccessor":{"name":"colorAccessor","required":false,"description":"Given a Datum, returns its color. Falls back to theme color if unspecified or if a null-ish value is returned.","type":{"name":"((d: Datum, index: number) => string | null | undefined) | undefined"}},"size":{"name":"size","required":false,"description":"The size of a `Glyph`, a `number` or a function which takes a `Datum` and returns a `number`.","type":{"name":"number | ((d: Datum) => number) | undefined"}},"renderGlyph":{"name":"renderGlyph","required":false,"type":{"name":"FC<GlyphProps<Datum>> | undefined"},"defaultValue":{"value":"defaultRenderGlyph"}}},"filePath":"visx-xychart/src/components/series/AnimatedGlyphSeries.tsx","lineNumber":9},"AnimatedLineSeries":{"displayName":"AnimatedLineSeries","kind":"component","props":{"dataKey":{"name":"dataKey","required":true,"description":"Required data key for the Series, should be unique across all series.","type":{"name":"string"}},"xAccessor":{"name":"xAccessor","required":true,"description":"Given a Datum, returns the x-scale value.","type":{"name":"(d: Datum) => ScaleInput<XScale>"}},"yAccessor":{"name":"yAccessor","required":true,"description":"Given a Datum, returns the y-scale value.","type":{"name":"(d: Datum) => ScaleInput<YScale>"}},"enableEvents":{"name":"enableEvents","required":false,"description":"Whether the Series emits and subscribes to PointerEvents and FocusEvents (including Tooltip triggering).","type":{"name":"boolean | undefined"}},"curve":{"name":"curve","required":false,"description":"Sets the curve factory (from @visx/curve or d3-curve) for the line generator. Defaults to curveLinear.","type":{"name":"CurveFactory | CurveFactoryLineOnly | undefined"}},"data":{"name":"data","required":true,"description":"Data for the Series.","type":{"name":"Datum[]"}},"colorAccessor":{"name":"colorAccessor","required":false,"description":"Given a datakey, returns its color. Falls back to theme color if unspecified or if a null-ish value is returned.","type":{"name":"((dataKey: string) => string | null | undefined) | undefined"}}},"filePath":"visx-xychart/src/components/series/AnimatedLineSeries.tsx","lineNumber":7},"ThemeProvider":{"displayName":"ThemeProvider","kind":"component","props":{"theme":{"name":"theme","required":false,"type":{"name":"XYChartTheme | undefined"},"defaultValue":{"value":"lightTheme"}},"children":{"name":"children","required":true,"type":{"name":"ReactNode"}}},"filePath":"visx-xychart/src/providers/ThemeProvider.tsx","lineNumber":11},"findNearestDatumXY":{"displayName":"findNearestDatumXY","description":"/* finds the datum nearest to svgMouseX/Y using a voronoi","kind":"function","props":{},"parameters":[{"name":"{\\n  width,\\n  height,\\n  xScale,\\n  yScale,\\n  xAccessor,\\n  yAccessor,\\n  point,\\n  data,\\n}","type":{"name":"NearestDatumArgs<XScale, YScale, Datum>"}}],"returnType":"NearestDatumReturnType<Datum>","filePath":"visx-xychart/src/utils/findNearestDatumXY.ts","lineNumber":6}},"@visx/zoom":{"identityMatrix":{"displayName":"identityMatrix","kind":"function","props":{},"parameters":[],"returnType":"TransformMatrix","filePath":"visx-zoom/src/util/matrix.ts","lineNumber":3},"createMatrix":{"displayName":"createMatrix","kind":"function","props":{},"parameters":[{"name":"{\\n  scaleX = 1,\\n  scaleY = 1,\\n  translateX = 0,\\n  translateY = 0,\\n  skewX = 0,\\n  skewY = 0,\\n}","type":{"name":"Partial<TransformMatrix>"}}],"returnType":"TransformMatrix","filePath":"visx-zoom/src/util/matrix.ts","lineNumber":14},"inverseMatrix":{"displayName":"inverseMatrix","kind":"function","props":{},"parameters":[{"name":"{\\n  scaleX,\\n  scaleY,\\n  translateX,\\n  translateY,\\n  skewX,\\n  skewY,\\n}","type":{"name":"TransformMatrix"}}],"filePath":"visx-zoom/src/util/matrix.ts","lineNumber":32},"applyMatrixToPoint":{"displayName":"applyMatrixToPoint","kind":"function","props":{},"parameters":[{"name":"matrix","type":{"name":"TransformMatrix"}},{"name":"{ x, y }","type":{"name":"Point"}}],"filePath":"visx-zoom/src/util/matrix.ts","lineNumber":51},"applyInverseMatrixToPoint":{"displayName":"applyInverseMatrixToPoint","kind":"function","props":{},"parameters":[{"name":"matrix","type":{"name":"TransformMatrix"}},{"name":"{ x, y }","type":{"name":"Point"}}],"filePath":"visx-zoom/src/util/matrix.ts","lineNumber":58},"scaleMatrix":{"displayName":"scaleMatrix","kind":"function","props":{},"parameters":[{"name":"scaleX","type":{"name":"number"}},{"name":"maybeScaleY","type":{"name":"number | undefined"},"defaultValue":{"value":"undefined"}}],"filePath":"visx-zoom/src/util/matrix.ts","lineNumber":62},"translateMatrix":{"displayName":"translateMatrix","kind":"function","props":{},"parameters":[{"name":"translateX","type":{"name":"number"}},{"name":"translateY","type":{"name":"number"}}],"filePath":"visx-zoom/src/util/matrix.ts","lineNumber":70},"multiplyMatrices":{"displayName":"multiplyMatrices","kind":"function","props":{},"parameters":[{"name":"matrix1","type":{"name":"TransformMatrix"}},{"name":"matrix2","type":{"name":"TransformMatrix"}}],"filePath":"visx-zoom/src/util/matrix.ts","lineNumber":77},"composeMatrices":{"displayName":"composeMatrices","kind":"function","props":{},"parameters":[{"name":"matrices","type":{"name":"TransformMatrix[]"}}],"returnType":"TransformMatrix","filePath":"visx-zoom/src/util/matrix.ts","lineNumber":90},"Zoom":{"displayName":"Zoom","kind":"component","props":{"width":{"name":"width","required":true,"description":"Width of the zoom container.","type":{"name":"number"}},"height":{"name":"height","required":true,"description":"Height of the zoom container.","type":{"name":"number"}},"wheelDelta":{"name":"wheelDelta","required":false,"description":"```js\\n wheelDelta(event)\\n```\\n\\nA function that returns { scaleX,scaleY } factors to scale the matrix by.\\nScale factors greater than 1 will increase (zoom in), less than 1 will decrease (zoom out).","type":{"name":"((event: WheelEvent | WheelEvent<Element>) => Scale) | undefined"},"defaultValue":{"value":"defaultWheelDelta"}},"pinchDelta":{"name":"pinchDelta","required":false,"description":"```js\\n pinchDelta(state)\\n```\\n\\nA function that returns { scaleX, scaleY, point } factors to scale the matrix by.\\nScale factors greater than 1 will increase (zoom in), less than 1 will decrease (zoom out), the point is used to find where to zoom.\\nThe state parameter is from react-use-gestures onPinch handler","type":{"name":"PinchDelta | undefined"},"defaultValue":{"value":"defaultPinchDelta"}},"scaleXMin":{"name":"scaleXMin","required":false,"description":"Minimum x scale value for transform.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"scaleXMax":{"name":"scaleXMax","required":false,"description":"Maximum x scale value for transform.","type":{"name":"number | undefined"},"defaultValue":{"value":"Infinity"}},"scaleYMin":{"name":"scaleYMin","required":false,"description":"Minimum y scale value for transform.","type":{"name":"number | undefined"},"defaultValue":{"value":"0"}},"scaleYMax":{"name":"scaleYMax","required":false,"description":"Maximum y scale value for transform.","type":{"name":"number | undefined"},"defaultValue":{"value":"Infinity"}},"constrain":{"name":"constrain","required":false,"description":"By default constrain() will only constrain scale values. To change\\nconstraints you can pass in your own constrain function as a prop.\\n\\nFor example, if you wanted to constrain your view to within [[0, 0], [width, height]]:\\n\\n```js\\nfunction constrain(transformMatrix, prevTransformMatrix) {\\n  const min = applyMatrixToPoint(transformMatrix, { x: 0, y: 0 });\\n  const max = applyMatrixToPoint(transformMatrix, { x: width, y: height });\\n  if (max.x < width || max.y < height) {\\n    return prevTransformMatrix;\\n  }\\n  if (min.x > 0 || min.y > 0) {\\n    return prevTransformMatrix;\\n  }\\n  return transformMatrix;\\n}\\n```","type":{"name":"((transform: TransformMatrix, prevTransform: TransformMatrix) => TransformMatrix) | undefined"}},"initialTransformMatrix":{"name":"initialTransformMatrix","required":false,"description":"Initial transform matrix to apply.","type":{"name":"TransformMatrix | undefined"},"defaultValue":{"value":"defaultInitialTransformMatrix"}},"children":{"name":"children","required":true,"type":{"name":"(zoom: ProvidedZoom<ElementType> & ZoomState) => ReactElement<any, string | JSXElementConstructor<any>>"}}},"filePath":"visx-zoom/src/Zoom.tsx","lineNumber":106}}}');function attachDocGenInfo(e,n){let t="@visx/".concat(e),a=i[t];return a?Object.keys(n).forEach(e=>{let t=n[e],i=a[e];i&&"function"==typeof t&&(t.__docgenInfo=i)}):console.warn("No documentation found for package: ".concat(t)),n}}}]);